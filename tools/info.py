'''
This file is intended to hold any organizational information to centralize it to be imported by other scripts.

This file itself may not be the most organized by hopefully it allows others to stay moreso. 

A 'deploy_index' is used for many locations to denote the specific configuration of antennas and pulsers depending
upon which deployment you are in.

You can set what you want the default deployment to be by changing default_deploy at the top of this file.

deploy_index = 0:
    Before Oct 2019
deploy_index = 1:
    After Oct 2019
'''
import sys
import os
import inspect
import numpy
import csv

sys.path.append(os.environ['BEACON_ANALYSIS_DIR'])
sys.path.append(os.environ['BEACON_INSTALL_DIR'])
from examples.beacon_data_reader import Reader #Must be imported before matplotlib or else plots don't load.
from tools.data_handler import getEventTimes, createFile
import tools.field_fox as ff

import h5py
import pymap3d as pm
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import scipy.interpolate
default_deploy = 1 #The deployment time to use as the default.



'''
#ON FRIDAY I RAN THIS SCRIPT ATTEMPTING TO GET TIME DELAYS.  I GOT UP TO 16/27.  NEED TO DO THE REST BY EYE.
#HERE IS THE PRINTOUT

1774,88810],[1774,88923],[1774,88988],[1774,89203
ab5f43
[[-26.41622075  15.78091577   2.34602316  28.48072113  15.60887407
  -13.38797215]
 [  5.58353511  13.2002903   11.27655131   7.41343318   5.16125095
   13.05952891]
 [ 36.08183615  11.21399069  46.37305774 -25.07116747  10.1817405
   35.11214658]
 [102.48993165  24.80528485  73.82152867 -90.96313787 -28.24611881
   61.68476887]]
[[   0.           35.87851415   60.18331405   21.88057598   18.28334047
   -18.87766634]
 [  46.02897434 -132.20622497 -392.63043555  -15.1865899     7.00678916
    -3.95695906]
 [  14.2951011   394.7731367   328.47452229  -69.6299673   135.38117631
   -43.33886779]
 [ 654.52482064  570.41207039  832.93206165  -83.90942825  -12.87184705
    71.00630088]]
[[0.6204534  0.70644162 0.58508204 0.80348651 0.68631217 0.62076061]
 [0.75806037 0.75671567 0.74040503 0.72037026 0.66559878 0.52772841]
 [0.73175229 0.77029831 0.85653911 0.85610337 0.76127343 0.77133664]
 [0.78751439 0.81635957 0.73374321 0.79957951 0.62582142 0.80829344]]
[[0.07507139 0.06168901 0.09490234 0.80202839 0.62418089 0.49115493]
 [0.07533579 0.08488013 0.0845811  0.35461065 0.29760192 0.29025555]
 [0.07641062 0.07198609 0.11753064 0.13213461 0.25403444 0.19533438]
 [0.06814221 0.05833277 0.07026216 0.92986665 0.91561262 0.90739401]]


[[1784,7255





'''



def loadKnownPlaneDict():
    '''
    Loads a list of known planes, and the event ids associated with them.

    Good baselines indicate baselines that are worth using for calibration.

    I.e. if an antenna is down, the baselines with that antenna won't be useful.
    Or if an event is clearly only hpol the vpol might not be worth trying to
    calibrate.  

    If reasonable, the time delays may be stored here as well.  This is helpful
    if time delays were done by eye and not easily reproduced with cross correlation.
    '''

    known_planes = {\
    '1728-62026':{  'eventids':numpy.array([[1728,62026],[1728,62182],[1728,62370],[1728,62382],[1728,62552],[1728,62577]]),\
                    'known_flight':'a44585',
                    'baselines':{'hpol':[[0,1],[0,2],[0,3],[1,2],[1,3],[2,3]],'vpol':[[0,1],[0,2],[0,3],[1,2],[1,3],[2,3]]},\
                    'time_delays':{\
                        'hpol':numpy.array([[  99.36190078,   25.44653118,   96.07746836,  -73.43052481,   -2.83086794,     70.61529703],\
                                             [  91.29158112,    8.25800151,   78.10693097,  -82.84589775,  -13.15336983,     70.09917193],\
                                             [  69.94277039,  -26.74466399,   37.41124928,  -96.76563515,  -32.45332034,     64.24975419],\
                                             [  68.09723217,  -29.07504699,   34.68986241,  -97.21919963,  -33.14148713,     63.68670863],\
                                             [  37.28612804,  -65.26636423,  -13.93537755, -102.66197335,  -50.20489556,     51.69071023],\
                                             [  31.93719524,  -69.58304684,  -20.25399992, -101.70792393,  -51.92531254,     49.12572491]]),\
                        'vpol':numpy.array([[ 102.52121196,   23.36639064,  102.63069304,  -79.07662054,    0.12512124,     79.32686301],\
                                             [  94.66985446,    5.77121697,   84.08146995,  -88.88299734,  -10.61966482,     78.31025298],\
                                             [  73.3992445,   -29.96653579,   43.11990563, -103.28757952,  -30.27933888,     73.03952095],\
                                             [  71.64754721,  -32.15615741,   40.3515983,  -103.80370462,  -31.45235046,     72.44519509],\
                                             [  38.80322302,  -67.95647078,   -9.36845247, -106.74405364,  -48.10911487,     58.556738  ],\
                                             [  33.72017284,  -72.27315339,  -16.18755978, -105.99332623,  -49.84517201,     56.03867314]])},\
                    'max_corrs':{\
                        'hpol':numpy.array([[0.54296347, 0.66401425, 0.5290622,  0.46341469, 0.57353087, 0.68803661],\
                                             [0.72755695, 0.73327106, 0.67828298, 0.71050678, 0.740176,   0.7255736 ],\
                                             [0.78951981, 0.87576484, 0.91596379, 0.79068938, 0.80368587, 0.8066493 ],\
                                             [0.73420813, 0.86623596, 0.79277576, 0.75192662, 0.77947303, 0.72376367],\
                                             [0.55723343, 0.85686536, 0.74134153, 0.63097564, 0.71972242, 0.70229345],\
                                             [0.62062809, 0.83165972, 0.74880425, 0.61628435, 0.74726736, 0.75501151]]),\
                        'vpol':numpy.array([[0.74859039, 0.72094946, 0.68496901, 0.77969161, 0.85019343, 0.77799921],\
                                             [0.8244373,  0.83915634, 0.8180681,  0.84242355, 0.89382184, 0.83890872],\
                                             [0.88868985, 0.90940108, 0.89158618, 0.88425718, 0.87083196, 0.89345349],\
                                             [0.88184143, 0.92427453, 0.87074308, 0.89623232, 0.86348606, 0.88157825],\
                                             [0.91547578, 0.93912025, 0.90280934, 0.91923303, 0.92003877, 0.89160619],\
                                             [0.9403921,  0.94107688, 0.90800336, 0.93372543, 0.91330014, 0.90518039]])}},\
    '1773-14413':{  'eventids':numpy.array([[1773,14413],[1773,14540],[1773,14590]]),\
                    'known_flight':'aa8c39',
                    'baselines':{'hpol':[[0,1],[0,2],[0,3],[1,2],[1,3],[2,3]],'vpol':[[1,2],[1,3],[2,3]]},\
                    'time_delays':{\
                        'hpol':numpy.array([[ 91.08825911, 109.19955788, 144.42118554,  18.90894665,  53.00448319,    33.67325238],\
                                             [108.0265463,   99.76854479, 150.20804266,  -8.05467951,  42.29097744,    50.34565695],\
                                             [111.38917949,  97.04715793, 149.94216004, -14.2951011,   38.70938209,    52.69168011]]),\
                        'vpol':numpy.array([[ -14.06049879, -254.52787238,   40.21083691,   10.44762313,   55.74151021,     14.51406326],\
                                             [-212.42457679,  -50.09541448, -132.1280242,   -13.68513508,   44.94980369,     59.1041434 ],\
                                             [  12.76236597,  222.55939683,   77.87232866,  -21.06728795,   55.00642295,   -237.54266472]])},\
                    'max_corrs':{\
                        'hpol':numpy.array([[0.90272377, 0.60064537, 0.87741312, 0.67375529, 0.89613162, 0.59279454],\
                                             [0.9031536,  0.88038772, 0.93706705, 0.88307895, 0.94245707, 0.896344  ],\
                                             [0.71921489, 0.74597444, 0.79102785, 0.7537876,  0.63843518, 0.79467544]]),\
                        'vpol':numpy.array([[0.10380397, 0.06419393, 0.0760841,  0.43932523, 0.47531169, 0.51327703],\
                                             [0.06753853, 0.08494523, 0.06685715, 0.50694484, 0.47081591, 0.42630021],\
                                             [0.06910693, 0.09430286, 0.0840499,  0.24675524, 0.32500253, 0.19712771]])}},\
    '1773-63659':{  'eventids':numpy.array([[1773,63659],[1773,63707],[1773,63727],[1773,63752],[1773,63757]]),\
                    'known_flight':'a28392',
                    'baselines':{'hpol':[[0,1],[0,2],[0,3],[1,2],[1,3],[2,3]],'vpol':[[1,2],[1,3],[2,3]]},\
                    'time_delays':{\
                        'hpol':numpy.array([[ 93.40300196,  12.60596443,  77.8566885,  -80.84395799, -15.5306733,    65.28200438],\
                                             [ 94.54473323,  12.88748721,  79.01405993, -81.71980663, -15.59323392,    66.14221287],\
                                             [ 95.07649848,  13.09080922,  79.54582518, -82.03260972, -15.54631345,    66.51757658],\
                                             [ 95.8897865,   13.24721076,  80.07759042, -82.61129543, -15.85911654,    67.00242136],\
                                             [ 95.82722589,  13.16900999,  80.09323058, -82.67385605, -15.71835515,    67.00242136]]),\
                        'vpol':numpy.array([[ 442.74149019,  355.8291523,   429.71324159,  -87.74126607,  -13.51309338,     74.16561207],\
                                             [  10.02533896,  596.48420774,  672.37023679,  -88.60147456,  -13.38797215,     75.08838118],\
                                             [ 297.75725908,  590.44710815,  284.30672632,  -88.85171703,  -13.38797215,     75.44810473],\
                                             [  12.96568798,   71.71010783, -156.35462334,  -89.2740012,   -12.82492659,     90.13420969],\
                                             [  -5.94325866,  198.31715754,  232.099891,    -89.33656182,  -13.30977138,     75.91730936]])},\
                    'max_corrs':{\
                        'hpol':numpy.array([[0.95098351, 0.95833601, 0.94619827, 0.93922142, 0.93210956, 0.90940208],\
                                             [0.92373364, 0.9104255,  0.94496063, 0.91447291, 0.93351235, 0.90544071],\
                                             [0.95289233, 0.94974068, 0.93237005, 0.94604289, 0.92418265, 0.90493278],\
                                             [0.83174037, 0.7827824,  0.88097779, 0.79032702, 0.86531262, 0.80427036],\
                                             [0.87302171, 0.88326716, 0.8874286,  0.88267858, 0.91460527, 0.89029115]]),\
                        'vpol':numpy.array([[0.06289992, 0.05902408, 0.06221534, 0.94319635, 0.89536839, 0.89388475],\
                                             [0.09225186, 0.08122064, 0.08065197, 0.86999957, 0.85958327, 0.84102569],\
                                             [0.06772418, 0.07353492, 0.08277247, 0.92582262, 0.89727331, 0.88631299],\
                                             [0.07894339, 0.06906414, 0.09807917, 0.45253002, 0.52531616, 0.36415181],\
                                             [0.06454302, 0.05635923, 0.07649677, 0.82547947, 0.82546989, 0.76452701]])}},\
    '1774-88800':{  'eventids':numpy.array([[1774,88800],[1774,88810],[1774,88815],[1774,88895],[1774,88913],[1774,88921],[1774,88923],[1774,88925],[1774,88944],[1774,88955],[1774,88959],[1774,88988],[1774,88993],[1774,89029],[1774,89030],[1774,89032],[1774,89034],[1774,89041],[1774,89043],[1774,89052],[1774,89172],[1774,89175],[1774,89181],[1774,89203],[1774,89204],[1774,89213]]),\
                    'known_flight':'ab5f43',
                    'baselines':{'hpol':[[0,1],[0,2],[0,3],[1,2],[1,3],[2,3]],'vpol':[[1,2],[1,3],[2,3]]},\
                    'time_delays':{\
                        'hpol':numpy.array([[-28.49636128,  17.06340843, -11.77703625,  45.54412955,  16.5942038, -28.99684622],\
                                            [-26.4318609,   15.78091577, -11.30783162,  41.99381451,  15.0145482, -26.932],\
                                            [-2.52432092e+01,  1.56401544e+01, -1.00253390e+01,  4.02421172e+01,  14.592, -2.55560123e+01],\
                                            [-6.56886484e-01,  1.36538548e+01,  6.64706561e+00,  1.42169003e+01,  7.67931580e+00, -6.95986870e+00],\
                                            [ 3.06547026e+00,  1.32002903e+01,  9.49357371e+00,  9.96277834e+00,  6.47502391e+00, -3.73799690e+00],\
                                            [ 5.78685712e+00,  1.33723320e+01,  1.13547521e+01,  7.05370963e+00,  5.78685712e+00, -1.73605714e+00],\
                                            [  5.58353511,  13.2002903 ,  11.27655131,   7.41343318,   5.16125095,   13.05952891],\
                                            [ 6.94422854e+00,  1.33879721e+01,  1.31377297e+01,  5.31765249e+00,  4.80152739e+00, -7.82007719e-02],\
                                            [ 1.51083891e+01,  1.26841652e+01,  1.89871474e+01, -3.34699304e+00,  2.89342856e+00,  6.92858839e+00],\
                                            [ 2.16459737e+01,  1.18865173e+01,  2.29441065e+01, -9.90021772e+00,  1.21993204e+00,  1.10575891e+01],\
                                            [ 2.21933791e+01,  1.23088015e+01,  2.32256293e+01, -9.99405865e+00,  1.11045096e+00,  1.09793884e+01],\
                                            [ 36.08183615,  11.21399069,  32.82868404, -25.07116747,  -2.94034902, 22.06825783],\
                                            [ 37.16100681,  11.05758915,  33.46993037, -26.21289874,  -3.23751196, 23.16306864],\
                                            [ 5.38959720e+01,  1.10575891e+01,  4.64043380e+01, -4.28383828e+01, -7.44471348e+00,  3.53467489e+01],\
                                            [ 5.31608847e+01,  1.09637482e+01,  4.60758948e+01, -4.26819813e+01, -7.35087256e+00,  3.51747072e+01],\
                                            [ 54.52157817,  10.86990729,  47.07686468, -44.16779597,  -7.72623626,   36.28515816],\
                                            [ 55.3348662,   10.82298683,  47.29582684, -44.66828091,  -7.96083858,   36.59796125],\
                                            [ 56.75812024,  10.88554745,  48.39063765, -45.76309172,  -8.14852043,   37.64585159],\
                                            [ 57.96241213,  10.99502853,  49.39160753, -47.10814499,  -8.50824398,   38.50606008],\
                                            [ 58.58801831,  10.85426714,  51.15894498, -48.60959981,  -8.78976676,   39.67907166],\
                                            [ 86.20853094,  10.51018374,  70.88117965, -75.01018041, -15.07710882,   59.9956322 ],\
                                            [ 85.48908384,  10.63530498,  71.39730474, -75.93294951, -15.34299145,   60.62123838],\
                                            [ 85.42652322,  10.74478606,  71.7883086,  -76.04243059, -15.28043083,   60.84020054],\
                                            [ 88.86735719,  11.574,  73.08644142, -77.41876418, -15.62451423,   61.68476887],\
                                            [ 88.36687225,  11.65191501,  73.55564605, -77.27800279, -15.42119222,   62.26345459],\
                                            [ 89.77448614,  11.93343779,  74.18125222, -77.88796881, -15.67143469,   61.65348857]]),\
                        'vpol':numpy.array([[-370.32757541,  620.86720842,  292.34576567,   38.83450333,   19.95683699, -18.62742387],\
                                            [   0.       ,    35.87851415,   60.18331405 ,  21.88057598  , 18.72126479, -17.34493121],\
                                            [ 1.21946284e+03, -1.13766483e+02, -7.21167518e+01,  3.42050176e+01,  1.84710223e+01, -1.58903968e+01],\
                                            [-4.64981790e+01, -3.83652987e+01, -2.80506169e+02, -3.14679906e+01,  1.01973807e+01,  2.23654208e+00],\
                                            [-1.79392571e+01, -3.18433543e+01, -5.20973542e+01,  1.21633481e+02,  3.28443242e+01,  7.97178669e+01],\
                                            [ 4.67640616e+00,  3.27817636e+02,  4.32669231e+02, -1.59811097e+02, -3.43144987e+01,  1.95470649e+02],\
                                            [  46.02897434, -132.20622497, -392.63043555,  -15.1865899,     7.00678916,    -3.95695906],\
                                            [-3.66605219e+01,  4.20720153e+00,  6.04804770e+02, -1.41386996e+01,  8.52388414e+00,  2.28502655e+01],\
                                            [ 1.40761389e-01,  3.56579880e+02, -2.08154815e+02, -1.27936463e+01, -8.27364167e+00,  1.90340679e+01],\
                                            [ 5.00015736e+01,  4.65138191e+01,  1.44202223e+02, -1.82989806e+00, -5.80249727e+01, -1.28249266e+00],\
                                            [-2.66586431e+02, -2.85511018e+02, -2.76517929e+02, -7.38215287e+00,  2.81522779e+00,  1.08855474e+01],\
                                            [  14.2951011 ,  394.7731367,   328.47452229,  -69.6299673,   135.38117631,   -43.33886779],\
                                            [-6.06837990e+00, -2.19243684e+02,  2.56373411e+02, -4.71550655e+01, -4.37924323e-01, -4.33075875e+01],\
                                            [ 8.22202916e+01, -2.19306245e+02,  6.00566288e+02, -4.89849635e+01,  1.00253390e+01,  2.23341405e+01],\
                                            [ 1.04191580e+03,  8.04998746e+02,  6.44702804e+02, -4.89536832e+01, -4.80152739e+00,  4.38237126e+01],\
                                            [ 288.46700738,   82.76769698, -176.31146032,  -50.51769865,   -5.30201233,    45.04364461],\
                                            [ 484.37558114,  642.81034501,  204.29169651,  -50.68974035,    9.8063768,    45.65361063],\
                                            [ 352.13807586, 1051.0965751,  -344.36491914,  -52.75424072,   -5.53661465,    46.43561835],\
                                            [ 382.33921397,  344.34927898,  420.45427019,  -53.48932798,   -6.05273975,    47.24890638],\
                                            [   2.06450038,  640.55816278,  688.77675874,  -54.56849863,   -6.75654669,    48.24987626],\
                                            [   1.87681853,  -80.65627614,  396.52483399,  -80.39039351,  -12.27752119,    68.26927387],\
                                            [ -74.85377886, -182.39548038,  877.1780584,   -81.64160586,  -12.54340381,    69.09820205],\
                                            [  96.65615407, -404.20414979,  412.61855285,  -81.78236725,  -12.24624088,    69.44228545],\
                                            [ 654.52482064,  570.41207039,  832.93206165,  -83.90942825,  -12.87184705,    71.00630088],\
                                            [1035.7379435,   965.51365033, 1037.16119755,  -83.86250778,  -12.71544551,    71.17834258],\
                                            [ 614.81446867,  544.29301257,  544.9029786,   -84.92603828,  -13.04388875,    71.83522907]])},\
                    'max_corrs':{\
                        'hpol':numpy.array([[0.64059724, 0.77677675, 0.75236731, 0.76749577, 0.59979072, 0.64815502],\
                                            [0.62045939, 0.70644162, 0.63075541, 0.80233294, 0.71063221, 0.661  ],\
                                            [0.6726403 , 0.77406578, 0.79424238, 0.85345803, 0.768, 0.82948902],\
                                            [0.78873432, 0.8493454 , 0.8285548 , 0.83122342, 0.84323089, 0.8600067 ],\
                                            [0.84153738, 0.84077823, 0.88749982, 0.84966581, 0.84858517, 0.83303438],\
                                            [0.77161979, 0.77809199, 0.86298065, 0.80597524, 0.83063258, 0.77320236],\
                                            [0.75806037, 0.75671567, 0.74040503, 0.72037026, 0.66559878, 0.52772841],\
                                            [0.63756443, 0.84007398, 0.86511378, 0.81531957, 0.66080911, 0.7957828 ],\
                                            [0.74811472, 0.76083647, 0.7468288 , 0.81857184, 0.83935535, 0.65600105],\
                                            [0.85156469, 0.81823081, 0.86343807, 0.86258245, 0.84924771, 0.84471723],\
                                            [0.81706908, 0.75767876, 0.86953568, 0.84000709, 0.87767818, 0.82014223],\
                                            [0.73175229, 0.77029831, 0.85653911, 0.85610337, 0.70158646, 0.74450727],\
                                            [0.76736686, 0.7699827,  0.78498619, 0.85000848, 0.69654943, 0.68416706],\
                                            [0.78847956, 0.8257755 , 0.66594422, 0.87503349, 0.84387349, 0.85493423],\
                                            [0.84624229, 0.84724204, 0.93289006, 0.93969099, 0.92829951, 0.89108326],\
                                            [0.85879361, 0.8511148 , 0.93432178, 0.93254486, 0.93313052, 0.89721675],\
                                            [0.84340874, 0.84170433, 0.92365669, 0.91877931, 0.91033016, 0.88505468],\
                                            [0.87844958, 0.86249058, 0.95011396, 0.92865062, 0.93632529, 0.8856151 ],\
                                            [0.9038838 , 0.88233514, 0.93607073, 0.95002208, 0.93720703, 0.90594311],\
                                            [0.8270224 , 0.87739643, 0.85520432, 0.93087253, 0.92047593, 0.89961645],\
                                            [0.54853226, 0.75981388, 0.6329627 , 0.66585003, 0.58271038, 0.65777595],\
                                            [0.6162375 , 0.89178027, 0.72180865, 0.82017094, 0.80124434, 0.78161604],\
                                            [0.54786448, 0.83198925, 0.72843138, 0.78335336, 0.72950841, 0.78732965],\
                                            [0.78751439, 0.843     , 0.73374321, 0.79957951, 0.62582142, 0.80829344],\
                                            [0.69112644, 0.84812847, 0.75834261, 0.78549372, 0.7385571 , 0.74197444],\
                                            [0.78201732, 0.88369476, 0.75535317, 0.82951779, 0.83410446, 0.73752075]]),\
                        'vpol':numpy.array([[0.09195445, 0.07515564, 0.07639771, 0.62868637, 0.68296663, 0.68418555],\
                                            [0.07507139, 0.06168901, 0.09490234, 0.80202839, 0.63611917, 0.62500897],\
                                            [0.07659796, 0.05946387, 0.08140472, 0.74682829, 0.63174937, 0.59011181],\
                                            [0.06232146, 0.07081852, 0.08302202, 0.09664629, 0.37989728, 0.23783292],\
                                            [0.102013  , 0.07851408, 0.09931923, 0.21182305, 0.30235082, 0.24091466],\
                                            [0.08199799, 0.05676422, 0.08551949, 0.20555654, 0.40518009, 0.1997543 ],\
                                            [0.07533579, 0.08488013, 0.0845811,  0.35461065, 0.29760192, 0.29025555],\
                                            [0.05515905, 0.07398308, 0.08675301, 0.59165878, 0.62400296, 0.55859218],\
                                            [0.07818258, 0.05442293, 0.08631925, 0.05674032, 0.04485081, 0.40349079],\
                                            [0.08497717, 0.06824892, 0.10771709, 0.19017998, 0.24135385, 0.22502987],\
                                            [0.1073537 , 0.06191909, 0.11381537, 0.22800771, 0.13930562, 0.47989572],\
                                            [0.07641062, 0.07198609, 0.11753064, 0.13213461, 0.25403444, 0.19533438],\
                                            [0.07586185, 0.07300502, 0.12101883, 0.21995608, 0.27776301, 0.2785478 ],\
                                            [0.09672465, 0.08218999, 0.07177631, 0.34128779, 0.31072241, 0.27393056],\
                                            [0.04661366, 0.05603728, 0.07052959, 0.73419146, 0.68739327, 0.71882318],\
                                            [0.06374236, 0.06665853, 0.09883411, 0.7067953 , 0.64468391, 0.73509211],\
                                            [0.05717604, 0.06735745, 0.08034756, 0.42368594, 0.40780072, 0.31449616],\
                                            [0.06886223, 0.07458845, 0.08641286, 0.74389539, 0.78604399, 0.78936861],\
                                            [0.06727275, 0.0591851 , 0.07705009, 0.73627352, 0.71987617, 0.76038748],\
                                            [0.06342815, 0.06639673, 0.06819119, 0.76919342, 0.70656756, 0.78952973],\
                                            [0.09327135, 0.06787646, 0.08285837, 0.32722777, 0.41452416, 0.35887881],\
                                            [0.06860293, 0.08340955, 0.08617786, 0.76052345, 0.82473454, 0.73281971],\
                                            [0.07858032, 0.06649049, 0.08155051, 0.75495761, 0.75391884, 0.72652801],\
                                            [0.06814221, 0.05833277, 0.07026216, 0.92986665, 0.91561262, 0.90739401],\
                                            [0.09521795, 0.10702754, 0.12377197, 0.90834791, 0.89390763, 0.89032708],\
                                            [0.07720588, 0.06618241, 0.06720744, 0.94268425, 0.93906486, 0.92917063]])}},\
    '1783-28830':{  'eventids':numpy.array([[1783,28830],[1783,28832],[1783,28861]]),\
                    'known_flight':'a52e4f',
                    'baselines':{'hpol':[[0,1],[0,2],[0,3],[1,2],[1,3],[2,3]],'vpol':[[1,2],[1,3],[2,3]]},\
                    'time_delays':{\
                        'hpol':numpy.array([[  65.37584531,  -44.19907628,   17.53261306, -109.54364128,  -47.90579287,     61.62220826],\
                                             [  66.48629627,  -42.96350408,   19.61275359, -109.4654405,   -47.38966777,     62.07577273],\
                                             [  87.78818653,  -11.38603239,   57.28988549,  -98.59553321,  -30.87366475,     67.87827001]]),\
                        'vpol':numpy.array([[ 951.54699247, -386.21797226, -224.26417365, -115.95610457,  -46.38869789,     69.75508853],\
                                             [ 675.0759835,   562.57635304,  632.5973242,  -115.22101732,  -45.16876585,     70.13045224],\
                                             [1327.34862191, -206.32491658, 1297.6636089,  -104.44495095,  -28.7622439,     75.76090782]])},\
                    'max_corrs':{\
                        'hpol':numpy.array([[0.77510182, 0.76120413, 0.69953395, 0.85153975, 0.85410922, 0.8273125 ],\
                                             [0.81609656, 0.83873214, 0.82409572, 0.85631712, 0.85515108, 0.86051845],\
                                             [0.61147331, 0.518565,   0.68108793, 0.70349108, 0.80336612, 0.74497518]]),\
                        'vpol':numpy.array([[0.083143,   0.06820834, 0.08130717, 0.66499273, 0.77803667, 0.67031213],\
                                             [0.08099163, 0.07719255, 0.08242499, 0.7171041,  0.84142522, 0.74202524],\
                                             [0.06336892, 0.06530053, 0.07794064, 0.82957209, 0.88256237, 0.83269091]])}},\
    '1784-7166':{   'eventids':numpy.array([[1784,7166],[1784,7176],[1784,7179],[1784,7195],[1784,7244],[1784,7255]]),\
                    'known_flight':'acf975',
                    'baselines':{'hpol':[[0,1],[0,2],[0,3],[1,2],[1,3],[2,3]],'vpol':[[1,2],[1,3],[2,3]]},\
                    'time_delays':{\
                        'hpol':numpy.array([[  70.09917193,  -39.67907166,   24.4768416,  -109.73132313,  -45.71617125,     63.98387157],\
                                             [  77.8566885,   -28.52764159,   38.05249561, -105.94640577,  -40.19519676,     66.22041364],\
                                             [  78.85765838,  -26.51006167,   40.30467784, -104.94543589,  -38.85014348,     66.37681519],\
                                             [  88.53891394,   -9.2902517,    58.69749939,  -97.92300657,  -29.95089564,     68.03467155],\
                                             [ 110.1536073,    39.19422688,  108.76163356,  -70.58401672,   -1.20429189,     69.2858839 ],\
                                             [113.31291848,  47.8588724,  116.84759337, -63.68670863,   4.19156137,   68.53515649]]),\
                        'vpol':numpy.array([[-2.50430152e+02, -3.53842853e+02,  2.32803698e+02, -1.15768423e+02,  -4.45431597e+01,  7.14442252e+01],\
                                             [ 8.00775904e+00, -1.04069587e+02,  1.22948818e+03, -1.12092986e+02,  -3.78960941e+01,  7.41186916e+01],\
                                             [ 4.22190327e+02,  3.10754227e+02,  3.99340062e+02, -1.11092017e+02,  -3.67387226e+01,  7.42594530e+01],\
                                             [ 8.87875924e+02,  7.83728136e+02,  9.45103249e+02, -1.03991386e+02,  -2.78394748e+01,  7.62301124e+01],\
                                             [ 8.00775904e+00, -4.42522528e+02,  1.03777116e+03, -7.62457526e+01,   1.17301158e+00,  7.75438854e+01],\
                                             [-19.72223467, -38.05249561, 436.48542843, -70.38069471,   7.55419457,   78.35717344]])},\
                    'max_corrs':{\
                        'hpol':numpy.array([[0.82452304, 0.84237292, 0.86070192, 0.88783822, 0.89508353, 0.84408384],\
                                             [0.69477446, 0.64290981, 0.70018481, 0.74739501, 0.89817133, 0.73033073],\
                                             [0.67095742, 0.54535095, 0.70012358, 0.74522961, 0.82753476, 0.73537265],\
                                             [0.71017735, 0.62077517, 0.68634733, 0.86860821, 0.88005062, 0.87374545],\
                                             [0.65076326, 0.74020585, 0.66372195, 0.80522205, 0.87859943, 0.81493234],\
                                             [0.39197714, 0.08332387, 0.39682659, 0.58704473, 0.74093629,0.58922157]]),\
                        'vpol':numpy.array([[0.07563383, 0.08511365, 0.09201061, 0.74565473, 0.81545159, 0.72463237],\
                                             [0.08151722, 0.0958623,  0.08309501, 0.89035292, 0.93663151, 0.8665272 ],\
                                             [0.06950143, 0.08449305, 0.06821813, 0.85802633, 0.91646282, 0.84926463],\
                                             [0.09422863, 0.09829601, 0.08132951, 0.78374033, 0.84211843, 0.78580355],\
                                             [0.06832285, 0.06841074, 0.06360799, 0.75114916, 0.87657423, 0.74458405],\
                                             [0.07721145, 0.0884296,  0.05952351, 0.53670396, 0.81185286,0.55579139]])}}\
    }
    return known_planes

def pulserRuns():
    '''
    Returns
    -------
    pulser_runs : numpy.ndarray of ints
        This is the list of known pulser runs as determined by the matching_times.py script.
    '''
    pulser_runs = numpy.array([734,735,736,737,739,740,746,747,757,757,762,763,764,766,767,768,769,770,781,782,783,784,785,786,787,788,789,790,792,793,1504,1506,1507,1508,1509,15011]) 
    
    return pulser_runs

def loadAntennaZeroLocation(deploy_index=default_deploy):
    '''
    Loads antenna 0's location (which use used as the station location).
    Loads both the latitude, longtidue, elevation
    '''
    if deploy_index == 0:
        A0Location = (37.5893,-118.2381,3894.12)#latitude,longtidue,elevation  #ELEVATION GIVEN FROM GOOGLE EARTH given in m
    elif deploy_index == 1:
        A0Location = (37.589310, -118.237621, 3875.53)#latitude,longtidue,elevation #ELEVATION FROM GOOGLE EARTH given in m  
    return A0Location

def loadAntennaLocationsENU(deploy_index=default_deploy):
    '''
    Loads the antenna locations and phase locations as best they are known.
    These are given in ENU relative to Antenna 0.
    '''
    if deploy_index == 0:
        antennas_physical   = {0:(0.0,0.0,0.0),1:(-6.039,-1.618,2.275),2:(-1.272,-10.362,1.282),3:(3.411,-11.897,-0.432)} #ORIGINAL
        '''
        #These were determined using only run 793
        antennas_phase_hpol = {0:(  -0.02557475,   0.03116954,   0.09699316),1:(-6.07239516,  -1.57654064,   2.40102979),2:(-1.03349923, -10.66185761,   0.41323144),3:( 3.0254727 , -11.41386618,   1.08350273)}#ADJUSTED HPOL
        antennas_phase_vpol = {0:(-0.3113139 ,   0.37988811,   1.22224369),1:(-5.87779214,  -1.8179266 ,   1.68175401),2:(-1.57186065,  -9.98385335,   2.45102724),3:( 3.79236323, -12.37305718,  -1.80125484)}#ADJUSTED VPOL
        '''
        ''
        #These were determined in first attempt with day 5 and day 6 data with no bounds on phase positons.
        antennas_phase_hpol = {0:( -1.05036701,  -2.83990607,   5.7301439) , 1:(-5.04455409,   1.80238432,  -3.37157069), 2:(-0.70469931,  -9.35762227,  -1.46880603),  3:( 0.62819922, -18.85449124,  14.09627911)}#ADJUSTED HPOL
        antennas_phase_vpol = {0:( -1.97517555,  -4.78830899,  10.53874329), 1:( -5.26414199,   0.06191184,  -1.6073464), 2:( -1.17891238,  -8.69156208,   0.24012179), 3:(  4.23558404, -11.0023696 ,  -4.13418962)}#ADJUSTED VPOL
    elif deploy_index == 1:

        origin = loadAntennaZeroLocation(deploy_index = 1)
        antennas_physical_latlon = {0:origin,1:(37.5892, -118.2380, 3890.77),2:(37.588909, -118.237719, 3881.02),3:(37.5889210, -118.2379850, 3887.42)} #ORIGINAL
        antennas_physical = {}
        for key, location in antennas_physical_latlon.items():
            antennas_physical[key] = pm.geodetic2enu(location[0],location[1],location[2],origin[0],origin[1],origin[2])

        #Errors not currently used.  


    #antennas_phase_vpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-30.307267, -12.610417, 11.411196], 2 : [-10.464510, -46.217141, -0.229276], 3 : [-31.172820, -42.069610, 14.812669]}
    #antennas_phase_vpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.042770, 0.047592, 0.232313], 2 : [0.069353, 0.034351, 0.297275], 3 : [0.065285, 0.047254, 0.249236]}
    #antennas_phase_hpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-29.908104, -12.713682, 11.649818], 2 : [-9.956527, -46.119743, 1.003367], 3 : [-31.175775, -41.743273, 15.241286]}
    #antennas_phase_hpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.057717, 0.065283, 0.261789], 2 : [0.080427, 0.046084, 0.282382], 3 : [0.084447, 0.065313, 0.276901]}

    '''
    #These are the ones I got by flipping channel 2
    antennas_phase_hpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-28.231754, -13.562168, 9.068510], 2 : [-9.735529, -45.985775, -0.088781], 3 : [-31.298949, -42.571000, 13.874803]}                                                          
    antennas_phase_hpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.066406, 0.054628, 0.148034], 2 : [0.033279, 0.044264, 0.117928], 3 : [0.034486, 0.038190, 0.096574]} 
    antennas_phase_vpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-30.466405, -12.754674, 11.112169], 2 : [-10.727788, -46.128595, -1.850623], 3 : [-31.569865, -42.169063, 13.027888]}                                                        
    antennas_phase_vpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.024673, 0.039216, 0.162412], 2 : [0.041817, 0.028456, 0.215791], 3 : [0.038274, 0.035657, 0.180371]} 
    '''
    #These are the ones that I had prior to 11/21/2019
    antennas_phase_vpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-30.401760, -12.621386, 10.810656], 2 : [-10.372617, -46.301546, -0.381405], 3 : [-31.261194, -42.193276, 14.412270]}
    antennas_phase_vpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.042055, 0.048239, 0.254382], 2 : [0.069051, 0.034678, 0.330481], 3 : [0.065562, 0.049100, 0.276208]}

    antennas_phase_hpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-29.979756, -12.405349, 9.822749], 2 : [-9.619360, -46.467924, 2.456841], 3 : [-31.138537, -41.778211, 14.606688]}
    antennas_phase_hpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.051475, 0.064251, 0.278799], 2 : [0.078516, 0.049043, 0.293481], 3 : [0.085002, 0.073460, 0.303864]}
    return antennas_physical, antennas_phase_hpol, antennas_phase_vpol

def loadCableDelays(return_raw=False):
    '''
    This are calculated using group_delay.py via the group delay.  They correspond to the length of the LMR400
    cable that extends from the observatory to the antennas and accounts for the majority of systematic delay
    between signals.  This should be accounted for in interferometric uses.
    '''

    cable_delays =  {'hpol': numpy.array([423.37836156, 428.43979143, 415.47714969, 423.58803498]), \
                     'vpol': numpy.array([428.59277751, 430.16685915, 423.56765695, 423.50469285])}

    
    if return_raw == False:
        min_delay = min((min(cable_delays['hpol']),min(cable_delays['vpol'])))
        cable_delays['hpol'] -= min_delay
        cable_delays['vpol'] -= min_delay

    return cable_delays


def loadPulserPolarizations():
    '''
    Loads the polarizations used in each pulsing run.  Options are hpol, vpol, or both

    This won't make sense for data taken in the October 2019 pulsing run.   Will need higher
    resolution, i.e. time of day spans rather than run labels. 
    '''
    pulser_pol = {}

    #Trip 1
    #Day 1
    #Site 1 37.4671° N, 117.7525° W
    pulser_pol['run734'] = 'vpol'
    pulser_pol['run735'] = 'vpol'
    pulser_pol['run736'] = 'both'
    pulser_pol['run737'] = 'hpol'
    #Site 2 37° 34' 30.8" N, 117° 54' 31.7" W
    pulser_pol['run739'] = 'both'
    pulser_pol['run740'] = 'hpol'

    #Day 2 37° 34' 30.8" N 117° 54' 31.7" W
    pulser_pol['run746'] = 'both'
    pulser_pol['run747'] = 'vpol'

    #Day 3 37° 35’ 54.82” N 117° 59’ 37.97” W
    pulser_pol['run756'] = 'hpol'
    pulser_pol['run757'] = 'hpol'

    #Day 4
    #Site 1 37° 43' 36.40" N 118° 2' 3.40" W
    pulser_pol['run762'] = 'vpol'
    pulser_pol['run763'] = 'vpol'
    pulser_pol['run764'] = 'vpol'
    #Site2 37° 25' 32.85" N 117° 37' 57.55" W
    pulser_pol['run766'] = 'vpol'
    pulser_pol['run767'] = 'vpol'
    pulser_pol['run768'] = 'vpol'
    pulser_pol['run769'] = 'vpol'
    pulser_pol['run770'] = 'hpol'

    #Day 5 37° 35' 9.27" N 118° 14' 0.73" W
    pulser_pol['run781'] = 'hpol'
    pulser_pol['run782'] = 'hpol'
    pulser_pol['run783'] = 'hpol'
    pulser_pol['run784'] = 'hpol'
    pulser_pol['run785'] = 'hpol'
    pulser_pol['run786'] = 'hpol'
    pulser_pol['run787'] = 'hpol'
    pulser_pol['run788'] = 'hpol'
    pulser_pol['run789'] = 'hpol'
    pulser_pol['run790'] = 'vpol'

    #Day 6 37° 35.166' N 118° 13.990' W 
    pulser_pol['run792'] = 'vpol'
    pulser_pol['run793'] = 'vpol'

    #Trip 2
    #Site 1a 37.5859361° N 118.233841 W 
    pulser_pol['run1506'] = 'hpol'
    pulser_pol['run1507'] = 'hpol'

    #Site 2 37.58568583° N 118.225942 W 
    pulser_pol['run1508'] = 'both'
    pulser_pol['run1509'] = 'both'

    #Site 3 37.592001861° N 118.2354480278 W 
    pulser_pol['run1511'] = 'both'
    
    
    return pulser_pol   

def loadPulserLocations():
    '''
    Loads the latitude,longtidue,elevation locations of the antennas.
    See loadPulserLocationsENU for these locations converted to
    be relative to antenna 0.

    These are repeated if that pulser is used for multiply runs. 
    '''
    pulser_locations = {}

    #Day 1
    #Site 1 37.4671° N, 117.7525° W
    pulser_locations['run734'] = (37.4671,-117.7525,1763.0)
    pulser_locations['run735'] = (37.4671,-117.7525,1763.0)
    pulser_locations['run736'] = (37.4671,-117.7525,1763.0)
    pulser_locations['run737'] = (37.4671,-117.7525,1763.0)
    #Site 2 37° 34' 30.8" N, 117° 54' 31.7" W
    pulser_locations['run739'] = (37.575225,-117.908807,1646.0)
    pulser_locations['run740'] = (37.575225,-117.908807,1646.0)

    #Day 2 37° 34' 30.8" N 117° 54' 31.7" W
    pulser_locations['run746'] = (37.575225,-117.908807,1646.0)
    pulser_locations['run747'] = (37.575225,-117.908807,1646.0)

    #Day 3 37° 35’ 54.82” N 117° 59’ 37.97” W
    pulser_locations['run756'] = (37.598554,-117.993874,1501.0)
    pulser_locations['run757'] = (37.598554,-117.993874,1501.0)

    #Day 4
    #Site 1 37° 43' 36.40" N 118° 2' 3.40" W
    pulser_locations['run762'] = (37.726735,-118.034261,1542.0)
    pulser_locations['run763'] = (37.726735,-118.034261,1542.0)
    pulser_locations['run764'] = (37.726735,-118.034261,1542.0)
    #Site2 37° 25' 32.85" N 117° 37' 57.55" W
    pulser_locations['run766'] = (37.425788,-117.632653,2021.0)
    pulser_locations['run767'] = (37.425788,-117.632653,2021.0)
    pulser_locations['run768'] = (37.425788,-117.632653,2021.0)
    pulser_locations['run769'] = (37.425788,-117.632653,2021.0)
    pulser_locations['run770'] = (37.425788,-117.632653,2021.0)

    #Day 5 37° 35' 9.27" N 118° 14' 0.73" W
    pulser_locations['run781'] = (37.585912,-118.233535,3789)
    pulser_locations['run782'] = (37.585912,-118.233535,3789)
    pulser_locations['run783'] = (37.585912,-118.233535,3789)
    pulser_locations['run784'] = (37.585912,-118.233535,3789)
    pulser_locations['run785'] = (37.585912,-118.233535,3789)
    pulser_locations['run786'] = (37.585912,-118.233535,3789)
    pulser_locations['run787'] = (37.585912,-118.233535,3789)
    pulser_locations['run788'] = (37.585912,-118.233535,3789)
    pulser_locations['run789'] = (37.585912,-118.233535,3789)
    pulser_locations['run790'] = (37.585912,-118.233535,3789)

    #Day 6 37° 35.166' N 118° 13.990' W 
    pulser_locations['run792'] = (37.5861,-118.2332,3779.52)
    pulser_locations['run793'] = (37.5861,-118.2332,3779.52)


    #Trip 2
    #Site 1  37.5859361 N 118.233918056 W  (37.5859361, -118.233918056)
    #Alt: 3762.9m (GPS)  3789.32 m (MSL) Google Earth: Alt: 3796.284
    pulser_locations['run1504'] = (37.5859361, -118.233918056,3796.284)

    #Site 1a 37.58595472° N 118.233841 W 
    #Alt: 3763.1m (GPS)  3789.53 m (MSL) Google Earth: 3794.76
    pulser_locations['run1506'] = (37.58595472, -118.233841,3794.76)
    pulser_locations['run1507'] = (37.58595472, -118.233841,3794.76)

    #Site 2 37.58568583° N 118.225942 W 
    #Alt: 3690.70m (GPS)  3717.04m (MSL) Google Earth: 3729.228
    pulser_locations['run1508'] = (37.58568583, -118.225942,3729.228)
    pulser_locations['run1509'] = (37.58568583, -118.225942,3729.228)

    #Site 3 37.592001861° N 118.2354480278 W 
    #Alt: 3806.25m (GPS)  3832.55m (MSL) Google Earth: 3827.6784
    pulser_locations['run1511'] = (37.592001861, -118.2354480278,3827.6784)

    return pulser_locations    

def loadPulserLocationsENU():
    '''
    Loads the locations of the antennas converted to
    be relative to antenna 0.

    These are repeated if that pulser is used for multiple runs. 

    This is depricated and does not all for the antennas to have different 
    phase centers. loadPulserPhaseLocationsENU is better.
    '''
    pulser_locations_ENU = {}
    pulser_locations = loadPulserLocations()

    origin = loadAntennaZeroLocation()
    for key, location in pulser_locations.items():
        pulser_locations_ENU[key] = pm.geodetic2enu(location[0],location[1],location[2],origin[0],origin[1],origin[2])
    return pulser_locations_ENU

def loadPulserPhaseLocationsENU():
    '''
    Loads the locations of the antennas converted to
    be relative to antenna 0.

    These are repeated if that pulser is used for multiple runs.  

    The output will be a dictionary with keys 'physical','hpol', and 'vpol'
    corresponding to the best known physical locations, and current best fit
    for phase centers.
    '''
    pulser_locations_ENU = {}
    pulser_locations = loadPulserLocations()

    pulser_locations_ENU['physical'] = {}

    origin = loadAntennaZeroLocation()
    for key, location in pulser_locations.items():
        pulser_locations_ENU['physical'][key] = pm.geodetic2enu(location[0],location[1],location[2],origin[0],origin[1],origin[2])

    #pulser_locations_ENU['vpol'] = {'run1507':[275.708465, -372.224572, -82.673435], 'run1509':[1027.431897, -492.547030, -155.078725], 'run1511':[178.030733, 331.491744, -39.509867]}
    #pulser_locations_ENU['vpol_hesse_error'] = {'run1507':[1.106217, 1.246325, 2.503419], 'run1509':[5.552711, 2.469107, 5.305297], 'run1511':[1.324100, 2.146287, 2.310413]}
    
    '''
    #These are the ones I got by flipping channel 2
    pulser_locations_ENU['hpol'] = {'run1507':[253.799742, -355.808099, -117.460144], 'run1509':[1137.872525, -534.620695, -189.860634], 'run1511':[117.111896, 303.926298, -74.299903]}                                                         
    pulser_locations_ENU['hpol_hesse_error'] = {'run1507':[0.501879, 0.520719, 1.090585], 'run1509':[2.701943, 1.187494, 3.423798], 'run1511':[2.560162, 6.026819, 3.490432]}
    pulser_locations_ENU['vpol'] = {'run1507':[263.002766, -355.657916, -80.473571], 'run1509':[1067.737570, -511.201739, -152.867512], 'run1511':[179.261666, 338.184460, -37.316588]}
    pulser_locations_ENU['vpol_hesse_error'] = {'run1507':[0.848562, 0.978776, 1.976002], 'run1509':[2.842634, 1.265834, 3.353987], 'run1511':[1.327852, 2.182353, 2.249852]}
    '''

    #These are the ones I got prior to 11/21/2019
    pulser_locations_ENU['hpol'] = {'run1507':[259.417378, -353.989882, -84.468321], 'run1509':[1129.874543, -528.948053, -156.869667], 'run1511':[189.018118, 338.618832, -41.302878]}
    pulser_locations_ENU['hpol_hesse_error'] = {'run1507':[1.335408, 1.471356, 3.081678], 'run1509':[9.068532, 3.966986, 8.780782], 'run1511':[2.157532, 3.556144, 4.533434]}
    pulser_locations_ENU['vpol'] = {'run1507':[271.225702, -362.785806, -75.741218], 'run1509':[1063.720642, -504.948969, -148.130744], 'run1511':[181.798419, 331.680671, -32.583995]}
    pulser_locations_ENU['vpol_hesse_error'] = {'run1507':[1.080508, 1.216558, 2.517439], 'run1509':[5.776634, 2.552221, 5.590785], 'run1511':[1.319455, 2.150750, 2.325213]}

    #pulser_locations_ENU['hpol'] = {'run1507':[265.441241, -366.161638, -91.314401], 'run1509':[1065.399706, -508.295499, -163.706607], 'run1511':[178.535899, 344.684624, -48.158593]}
    #pulser_locations_ENU['hpol_hesse_error'] = {'run1507':[1.384200, 1.534385, 3.015226], 'run1509':[8.512122, 3.788872, 7.223959], 'run1511':[2.282271, 3.801014, 4.190135]}

    return pulser_locations_ENU



def plotStationAndPulsers(plot_phase=False):
    '''
    Currently only intended to plot the most recent station with the three pulsers that we used for it.
    '''
    antennas_physical, antennas_phase_hpol, antennas_phase_vpol = loadAntennaLocationsENU(deploy_index=1)

    colors = ['b','g','r','c']
    pulser_colors = ['m','y','k']

    fig = plt.figure()
    fig.canvas.set_window_title('Antenna Locations')
    ax = fig.add_subplot(111, projection='3d')

    for i, a in antennas_physical.items():
        ax.scatter(a[0], a[1], a[2], marker='o',color=colors[i],label='Physical %i'%i,alpha=0.8)

    if plot_phase == True:
        for i, a in antennas_phase_hpol.items():
            ax.plot([antennas_physical[i][0],antennas_phase_hpol[i][0]],[antennas_physical[i][1],antennas_phase_hpol[i][1]],[antennas_physical[i][2],antennas_phase_hpol[i][2]],color=colors[i],linestyle='--',alpha=0.5)
            ax.scatter(a[0], a[1], a[2], marker='*',color=colors[i],label='%s Phase Center %i'%('Hpol', i),alpha=0.8)
        for i, a in antennas_phase_vpol.items():
            ax.plot([antennas_physical[i][0],antennas_phase_vpol[i][0]],[antennas_physical[i][1],antennas_phase_vpol[i][1]],[antennas_physical[i][2],antennas_phase_vpol[i][2]],color=colors[i],linestyle='--',alpha=0.5)
            ax.scatter(a[0], a[1], a[2], marker='^',color=colors[i],label='%s Phase Center %i'%('Vpol', i),alpha=0.8)




    pulser_locations = loadPulserPhaseLocationsENU()
    for site, key in enumerate(['run1507','run1509','run1511']):
        site += 1
        ax.scatter(pulser_locations['physical'][key][0], pulser_locations['physical'][key][1], pulser_locations['physical'][key][2], color=pulser_colors[site-1], marker='o',label='Physical Pulser Site %i'%site,alpha=0.8)

    if plot_phase == True:
        ax.plot([pulser_locations['hpol']['run1507'][0],pulser_locations['physical']['run1507'][0]],[pulser_locations['hpol']['run1507'][1],pulser_locations['physical']['run1507'][1]],[pulser_locations['hpol']['run1507'][2],pulser_locations['physical']['run1507'][2]],color=pulser_colors[0],linestyle='--',alpha=0.5)
        ax.scatter( pulser_locations['hpol']['run1507'][0] , pulser_locations['hpol']['run1507'][1] , pulser_locations['hpol']['run1507'][2] , color=pulser_colors[0] , marker='*',alpha=0.8)

        ax.plot([pulser_locations['hpol']['run1509'][0],pulser_locations['physical']['run1509'][0]],[pulser_locations['hpol']['run1509'][1],pulser_locations['physical']['run1509'][1]],[pulser_locations['hpol']['run1509'][2],pulser_locations['physical']['run1509'][2]],color=pulser_colors[1],linestyle='--',alpha=0.5)
        ax.scatter( pulser_locations['hpol']['run1509'][0] , pulser_locations['hpol']['run1509'][1] , pulser_locations['hpol']['run1509'][2] , color=pulser_colors[1] , marker='*',alpha=0.8)

        ax.plot([pulser_locations['hpol']['run1511'][0],pulser_locations['physical']['run1511'][0]],[pulser_locations['hpol']['run1511'][1],pulser_locations['physical']['run1511'][1]],[pulser_locations['hpol']['run1511'][2],pulser_locations['physical']['run1511'][2]],color=pulser_colors[2],linestyle='--',alpha=0.5)
        ax.scatter( pulser_locations['hpol']['run1511'][0] , pulser_locations['hpol']['run1511'][1] , pulser_locations['hpol']['run1511'][2] , color=pulser_colors[2] , marker='*',alpha=0.8)

        ax.plot([pulser_locations['vpol']['run1507'][0],pulser_locations['physical']['run1507'][0]],[pulser_locations['vpol']['run1507'][1],pulser_locations['physical']['run1507'][1]],[pulser_locations['vpol']['run1507'][2],pulser_locations['physical']['run1507'][2]],color=pulser_colors[0],linestyle='--',alpha=0.5)
        ax.scatter( pulser_locations['vpol']['run1507'][0] , pulser_locations['vpol']['run1507'][1] , pulser_locations['vpol']['run1507'][2] , color=pulser_colors[0] , marker='^',alpha=0.8)

        ax.plot([pulser_locations['vpol']['run1509'][0],pulser_locations['physical']['run1509'][0]],[pulser_locations['vpol']['run1509'][1],pulser_locations['physical']['run1509'][1]],[pulser_locations['vpol']['run1509'][2],pulser_locations['physical']['run1509'][2]],color=pulser_colors[1],linestyle='--',alpha=0.5)
        ax.scatter( pulser_locations['vpol']['run1509'][0] , pulser_locations['vpol']['run1509'][1] , pulser_locations['vpol']['run1509'][2] , color=pulser_colors[1] , marker='^',alpha=0.8)

        ax.plot([pulser_locations['vpol']['run1511'][0],pulser_locations['physical']['run1511'][0]],[pulser_locations['vpol']['run1511'][1],pulser_locations['physical']['run1511'][1]],[pulser_locations['vpol']['run1511'][2],pulser_locations['physical']['run1511'][2]],color=pulser_colors[2],linestyle='--',alpha=0.5)
        ax.scatter( pulser_locations['vpol']['run1511'][0] , pulser_locations['vpol']['run1511'][1] , pulser_locations['vpol']['run1511'][2] , color=pulser_colors[2] , marker='^',alpha=0.8)


    ax.set_xlabel('E (m)')
    ax.set_ylabel('N (m)')
    ax.set_zlabel('Relative Elevation (m)')
    plt.legend()



def loadClockRates():
    '''
    Loads a dictionary containing the known clock rates as calculated using the clock_correct.py scipt.
    These are given in Hz.
    '''
    clock_rates = {
    'run782'    :31249808.91966798,
    'run783'    :31249808.948130235,
    'run784'    :31249809.35802664,
    'run785'    :31249809.82779526,
    'run788'    :31249807.839061476,
    'run789'    :31249809.895620257,
    'run792'    :31249812.04283368,
    'run793'    :31249809.22371152,
    'run1506'   :31249822.962542757,
    'run1507'   :31249815.193117745,
    'run1508'   :31249811.59632718,
    'run1509'   :31249810.666976035,
    'run1511'   :31249840.967325963}
    clock_rates['default'] = numpy.mean([v for key,v in clock_rates.items()])
    return clock_rates


def loadIgnorableEventids():
    '''
    This function loads dictionaries containing eventids that one may want to ignore.

    For instance eventids that are known pulser event ids but ones you want to ignore
    when making a template. 
    '''

    ignore_eventids = {}
    ignore_eventids['run793'] = numpy.array([ 96607,  96657,  96820,  96875,  98125,  98588,  99208, 100531,\
                           101328, 101470, 101616, 101640, 101667, 102159, 102326, 102625,\
                           103235, 103646, 103842, 103895, 103977, 104118, 104545, 105226,\
                           105695, 105999, 106227, 106476, 106622, 106754, 106786, 106813,\
                           106845, 107022, 107814, 108162, 110074, 110534, 110858, 111098,\
                           111197, 111311, 111542, 111902, 111941, 112675, 112713, 112864,\
                           112887, 113062, 113194, 113392, 113476, 113957, 114069, 114084,\
                           114295, 114719, 114738, 114755, 114942, 115055, 115413, 115442,\
                           115465, 115491, 115612, 116065])
    #For some reason there is a shift in arrival times that makes these different than later events?
    ignore_eventids['run1509'] = numpy.array([  2473, 2475, 2477, 2479, 2481, 2483, 2485, 2487, 2489, 2491, 2493,\
                                               2495, 2497, 2499, 2501, 2503, 2505, 2507, 2509, 2511, 2513, 2515,\
                                               2517, 2519, 2521, 2523, 2525, 2527, 2529, 2531, 2533, 2535, 2537,\
                                               2539, 2541, 2543, 2545, 2547, 2549, 2551, 2553, 2555, 2557, 2559,\
                                               2561, 2563, 2565, 2567, 2569, 2571, 2573, 2575, 2577, 2579, 2581,\
                                               2583, 2585, 2587, 2589, 2591, 2593, 2595, 2597, 2599, 2601, 2603,\
                                               2605, 2607, 2609, 2611, 2613, 2615, 2617, 2619, 2621, 2623, 2625,\
                                               2627, 2629, 2631, 2633, 2635, 2637, 2639, 2641, 2643, 2645, 2647,\
                                               2649, 2651, 2653, 2655, 2657, 2659, 2661, 2663, 2665, 2667, 2669,\
                                               2671, 2673, 2675, 2677, 2679, 2681, 2683, 2685, 2687, 2689, 2691,\
                                               2693, 2695, 2697, 2699, 2701, 2703, 2705, 2707, 2709, 2711, 2713,\
                                               2715, 2717, 2719, 2721, 2723, 2725, 2727, 2729, 2731, 2733, 2735,\
                                               2737, 2739, 2741, 2743, 2745, 2747, 2749, 2751, 2753, 2755, 2757,\
                                               2759, 2761, 2763, 2765, 2767, 2769, 2771, 2773, 2775, 2777, 2779,\
                                               2781, 2783, 2785, 2787, 2789, 2791, 2793, 2795, 2797, 2799, 2801,\
                                               2803, 2805, 2807, 2809, 2811, 2813, 2815, 2817, 2819, 2821, 2823,\
                                               2825, 2827, 2829, 2831, 2833, 2835, 2837, 2839, 2841, 2843, 2845,\
                                               2847, 2849, 2851, 2853, 2855, 2857, 2859])
    ignore_eventids['run1511'] = numpy.array([1052, 1162, 1198, 1224, 1230, 1232, 1242, 1244, 1262, 1264, 1286,\
                                        1310, 1328, 1330, 1346, 1350, 1370, 1372, 1382, 1416, 1420, 1426,\
                                        1428, 1434, 1442, 1458, 1462, 1464, 1470, 1482, 1492, 1494, 1502,\
                                        1504, 1506, 1528, 1536, 1538, 1574, 1592, 1614, 1636, 1644, 1654,\
                                        1668, 1670, 1672, 1680, 1684, 1686, 1694, 1698, 1710, 1726, 1734,\
                                        1736, 1738, 1742, 1774, 1776, 1782, 1786, 1794, 1798, 1804, 1826,\
                                        1832, 1838, 1848, 1860, 1862, 1868, 1876, 1880, 1882, 1888, 1890,\
                                        1892, 1894, 1908, 1912, 1950, 1960, 1962, 1964, 1974, 1992, 2004,\
                                        2012, 2014, 2018, 2030, 2034, 2048, 2050, 2054, 2058, 2066, 2068,\
                                        2070, 2076, 2078, 2096, 2100, 2108, 2120, 2124, 2126, 2134, 2146,\
                                        2152, 2162, 2176, 2182, 2184, 2186, 2196, 2200, 2202, 2216, 2220,\
                                        2230, 2236, 2242, 2248, 2258, 2266, 2270, 2280, 2302, 2304, 2316,\
                                        2330, 2348, 2352, 2356, 2360, 2362, 2368, 2372, 2376, 2388, 2390,\
                                        2392, 2394, 2396, 2398, 2400, 2406, 2408, 2416, 2426, 2428, 2442,\
                                        2452, 2458, 2466, 2470, 2472, 2476, 2484, 2486, 2498, 2504, 2516,\
                                        2530, 2532, 2534, 2542, 2546, 2570, 2592, 2594, 2596, 2598, 2600,\
                                        2602, 2608, 2620, 2622, 2624, 2636, 2638, 2650, 2660, 2664, 2670,\
                                        2686, 2692, 2698, 2700, 2702, 2706, 2716, 2718, 2740, 2750, 2754])
    ignore_eventids['run1507'] = numpy.loadtxt(os.environ['BEACON_ANALYSIS_DIR'] + 'tools/eventids/run1507_pulser_ignoreids.csv',delimiter=',').astype(int)
    ignore_eventids['run1509'] = numpy.sort(numpy.append(ignore_eventids['run1509'],numpy.loadtxt(os.environ['BEACON_ANALYSIS_DIR'] + 'tools/eventids/run1509_pulser_ignoreids.csv',delimiter=',').astype(int)))
    ignore_eventids['run1511'] = numpy.sort(numpy.append(ignore_eventids['run1511'],numpy.loadtxt(os.environ['BEACON_ANALYSIS_DIR'] + 'tools/eventids/run1511_pulser_ignoreids.csv',delimiter=',').astype(int)))
    return ignore_eventids

def loadPulserEventids(remove_ignored=False):
    '''
    Loads a dictionary containing the known eventids for pulsers.

    If subsets of runs are known to be different, this dictionary may contain
    an additional layer of keys seperating the events.  The code that uses this should
    known how to handle this. 
    '''
    known_pulser_ids = {}
    known_pulser_ids['run781'] = numpy.array([])
    known_pulser_ids['run782'] = numpy.loadtxt(os.environ['BEACON_ANALYSIS_DIR'] + 'tools/eventids/run782_pulser_eventids.csv',delimiter=',').astype(int)
    known_pulser_ids['run783'] = numpy.loadtxt(os.environ['BEACON_ANALYSIS_DIR'] + 'tools/eventids/run783_pulser_eventids.csv',delimiter=',').astype(int)
    known_pulser_ids['run784'] = numpy.loadtxt(os.environ['BEACON_ANALYSIS_DIR'] + 'tools/eventids/run784_pulser_eventids.csv',delimiter=',').astype(int)
    known_pulser_ids['run785'] = numpy.loadtxt(os.environ['BEACON_ANALYSIS_DIR'] + 'tools/eventids/run785_pulser_eventids.csv',delimiter=',').astype(int)
    known_pulser_ids['run786'] = numpy.array([])
    known_pulser_ids['run787'] = numpy.array([])
    known_pulser_ids['run788'] = numpy.loadtxt(os.environ['BEACON_ANALYSIS_DIR'] + 'tools/eventids/run788_pulser_eventids.csv',delimiter=',').astype(int)
    known_pulser_ids['run789'] = numpy.loadtxt(os.environ['BEACON_ANALYSIS_DIR'] + 'tools/eventids/run789_pulser_eventids.csv',delimiter=',').astype(int)

    known_pulser_ids['run792'] = \
        numpy.array([115156, 115228, 115256, 115276, 115283, 115315, 115330, 115371,\
        115447, 115612, 115872, 116230, 116262, 116462, 116473, 116479,\
        116486, 116511, 116524, 116603, 116619, 116624, 116633, 116760,\
        116790, 116816, 117026, 117050, 117175, 117195, 117237, 117247,\
        117258, 117315, 117378, 117540, 117837, 117858, 117874, 117933,\
        117949, 118116, 118139, 118167, 118208, 118219, 118227, 118241,\
        118256, 118267, 118295, 118364, 118423, 118461, 118497, 118518,\
        118644, 118662, 118676, 118685, 118719, 118752, 118856, 118872,\
        118889, 118908, 118930, 118946, 118994, 119038, 119053, 119064,\
        119070, 119094, 119150, 119161, 119177, 119208, 119223, 119304,\
        119315, 119339, 119346, 119371, 119390, 119401, 119408, 119414,\
        119431, 119434, 119458, 119472, 119478, 119508, 119517, 119555,\
        119578, 119598, 119629, 119636, 119648, 119660, 119671, 119844,\
        120009, 120107, 120115, 120202, 120225, 120241, 120249, 120263,\
        120276, 120281, 120292, 120374, 120587, 120607, 120613, 120628,\
        120632, 120905, 120910, 120916, 120925, 120941, 121019, 121081,\
        121170, 121318, 121382, 121460, 121489, 121510, 121725, 121736,\
        121741, 121751, 121765, 121769, 121803, 121876, 121981, 122001,\
        122014, 122021, 122053, 122073, 122093, 122166, 122293, 122311,\
        122403, 122455, 122508, 122551, 122560, 122579, 122723, 122761,\
        122797])
    known_pulser_ids['run793'] = \
        numpy.array([    96607,  96632,  96657,  96684,  96762,  96820,  96875,  96962,\
        97532,  97550,  97583,  97623,  97636,  97661,  97681,  97698,\
        97720,  97739,  97761,  97782,  97803,  97824,  97846,  97876,\
        97932,  97954,  97979,  98006,  98030,  98050,  98075,  98125,\
        98148,  98163,  98190,  98207,  98277,  98431,  98450,  98472,\
        98507,  98545,  98561,  98577,  98587,  98588,  98631,  98657,\
        98674,  98687,  98707,  98731,  98799,  98815,  99040,  99086,\
        99110,  99158,  99208,  99227,  99245,  99264,  99288,  99309,\
        99340,  99353,  99375,  99398,  99423,  99440,  99454,  99477,\
        99493,  99513,  99530,  99548,  99911,  99942,  99951,  99985,\
        100002, 100019, 100035, 100055, 100073, 100096, 100114, 100153,\
        100189, 100294, 100424, 100442, 100531, 100591, 100748, 100767,\
        100899, 100979, 101000, 101011, 101025, 101129, 101146, 101161,\
        101177, 101191, 101212, 101227, 101261, 101281, 101297, 101311,\
        101328, 101363, 101378, 101457, 101470, 101485, 101500, 101527,\
        101540, 101556, 101578, 101616, 101640, 101667, 101736, 101760,\
        101819, 102100, 102116, 102136, 102159, 102178, 102194, 102215,\
        102239, 102255, 102274, 102309, 102326, 102364, 102382, 102398,\
        102417, 102443, 102464, 102484, 102516, 102529, 102551, 102562,\
        102574, 102587, 102606, 102625, 102648, 102667, 102693, 102713,\
        102733, 102758, 102775, 102796, 102811, 102830, 102847, 102870,\
        102883, 102904, 102924, 102944, 102965, 102982, 102997, 103017,\
        103035, 103054, 103075, 103097, 103116, 103135, 103156, 103176,\
        103195, 103214, 103235, 103249, 103264, 103283, 103301, 103323,\
        103340, 103390, 103407, 103419, 103438, 103456, 103468, 103479,\
        103497, 103512, 103528, 103540, 103555, 103578, 103593, 103617,\
        103627, 103646, 103665, 103679, 103697, 103715, 103731, 103747,\
        103761, 103774, 103800, 103818, 103842, 103880, 103895, 103921,\
        103965, 103977, 103995, 104008, 104025, 104055, 104073, 104118,\
        104142, 104152, 104174, 104191, 104204, 104220, 104255, 104279,\
        104340, 104398, 104430, 104487, 104515, 104545, 104572, 104606,\
        104632, 104656, 104721, 104745, 104779, 104812, 104836, 105082,\
        105119, 105147, 105191, 105226, 105304, 105329, 105352, 105407,\
        105429, 105454, 105477, 105510, 105530, 105560, 105586, 105620,\
        105641, 105667, 105695, 105723, 105749, 105779, 105804, 105832,\
        105881, 105897, 105967, 105999, 106017, 106043, 106063, 106093,\
        106152, 106227, 106397, 106421, 106461, 106476, 106516, 106538,\
        106559, 106581, 106622, 106680, 106730, 106754, 106765, 106786,\
        106813, 106845, 106869, 106891, 106916, 106942, 106966, 107022,\
        107052, 107070, 107088, 107114, 107126, 107153, 107203, 107221,\
        107249, 107275, 107302, 107325, 107341, 107356, 107382, 107407,\
        107433, 107461, 107489, 107499, 107522, 107546, 107571, 107596,\
        107620, 107646, 107672, 107692, 107718, 107744, 107764, 107790,\
        107814, 107835, 107856, 107881, 107911, 107940, 108115, 108131,\
        108162, 108184, 108209, 108233, 108275, 108294, 108319, 108373,\
        108827, 108878, 108926, 108969, 108984, 109012, 109054, 109087,\
        109106, 109121, 109139, 109161, 109185, 109212, 109261, 110029,\
        110074, 110100, 110126, 110142, 110163, 110181, 110203, 110221,\
        110235, 110258, 110274, 110429, 110442, 110471, 110534, 110580,\
        110599, 110624, 110643, 110661, 110684, 110713, 110741, 110777,\
        110795, 110858, 110884, 110900, 110917, 110970, 110993, 111005,\
        111035, 111056, 111083, 111098, 111126, 111145, 111183, 111197,\
        111238, 111274, 111293, 111311, 111331, 111368, 111389, 111415,\
        111440, 111456, 111481, 111504, 111522, 111542, 111584, 111600,\
        111640, 111702, 111714, 111729, 111750, 111796, 111823, 111841,\
        111855, 111873, 111885, 111902, 111919, 111941, 111956, 111980,\
        111991, 112010, 112025, 112035, 112051, 112068, 112080, 112092,\
        112115, 112140, 112160, 112177, 112196, 112213, 112258, 112294,\
        112315, 112610, 112626, 112656, 112675, 112701, 112713, 112730,\
        112749, 112765, 112812, 112844, 112864, 112887, 112907, 112934,\
        112952, 112972, 113038, 113062, 113156, 113178, 113194, 113235,\
        113259, 113275, 113295, 113312, 113333, 113357, 113375, 113392,\
        113414, 113476, 113496, 113519, 113889, 113930, 113957, 114004,\
        114048, 114069, 114084, 114127, 114147, 114173, 114196, 114226,\
        114266, 114295, 114313, 114331, 114356, 114374, 114399, 114428,\
        114457, 114500, 114525, 114569, 114589, 114633, 114655, 114677,\
        114703, 114719, 114738, 114755, 114777, 114789, 114801, 114852,\
        114879, 114900, 114942, 114960, 114996, 115019, 115055, 115095,\
        115115, 115130, 115197, 115217, 115236, 115275, 115283, 115303,\
        115321, 115337, 115377, 115413, 115442, 115465, 115491, 115535,\
        115554, 115570, 115584, 115612, 115630, 115644, 115662, 115675,\
        115689, 115708, 115721, 115735, 115759, 115787, 115806, 115823,\
        115844, 115870, 115888, 115912, 115935, 115963, 115976, 115996,\
        116019, 116044, 116065, 116082, 116101, 116115, 116155, 116173,\
        116184])

    known_pulser_ids['run1507'] = {}
    known_pulser_ids['run1507']['hpol'] = numpy.loadtxt(os.environ['BEACON_ANALYSIS_DIR'] + 'tools/eventids/run1507_pulser_eventids_site_1a_bicone_hpol_16dB.csv',delimiter=',').astype(int)
    known_pulser_ids['run1507']['vpol'] = numpy.loadtxt(os.environ['BEACON_ANALYSIS_DIR'] + 'tools/eventids/run1507_pulser_eventids_site_1a_bicone_vpol_16dB.csv',delimiter=',').astype(int)

    known_pulser_ids['run1509'] = {}
    known_pulser_ids['run1509']['hpol'] = numpy.loadtxt(os.environ['BEACON_ANALYSIS_DIR'] + 'tools/eventids/run1509_pulser_eventids_site_2_bicone_hpol_22dB.csv',delimiter=',').astype(int)
    known_pulser_ids['run1509']['vpol'] = numpy.loadtxt(os.environ['BEACON_ANALYSIS_DIR'] + 'tools/eventids/run1509_pulser_eventids_site_2_bicone_vpol_17dB.csv',delimiter=',').astype(int)

    known_pulser_ids['run1511'] = {}
    known_pulser_ids['run1511']['hpol'] = numpy.loadtxt(os.environ['BEACON_ANALYSIS_DIR'] + 'tools/eventids/run1511_pulser_eventids_site_3_bicone_hpol_20dB.csv',delimiter=',').astype(int)
    known_pulser_ids['run1511']['vpol'] = numpy.loadtxt(os.environ['BEACON_ANALYSIS_DIR'] + 'tools/eventids/run1511_pulser_eventids_site_3_bicone_vpol_20dB.csv',delimiter=',').astype(int)

    if remove_ignored == True:
        ignore_events = loadIgnorableEventids()
        for key in numpy.array(list(known_pulser_ids.keys()))[numpy.isin(numpy.array(list(known_pulser_ids.keys())),numpy.array(list(ignore_events.keys())))]:
            if type(known_pulser_ids[key]) is dict:
                for kkey,val in known_pulser_ids[key].items():
                    known_pulser_ids[key][kkey] = known_pulser_ids[key][kkey][~numpy.isin(known_pulser_ids[key][kkey],ignore_events[key])]
            else:
                known_pulser_ids[key] = known_pulser_ids[key][~numpy.isin(known_pulser_ids[key],ignore_events[key])]
    #import pdb; pdb.set_trace()
    return known_pulser_ids


def loadBeamDelays():
    '''
    This will load the beams and beam delays that are currently selected as the best selction.
    These were determined using the define_beams.py script.  The delays are given in integer
    values of how many samples to delay each antenna's signal by for that beam.  The values
    are all positive such that the antenna that has 0 delay is the antenna that you expect
    the signal to arrive at last (all others are delayed until it's arrival).
    '''
    hpol_delays_file = os.environ['BEACON_ANALYSIS_DIR'] + 'tools/beam_definitions/hpol_beam_delays.csv'
    vpol_delays_file = os.environ['BEACON_ANALYSIS_DIR'] + 'tools/beam_definitions/vpol_beam_delays.csv'
    header = 1
    hpol_vals = numpy.loadtxt(hpol_delays_file,delimiter=',')
    vpol_vals = numpy.loadtxt(hpol_delays_file,delimiter=',')
    return hpol_vals, vpol_vals

'''
MAKE AN EXPECTED PULSER TIME DELAY FUNCTION
'''

if __name__ == '__main__':
    try:
        print('Loaded run info dictionaries.')
        #plt.ion()
        #loadBeamDelays()

        known_planes, calibrated_trigtime, output_tracks = getKnownPlaneTracks()

    except Exception as e:
        print('Error in main loop.')
        print(e)
        exc_type, exc_obj, exc_tb = sys.exc_info()
        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
        print(exc_type, fname, exc_tb.tb_lineno)

