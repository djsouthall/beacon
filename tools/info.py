'''
This file is intended to hold any organizational information to centralize it to be imported by other scripts.

This file itself may not be the most organized by hopefully it allows others to stay moreso. 

A 'deploy_index' is used for many locations to denote the specific configuration of antennas and pulsers depending
upon which deployment you are in.

You can set what you want the default deployment to be by changing default_deploy at the top of this file.

The produced ENU coordinates were double checked 3 ways: the method presented (pymap3d), an additional method
using astropy EarthLocation to go from GPS to ECEF, and then using pyuvdata to go from ECEF to ENU, and finally it was 
checked GeograpihcLib/CartConvert.  All agreed, so pymap3d stays.  This was done on 3/30/2021.


deploy_index = 0:
    Before Oct 2019
deploy_index = 1:
    After Oct 2019
'''
import sys
import os
import inspect

import numpy
import csv

sys.path.append(os.environ['BEACON_ANALYSIS_DIR'])
sys.path.append(os.environ['BEACON_INSTALL_DIR'])
from examples.beacon_data_reader import Reader #Must be imported before matplotlib or else plots don't load.
from tools.data_handler import getEventTimes, createFile
import tools.field_fox as ff
from tools.config_reader import configReader

import h5py
import pymap3d as pm
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import scipy.interpolate

#default_deploy = 30#os.path.join(os.environ['BEACON_ANALYSIS_DIR'], 'config/rtk-gps-day1-june20-2021.json')#30#2#13#19#15#The deployment calibration to use as the default.
#default_deploy = os.path.join(os.environ['BEACON_ANALYSIS_DIR'], 'config/rtk-gps-day1-june20-2021.json')
#default_deploy = os.path.join(os.environ['BEACON_ANALYSIS_DIR'], 'config', 'rtk-gps-day1-june20-2021_2021-07-01_15-30-32p620236.json')
#default_deploy = os.path.join(os.environ['BEACON_ANALYSIS_DIR'], 'config/rtk-gps-day3-june22-2021.json')
default_deploy = os.path.join(os.environ['BEACON_ANALYSIS_DIR'], 'config/rtk-gps-day3-june22-2021.json')#os.path.join(os.environ['BEACON_ANALYSIS_DIR'], 'config', 'chi2_optimized_deploy_from_rtk-gps-day1-june20-2021.json')



def returnDefaultDeploy():
    return default_deploy

def loadKnownPlaneDict(ignore_planes=[]):
    '''
    Loads a list of known planes, and the event ids associated with them.

    Good baselines indicate baselines that are worth using for calibration.

    I.e. if an antenna is down, the baselines with that antenna won't be useful.
    Or if an event is clearly only hpol the vpol might not be worth trying to
    calibrate.  

    If reasonable, the time delays may be stored here as well.  This is helpful
    if time delays were done by eye and not easily reproduced with cross correlation.

    ignore_planes is a list of strings.  Any string in this matching a key below will not be added to the known_planes dict.
    
    Signal classificationw as added to see if there are frequency dependances.  
    PLF :   Pure Low Frequency  - Significant gain between 35 and ?? Mhz
    LF :    Low Frequency       - Significant gain between 35 and 65 Mhz
    HF :    High Frequency      - Significant gain between 45 and 80 MHz
    PHF :   Pure High Frequency - Significant gain between 65 and 85 MHz
    BB :    Broadband           - Significant gain between 30 and 80 MHz
    '''

    known_planes = {}
    '''
    #Only 2 events and are so hard to get to calibrate/
    if ~numpy.isin('1705-55163',ignore_planes):
        known_planes['1705-55163'] = {  'eventids':numpy.array([[1705,55163],[1705,55643]]),\
                        'dir':'E',\
                        'known_flight':'a405d9',\
                        'signal_classification':'LF',\
                        'baselines':{'hpol':[[0,1],[0,2],[0,3],[1,2],[1,3],[2,3]],'vpol':[[0,1],[0,2],[0,3],[1,2],[1,3],[2,3]]},\
                        'time_delays':{\
                            'hpol':numpy.array([[ -94.1068089 ,   79.02970008,  -13.60693431,  172.85498621, 79.79606765,  -92.93379733],\
                                                [-126.5757694 ,   13.05952891,  -84.62887535,  139.32249522, 42.29097744,  -97.57892318]]),\
                            'vpol':numpy.array([[ -91.0569788 ,   75.46374488,   -8.44568337,  166.63020476, 82.45489389,  -83.9250684 ],\
                                               [-123.02545435,    9.91585788,  -77.45004449,  133.5356381 , 45.27824693,  -88.10098962]]) },\
                        'max_corrs':{\
                            'hpol':numpy.array([[0.84648652, 0.89595556, 0.8819821 , 0.90708408, 0.85060955, 0.89920087], \
                                                [0.83137908, 0.88864107, 0.92457404, 0.79697424, 0.8847366 , 0.86657071]]),\
                            'vpol':numpy.array([[0.73876297, 0.67328208, 0.69787771, 0.71509814, 0.72462139, 0.73146428], \
                                                [0.55098112, 0.60001861, 0.57542028, 0.57280908, 0.65593796, 0.62172523]])}}

    '''
    '''
    #2 events essentially overlapping in info, ignoring

    if ~numpy.isin('1720-71316',ignore_planes):
        known_planes['1720-71316'] = {  'eventids':numpy.array([[1720,71316],[1720,71324]]),\
                        'dir':'E',\
                        'known_flight':'a678ef',\
                        'signal_classification':'HF',\
                        'baselines':{'hpol':[[0,1],[0,2],[0,3],[1,2],[1,3],[2,3]],'vpol':[[0,1],[0,2],[0,3],[1,2],[1,3],[2,3]]},\
                        'time_delays':{\
                            'hpol':numpy.array([[-117.927, -116.26890766, -175.07588813,   14.2951011 , -49.72005077,  -59.71410942],\
                                                [-117.786, -116.33146828, -175.71713446,   14.20126018, -48.93804305,  -59.94871174]]),\
                            'vpol':numpy.array([[-115.51818025, -135.72525971, -170.36820166,    2.36166331, -53.7552106 ,  -52.94192258],\
                                                [-115.409, -135.31861569, -170.5246032 ,    1.62657606, -54.75618048,  -52.94192258]]) },\
                        'max_corrs':{\
                            'hpol':numpy.array([[0.06691282, 0.508, 0.56791161, 0.25925511, 0.3155459 ,  0.6817223 ],\
                                                [0.464, 0.62073659, 0.5687022 , 0.39966083, 0.38362624,  0.68305019]]),\
                            'vpol':numpy.array([[0.59041077, 0.74848408, 0.71214989, 0.38628673, 0.30179605,  0.89634879],\
                                                [0.677, 0.73595921, 0.65665583, 0.30596724, 0.28455063,  0.89698474]])}}
    '''


    if ~numpy.isin('1728-62026',ignore_planes):
        known_planes['1728-62026'] = {  'eventids':numpy.array([[1728,62026],[1728,62182],[1728,62370],[1728,62382],[1728,62552],[1728,62577]]),\
                        'dir':'W',\
                        'known_flight':'a44585',\
                        'signal_classification':'BB',\
                        'baselines':{'hpol':[[0,1],[0,2],[0,3],[1,2],[1,3],[2,3]],'vpol':[[0,1],[0,2],[0,3],[1,2],[1,3],[2,3]]},\
                        'time_delays':{\
                            'hpol':numpy.array([[  99.36190078,   25.44653118,   96.07746836,  -73.43052481,   -2.83086794,     70.61529703],\
                                                 [  91.29158112,    8.25800151,   78.10693097,  -82.84589775,  -13.15336983,     70.09917193],\
                                                 [  69.94277039,  -26.74466399,   37.41124928,  -96.76563515,  -32.45332034,     64.24975419],\
                                                 [  68.09723217,  -29.07504699,   34.68986241,  -97.21919963,  -33.14148713,     63.68670863],\
                                                 [  37.28612804,  -65.26636423,  -13.93537755, -102.66197335,  -50.20489556,     51.69071023],\
                                                 [  31.93719524,  -69.58304684,  -20.25399992, -101.70792393,  -51.92531254,     49.12572491]]),\
                            'vpol':numpy.array([[ 102.52121196,   23.36639064,  102.63069304,  -79.07662054,    0.12512124,     79.32686301],\
                                                 [  94.66985446,    5.77121697,   84.08146995,  -88.88299734,  -10.61966482,     78.31025298],\
                                                 [  73.3992445,   -29.96653579,   43.11990563, -103.28757952,  -30.27933888,     73.03952095],\
                                                 [  71.64754721,  -32.15615741,   40.3515983,  -103.80370462,  -31.45235046,     72.44519509],\
                                                 [  38.80322302,  -67.95647078,   -9.36845247, -106.74405364,  -48.10911487,     58.556738  ],\
                                                 [  33.72017284,  -72.27315339,  -16.18755978, -105.99332623,  -49.84517201,     56.03867314]])},\
                        'max_corrs':{\
                            'hpol':numpy.array([[0.54296347, 0.66401425, 0.5290622,  0.46341469, 0.57353087, 0.68803661],\
                                                 [0.72755695, 0.73327106, 0.67828298, 0.71050678, 0.740176,   0.7255736 ],\
                                                 [0.78951981, 0.87576484, 0.91596379, 0.79068938, 0.80368587, 0.8066493 ],\
                                                 [0.73420813, 0.86623596, 0.79277576, 0.75192662, 0.77947303, 0.72376367],\
                                                 [0.55723343, 0.85686536, 0.74134153, 0.63097564, 0.71972242, 0.70229345],\
                                                 [0.62062809, 0.83165972, 0.74880425, 0.61628435, 0.74726736, 0.75501151]]),\
                            'vpol':numpy.array([[0.74859039, 0.72094946, 0.68496901, 0.77969161, 0.85019343, 0.77799921],\
                                                 [0.8244373,  0.83915634, 0.8180681,  0.84242355, 0.89382184, 0.83890872],\
                                                 [0.88868985, 0.90940108, 0.89158618, 0.88425718, 0.87083196, 0.89345349],\
                                                 [0.88184143, 0.92427453, 0.87074308, 0.89623232, 0.86348606, 0.88157825],\
                                                 [0.91547578, 0.93912025, 0.90280934, 0.91923303, 0.92003877, 0.89160619],\
                                             [0.9403921,  0.94107688, 0.90800336, 0.93372543, 0.91330014, 0.90518039]])}}
    '''
    #Only 1 event, ignoring
    if ~numpy.isin('1759-510',ignore_planes):
        known_planes['1759-510'] = {  'eventids':numpy.array([[1759,510]]),\
                        'dir':'N',\
                        'known_flight':'a04abd',\
                        'signal_classification':'HF',\
                        'baselines':{'hpol':[[0,1],[0,2],[0,3],[1,2],[1,3],[2,3]],'vpol':[]},\
                        'time_delays':{\
                            'hpol':numpy.array([[-117.78600263, -116.26890766, -172.51090281,    1.14173127,-55.56946851,  -56.69555963]]),\
                            'vpol':numpy.array([[ 100.48799189, -179.83049506,   48.04655425,   -4.95792894,  -53.25472566,  -47.04558437]])},\
                        'max_corrs':{\
                            'hpol':numpy.array([[0.66419262, 0.62868594, 0.74188733, 0.73069807, 0.44745382,  0.51406763]]),\
                            'vpol':numpy.array([[0.09560191, 0.12838598, 0.1206995 , 0.45108116, 0.43043947, 0.48871716]])}}
    '''
    '''
    #Only 1 event, could ignore, but extremely close to tracks as calibrated.
    if ~numpy.isin('1772-71053',ignore_planes):
        known_planes['1772-71053'] = {  'eventids':numpy.array([[1772,71053]]),\
                        'dir':'S',\
                        'known_flight':'ab81b5',\
                        'signal_classification':'LF',\
                        'baselines':{'hpol':[[0,1],[0,2],[0,3],[1,2],[1,3],[2,3]],'vpol':[[1,2],[1,3],[2,3]]},\
                        'time_delays':{\
                            'hpol':numpy.array([[ 52.94192258, 117.64524125, 118.47416943,  65.09432253, 66.34553488,   0.64124633]]),\
                            'vpol':numpy.array([[  22.58438292, -276.42408851, -268.24428777,   57.22732488, 67.34650476,   10.51018374]])},\
                        'max_corrs':{\
                            'hpol':numpy.array([[0.6059348 , 0.6232186 , 0.71354217, 0.56044293, 0.53887173, 0.53529074]]),\
                            'vpol':numpy.array([[0.04067666, 0.05722032, 0.06773252, 0.58594276, 0.5188047 , 0.73712303]])}}
    '''

    if ~numpy.isin('1773-14413',ignore_planes):
        known_planes['1773-14413'] = {  'eventids':numpy.array([[1773,14413],[1773,14540],[1773,14590]]),\
                        'dir':'W',\
                        'known_flight':'aa8c39',\
                        'signal_classification':'BB',\
                        'baselines':{'hpol':[[0,1],[0,2],[0,3],[1,2],[1,3],[2,3]],'vpol':[[1,2],[1,3],[2,3]]},\
                        'time_delays':{\
                            'hpol':numpy.array([[ 91.08825911, 109.19955788, 144.42118554,  18.90894665,  53.00448319,    33.67325238],\
                                                 [108.0265463,   99.76854479, 150.20804266,  -8.05467951,  42.29097744,    50.34565695],\
                                                 [111.38917949,  97.04715793, 149.94216004, -14.2951011,   38.70938209,    52.69168011]]),\
                            'vpol':numpy.array([[ -14.06049879, -254.52787238,   40.21083691,   10.44762313, 55.74151021,   45.15312569],\
                                                   [-212.42457679,  -50.09541448, -132.1280242 ,  -13.68513508, 44.94980369,   59.1041434 ],\
                                                   [  12.76236597,  222.55939683,   77.87232866,  -21.06728795, 43.18246624,   63.23314416]])},\
                        'max_corrs':{\
                            'hpol':numpy.array([[0.90272377, 0.60064537, 0.87741312, 0.67375529, 0.89613162, 0.59279454],\
                                                [0.9031536,  0.88038772, 0.93706705, 0.88307895, 0.94245707, 0.896344  ],\
                                                [0.71921489, 0.74597444, 0.79102785, 0.7537876,  0.63843518, 0.79467544]]),\
                            'vpol':numpy.array([[0.10380397, 0.06419393, 0.0760841 , 0.43932523, 0.47531169, 0.19803388],\
                                                [0.06753853, 0.08494523, 0.06685715, 0.50694484, 0.47081591, 0.42630021],\
                                                [0.06910693, 0.09430286, 0.0840499 , 0.24675524, 0.27775983, 0.17633311]])}}

    if ~numpy.isin('1773-63659',ignore_planes):
        known_planes['1773-63659'] = {  'eventids':numpy.array([[1773,62999],[1773,63659],[1773,63707],[1773,63727],[1773,63752],[1773,63757]]),\
                        'dir':'W',\
                        'known_flight':'a28392',\
                        'signal_classification':'HF',\
                        'baselines':{'hpol':[[0,1],[0,2],[0,3],[1,2],[1,3],[2,3]],'vpol':[[1,2],[1,3],[2,3]]},\
                        'time_delays':{\
                            'hpol':numpy.array([ [-37.45816974,  17.53261306, -18.23642001,  54.85002141, 18.90894665, -34.87754427],\
                                                 [ 93.40300196,  12.60596443,  77.8566885,  -80.84395799, -15.5306733,    65.28200438],\
                                                 [ 94.54473323,  12.88748721,  79.01405993, -81.71980663, -15.59323392,    66.14221287],\
                                                 [ 95.07649848,  13.09080922,  79.54582518, -82.03260972, -15.54631345,    66.51757658],\
                                                 [ 95.8897865,   13.24721076,  80.07759042, -82.61129543, -15.85911654,    67.00242136],\
                                                 [ 95.82722589,  13.16900999,  80.09323058, -82.67385605, -15.71835515,    67.00242136]]),\
                            'vpol':numpy.array([[ 14.0917791 , 114.29824821, 260.50241135,  49.78261139, 22.42798138, -27.35463001],\
                                                [ 442.74149019,  355.8291523 ,  429.71324159,  -87.74126607,  -13.51309338,   74.16561207],\
                                                [  10.02533896,  596.48420774,  672.37023679,  -88.60147456,  -13.38797215,   75.08838118],\
                                                [ 297.75725908,  590.44710815,  284.30672632,  -88.85171703,  -13.38797215,   75.44810473],\
                                                [  12.96568798,   71.71010783, -156.35462334,  -89.2740012 ,  -12.82492659,   75.74526766],\
                                                [  -5.94325866,  198.31715754,  232.099891  ,  -89.33656182,  -13.30977138,   75.91730936]])},\
                        'max_corrs':{\
                            'hpol':numpy.array([ [0.79906143, 0.75620148, 0.68557483, 0.68992428, 0.73112767,  0.66364866],\
                                                 [0.95098351, 0.95833601, 0.94619827, 0.93922142, 0.93210956, 0.90940208],\
                                                 [0.92373364, 0.9104255,  0.94496063, 0.91447291, 0.93351235, 0.90544071],\
                                                 [0.95289233, 0.94974068, 0.93237005, 0.94604289, 0.92418265, 0.90493278],\
                                                 [0.83174037, 0.7827824,  0.88097779, 0.79032702, 0.86531262, 0.80427036],\
                                                 [0.87302171, 0.88326716, 0.8874286,  0.88267858, 0.91460527, 0.89029115]]),\
                            'vpol':numpy.array([[0.09318948, 0.06409845, 0.08831963, 0.47949827, 0.50572828,  0.50409728],\
                                                [0.06289992, 0.05902408, 0.06221534, 0.94319635, 0.89536839, 0.89388475],\
                                                [0.09225186, 0.08122064, 0.08065197, 0.86999957, 0.85958327, 0.84102569],\
                                                [0.06772418, 0.07353492, 0.08277247, 0.92582262, 0.89727331, 0.88631299],\
                                                [0.07894339, 0.06906414, 0.09807917, 0.45253002, 0.52531616, 0.30207441],\
                                                [0.06454302, 0.05635923, 0.07649677, 0.82547947, 0.82546989, 0.76452701]])}}

    if ~numpy.isin('1774-178',ignore_planes):
        known_planes['1774-178'] = {  'eventids':numpy.array([[1774,178],[1774,381],[1774,1348],[1774,1485]]),\
                        'dir':'E',\
                        'known_flight':'a1c2b3',\
                        'signal_classification':'BB',\
                        'baselines':{'hpol':[[0,1],[0,2],[0,3],[1,2],[1,3],[2,3]],'vpol':[[1,2],[1,3],[2,3]]},\
                        'time_delays':{\
                            'hpol':numpy.array([[-115.61202118,  -42.35353806, -119.02157483,   73.1959225 , -3.9413189 ,  -76.73059739],\
                                                [-112.36668914,  -26.19725859, -105.02363666,   86.05994948,    7.55419457,  -78.69343676],\
                                                [ -50.8774222 ,  103.05297721,   30.73290336,  153.80527817, 81.46956416,  -72.4764754 ],\
                                                [ -35.20598751,  122.25908679,   56.13251407,  157.37123337, 92.58971393,  -66.51757658]]),\
                            'vpol':numpy.array([[ -18.08001846, 1010.33833279,  116.19070689,   67.19010322, -1.18865173,  -68.5664368 ],\
                                                [-112.36668914,  -26.19725859, -105.02363666,   86.05994948,    7.55419457,  -72.11675185],\
                                                [ 218.61807792,  -68.06595186, -344.55260099,  149.22271294, 84.91039813,  -64.70331867],\
                                                [ -61.59092795,   36.00363538,  164.19034068,  153.30479323, 92.26127069,  -57.55576812]])},\
                        'max_corrs':{\
                            'hpol':numpy.array([[0.77470334, 0.80067311, 0.81435014, 0.73398618, 0.72465197,  0.8592991 ],\
                                                [0.93618182, 0.91795216, 0.92624708, 0.94539968, 0.93627973, 0.90362228],\
                                                [0.83302302, 0.78782138, 0.83980328, 0.79213547, 0.78805092,  0.72954879],\
                                                [0.72074622, 0.74032999, 0.61807304, 0.65139234, 0.49022699,  0.61575815]]),\
                            'vpol':numpy.array([[0.0753522 , 0.06178115, 0.10010959, 0.43601496, 0.37651565,  0.38387265],\
                                                [0.14081788, 0.09006753, 0.09994125, 0.72298839, 0.60235033, 0.45088415],\
                                                [0.06723202, 0.0789984 , 0.06892177, 0.58695738, 0.58971885,  0.66963238],\
                                                [0.05500526, 0.09650205, 0.08005356, 0.34545708, 0.50924905,  0.48500761]])}}

    if ~numpy.isin('1774-88800',ignore_planes):
        known_planes['1774-88800'] = {  'eventids':numpy.array([[1774,88800],[1774,88810],[1774,88815],[1774,88895],[1774,88913],[1774,88921],[1774,88925],[1774,88944],[1774,88955],[1774,88959],[1774,88988],[1774,88993],[1774,89029],[1774,89030],[1774,89032],[1774,89034],[1774,89041],[1774,89043],[1774,89052],[1774,89172],[1774,89175],[1774,89181],[1774,89203],[1774,89204],[1774,89213]]),\
                        'dir':'W',\
                        'known_flight':'ab5f43',\
                        'signal_classification':'PHF',\
                        'baselines':{'hpol':[[0,1],[0,2],[0,3],[1,2],[1,3],[2,3]],'vpol':[]},\
                        'time_delays':{\
                            'hpol':numpy.array([[-28.49636128,  17.06340843, -11.77703625,  45.54412955,  16.5942038, -28.99684622],\
                                                [-26.4318609,   15.78091577, -11.30783162,  41.99381451,  15.0145482, -26.932],\
                                                [-2.52432092e+01,  1.56401544e+01, -1.00253390e+01,  4.02421172e+01,  14.592, -2.55560123e+01],\
                                                [-6.56886484e-01,  1.36538548e+01,  6.64706561e+00,  1.42169003e+01,  7.67931580e+00, -6.95986870e+00],\
                                                [ 3.06547026e+00,  1.32002903e+01,  9.49357371e+00,  9.96277834e+00,  6.47502391e+00, -3.73799690e+00],\
                                                [ 5.78685712e+00,  1.33723320e+01,  1.13547521e+01,  7.05370963e+00,  5.78685712e+00, -1.73605714e+00],\
                                                [ 6.94422854e+00,  1.33879721e+01,  1.31377297e+01,  5.31765249e+00,  4.80152739e+00, -7.82007719e-02],\
                                                [ 1.51083891e+01,  1.26841652e+01,  1.89871474e+01, -3.34699304e+00,  2.89342856e+00,  6.92858839e+00],\
                                                [ 2.16459737e+01,  1.18865173e+01,  2.29441065e+01, -9.90021772e+00,  1.21993204e+00,  1.10575891e+01],\
                                                [ 2.21933791e+01,  1.23088015e+01,  2.32256293e+01, -9.99405865e+00,  1.11045096e+00,  1.09793884e+01],\
                                                [ 36.08183615,  11.21399069,  32.82868404, -25.07116747,  -2.94034902, 22.06825783],\
                                                [ 37.16100681,  11.05758915,  33.46993037, -26.21289874,  -3.23751196, 23.16306864],\
                                                [ 5.38959720e+01,  1.10575891e+01,  4.64043380e+01, -4.28383828e+01, -7.44471348e+00,  3.53467489e+01],\
                                                [ 5.31608847e+01,  1.09637482e+01,  4.60758948e+01, -4.26819813e+01, -7.35087256e+00,  3.51747072e+01],\
                                                [ 54.52157817,  10.86990729,  47.07686468, -44.16779597,  -7.72623626,   36.28515816],\
                                                [ 55.3348662,   10.82298683,  47.29582684, -44.66828091,  -7.96083858,   36.59796125],\
                                                [ 56.75812024,  10.88554745,  48.39063765, -45.76309172,  -8.14852043,   37.64585159],\
                                                [ 57.96241213,  10.99502853,  49.39160753, -47.10814499,  -8.50824398,   38.50606008],\
                                                [ 58.58801831,  10.85426714,  51.15894498, -48.60959981,  -8.78976676,   39.67907166],\
                                                [ 86.20853094,  10.51018374,  70.88117965, -75.01018041, -15.07710882,   59.9956322 ],\
                                                [ 85.48908384,  10.63530498,  71.39730474, -75.93294951, -15.34299145,   60.62123838],\
                                                [ 85.42652322,  10.74478606,  71.7883086,  -76.04243059, -15.28043083,   60.84020054],\
                                                [ 88.86735719,  11.574,  73.08644142, -77.41876418, -15.62451423,   61.68476887],\
                                                [ 88.36687225,  11.65191501,  73.55564605, -77.27800279, -15.42119222,   62.26345459],\
                                                [ 89.77448614,  11.93343779,  74.18125222, -77.88796881, -15.67143469,   61.65348857]]),\
                            'vpol':numpy.array([[-370.32757541,  620.86720842,  292.34576567,   38.83450333,   19.95683699,  -18.62742387],\
                                                [   0.        ,   35.87851415,   60.18331405,   36.25387785,   18.72126479,  -17.34493121],\
                                                [1219.462837  , -113.76648296,  -72.11675185,   34.53346087,   18.47102232,  -15.99987793],\
                                                [ -46.49817897,  -38.36529869, -280.5061688 ,   -5.48969419,   10.19738066,    2.23654208],\
                                                [ -17.93925707,  -31.84335432,  -52.09735424,  -13.4036123 ,   44.91852338,    2.11142084],\
                                                [   4.67640616,  327.8176358 ,  432.66923077,  -15.10838913,  -21.70853428,   10.57274436],\
                                                [ -36.66052187,    4.20720153,  604.80476987,  -14.13869956,    8.52388414,   22.13081845],\
                                                [ 1.40761389e-01,  3.56579880e+02, -2.08154815e+02, -1.52335104e+01,  3.97259921e+00,  1.90340679e+01],\
                                                [ 5.00015736e+01,  4.65138191e+01,  1.44202223e+02, -1.75169729e+01, -4.61697357e+01, -1.28249266e+00],\
                                                [-2.66586431e+02, -2.85511018e+02, -2.76517929e+02, -6.16222083e+00,  4.45744400e+00, -2.40858377e+00],\
                                                [ 1.42951011e+01,  3.94773137e+02,  3.28474522e+02, 2.69745743e+02,  1.35381176e+02, -1.85023026e+01],\
                                                [-6.06837990e+00, -2.19243684e+02,  2.56373411e+02, -4.71550655e+01, -4.37924323e-01, -4.33075875e+01],\
                                                [ 8.22202916e+01, -2.19306245e+02,  6.00566288e+02, -4.89849635e+01,  1.00253390e+01,  2.23341405e+01],\
                                                [ 1.04191580e+03,  8.04998746e+02,  6.44702804e+02, -4.89536832e+01, -4.80152739e+00,  4.38237126e+01],\
                                                [ 288.46700738,   82.76769698, -176.31146032,  -50.51769865,   -5.30201233,    45.04364461],\
                                                [ 484.37558114,  642.81034501,  204.29169651,  -50.68974035,    9.8063768,    45.65361063],\
                                                [ 352.13807586, 1051.0965751,  -344.36491914,  -52.75424072,   -5.53661465,    46.43561835],\
                                                [ 382.33921397,  344.34927898,  420.45427019,  -53.48932798,   -6.05273975,    47.24890638],\
                                                [   2.06450038,  640.55816278,  688.77675874,  -54.56849863,   -6.75654669,    48.24987626],\
                                                [   1.87681853,  -80.65627614,  396.52483399,  -80.39039351,  -12.27752119,    68.26927387],\
                                                [ -74.85377886, -182.39548038,  877.1780584,   -81.64160586,  -12.54340381,    69.09820205],\
                                                [  96.65615407, -404.20414979,  412.61855285,  -81.78236725,  -12.24624088,    69.44228545],\
                                                [ 654.52482064,  570.41207039,  832.93206165,  -83.90942825,  -12.87184705,    71.00630088],\
                                                [1035.7379435,   965.51365033, 1037.16119755,  -83.86250778,  -12.71544551,    71.17834258],\
                                                [ 614.81446867,  544.29301257,  544.9029786,   -84.92603828,  -13.04388875,    71.83522907]])},\
                        'max_corrs':{\
                            'hpol':numpy.array([[0.64059724, 0.77677675, 0.75236731, 0.76749577, 0.59979072, 0.64815502],\
                                                [0.62045939, 0.70644162, 0.63075541, 0.80233294, 0.71063221, 0.661  ],\
                                                [0.6726403 , 0.77406578, 0.79424238, 0.85345803, 0.768, 0.82948902],\
                                                [0.78873432, 0.8493454 , 0.8285548 , 0.83122342, 0.84323089, 0.8600067 ],\
                                                [0.84153738, 0.84077823, 0.88749982, 0.84966581, 0.84858517, 0.83303438],\
                                                [0.77161979, 0.77809199, 0.86298065, 0.80597524, 0.83063258, 0.77320236],\
                                                [0.63756443, 0.84007398, 0.86511378, 0.81531957, 0.66080911, 0.7957828 ],\
                                                [0.74811472, 0.76083647, 0.7468288 , 0.81857184, 0.83935535, 0.65600105],\
                                                [0.85156469, 0.81823081, 0.86343807, 0.86258245, 0.84924771, 0.84471723],\
                                                [0.81706908, 0.75767876, 0.86953568, 0.84000709, 0.87767818, 0.82014223],\
                                                [0.73175229, 0.77029831, 0.85653911, 0.85610337, 0.70158646, 0.74450727],\
                                                [0.76736686, 0.7699827,  0.78498619, 0.85000848, 0.69654943, 0.68416706],\
                                                [0.78847956, 0.8257755 , 0.66594422, 0.87503349, 0.84387349, 0.85493423],\
                                                [0.84624229, 0.84724204, 0.93289006, 0.93969099, 0.92829951, 0.89108326],\
                                                [0.85879361, 0.8511148 , 0.93432178, 0.93254486, 0.93313052, 0.89721675],\
                                                [0.84340874, 0.84170433, 0.92365669, 0.91877931, 0.91033016, 0.88505468],\
                                                [0.87844958, 0.86249058, 0.95011396, 0.92865062, 0.93632529, 0.8856151 ],\
                                                [0.9038838 , 0.88233514, 0.93607073, 0.95002208, 0.93720703, 0.90594311],\
                                                [0.8270224 , 0.87739643, 0.85520432, 0.93087253, 0.92047593, 0.89961645],\
                                                [0.54853226, 0.75981388, 0.6329627 , 0.66585003, 0.58271038, 0.65777595],\
                                                [0.6162375 , 0.89178027, 0.72180865, 0.82017094, 0.80124434, 0.78161604],\
                                                [0.54786448, 0.83198925, 0.72843138, 0.78335336, 0.72950841, 0.78732965],\
                                                [0.78751439, 0.843     , 0.73374321, 0.79957951, 0.62582142, 0.80829344],\
                                                [0.69112644, 0.84812847, 0.75834261, 0.78549372, 0.7385571 , 0.74197444],\
                                                [0.78201732, 0.88369476, 0.75535317, 0.82951779, 0.83410446, 0.73752075]]),\
                            'vpol':numpy.array([[0.09195445, 0.07515564, 0.07639771, 0.62868637, 0.68296663, 0.68418555],\
                                                [0.07507139, 0.06168901, 0.09490234, 0.79546801, 0.63611917, 0.62500897],\
                                                [0.07659796, 0.05946387, 0.08140472, 0.75432493, 0.63174937, 0.59081493],\
                                                [0.06232146, 0.07081852, 0.08302202, 0.15180844, 0.37989728, 0.23783292],\
                                                [0.102013  , 0.07851408, 0.09931923, 0.20611368, 0.24562063, 0.13994543],\
                                                [0.08199799, 0.05676422, 0.08551949, 0.15221236, 0.24075719, 0.15913865],\
                                                [0.05515905, 0.07398308, 0.08675301, 0.59165878, 0.62400296, 0.590796  ],\
                                                [0.07818258, 0.05442293, 0.08631925, 0.19321439, 0.19449608, 0.40349079],\
                                                [0.08497717, 0.06824892, 0.10771709, 0.12015399, 0.17862287, 0.22502987],\
                                                [0.1073537 , 0.06191909, 0.11381537, 0.2712538 , 0.19502656, 0.42513212],\
                                                [0.07641062, 0.07198609, 0.11753064, 0.07709421, 0.25403444, 0.12632135],\
                                                [0.07586185, 0.07300502, 0.12101883, 0.21995608, 0.27776301, 0.2785478 ],\
                                                [0.09672465, 0.08218999, 0.07177631, 0.34128779, 0.31072241, 0.27393056],\
                                                [0.04661366, 0.05603728, 0.07052959, 0.73419146, 0.68739327, 0.71882318],\
                                                [0.06374236, 0.06665853, 0.09883411, 0.7067953 , 0.64468391, 0.73509211],\
                                                [0.05717604, 0.06735745, 0.08034756, 0.42368594, 0.40780072, 0.31449616],\
                                                [0.06886223, 0.07458845, 0.08641286, 0.74389539, 0.78604399, 0.78936861],\
                                                [0.06727275, 0.0591851 , 0.07705009, 0.73627352, 0.71987617, 0.76038748],\
                                                [0.06342815, 0.06639673, 0.06819119, 0.76919342, 0.70656756, 0.78952973],\
                                                [0.09327135, 0.06787646, 0.08285837, 0.32722777, 0.41452416, 0.35887881],\
                                                [0.06860293, 0.08340955, 0.08617786, 0.76052345, 0.82473454, 0.73281971],\
                                                [0.07858032, 0.06649049, 0.08155051, 0.75495761, 0.75391884, 0.72652801],\
                                                [0.06814221, 0.05833277, 0.07026216, 0.92986665, 0.91561262, 0.90739401],\
                                                [0.09521795, 0.10702754, 0.12377197, 0.90834791, 0.89390763, 0.89032708],\
                                                [0.07720588, 0.06618241, 0.06720744, 0.94268425, 0.93906486, 0.92917063]])}}

    if ~numpy.isin('1783-28830',ignore_planes):
        known_planes['1783-28830'] = {  'eventids':numpy.array([[1783,28830],[1783,28832],[1783,28842],[1783,28843],[1783,28861],[1783,28886]]),\
                        'dir':'W',\
                        'known_flight':'a52e4f',\
                        'signal_classification':'LF',\
                        'baselines':{'hpol':[[0,1],[0,2],[0,3],[1,2],[1,3],[2,3]],'vpol':[[1,2],[1,3],[2,3]]},\
                        'time_delays':{\
                            'hpol':numpy.array([[  65.37584531,  -44.19907628,   17.53261306, -109.54364128,  -47.90579287,     61.62220826],\
                                                 [  66.48629627,  -42.96350408,   19.61275359, -109.4654405,   -47.38966777,     62.07577273],\
                                                 [  75.05710087,  -31.03006629,   33.67325238, -106.38433009,-41.14924617,   65.344565  ],\
                                                 [  75.63578658,  -29.76321378,   35.19034735, -105.63360268,-40.58620062,   65.31328469],\
                                                 [  87.78818653,  -11.38603239,   57.28988549,  -98.59553321,  -30.87366475,     67.87827001],\
                                                 [ 98.65809383,  13.66949493,  82.00132941, -86.9436182 ,-16.70368488,  69.70816807]]),\
                            'vpol':numpy.array([[ 951.54699247, -386.21797226, -224.26417365, -115.95610457,  -46.38869789,     69.75508853],\
                                                 [ 675.0759835,   562.57635304,  632.5973242,  -115.22101732,  -45.16876585,     70.13045224],\
                                                 [ 707.34162198,  575.32307886,  668.92940283, -111.96786521,-38.59990101,   72.53903601],\
                                                 [-154.0711608 , -266.35182909, -172.3075808 , -111.7645432 ,-38.42785931,   72.82055879],\
                                                 [1327.34862191, -206.32491658, 1297.6636089,  -104.44495095,  -28.7622439,     75.76090782],\
                                                 [768.71358777, 676.59307847, 753.07343339, -93.07455871,-15.15530959,  77.88796881]])},\
                        'max_corrs':{\
                            'hpol':numpy.array([[0.77510182, 0.76120413, 0.69953395, 0.85153975, 0.85410922, 0.8273125 ],\
                                                 [0.81609656, 0.83873214, 0.82409572, 0.85631712, 0.85515108, 0.86051845],\
                                                 [0.79317338, 0.7021032 , 0.75819653, 0.75594331, 0.90196112,  0.79827819],\
                                                 [0.81461075, 0.70995574, 0.7421784 , 0.79123073, 0.89169437,  0.84726351],\
                                                 [0.61147331, 0.518565,   0.68108793, 0.70349108, 0.80336612, 0.74497518],\
                                                 [0.37849395, 0.37336819, 0.58865502, 0.45827797, 0.66429776,  0.6156677 ]]),\
                            'vpol':numpy.array([[0.083143,   0.06820834, 0.08130717, 0.66499273, 0.77803667, 0.67031213],\
                                                 [0.08099163, 0.07719255, 0.08242499, 0.7171041,  0.84142522, 0.74202524],\
                                                 [0.08493632, 0.09063443, 0.10260527, 0.71636322, 0.77038414,  0.75479332],\
                                                 [0.06897787, 0.07526369, 0.08112675, 0.78794996, 0.83015625,  0.79313696],\
                                                 [0.06336892, 0.06530053, 0.07794064, 0.82957209, 0.88256237, 0.83269091],\
                                                 [0.06945627, 0.07351497, 0.07898279, 0.82936498, 0.91205648,  0.81912711]])}}

    if ~numpy.isin('1784-7166',ignore_planes):
        known_planes['1784-7166'] = {   'eventids':numpy.array([[1784,7166],[1784,7176],[1784,7179],[1784,7195],[1784,7203],[1784,7244],[1784,7255]]),\
                        'dir':'W',\
                        'known_flight':'acf975',\
                        'signal_classification':'HF',\
                        'baselines':{'hpol':[[0,1],[0,2],[0,3],[1,2],[1,3],[2,3]],'vpol':[[1,2],[1,3],[2,3]]},\
                        'time_delays':{\
                            'hpol':numpy.array([[  70.09917193,  -39.67907166,   24.4768416,  -109.73132313,  -45.71617125,     63.98387157],\
                                                 [  77.8566885,   -28.52764159,   38.05249561, -105.94640577,  -40.19519676,     66.22041364],\
                                                 [  78.85765838,  -26.51006167,   40.30467784, -104.94543589,  -38.85014348,     66.37681519],\
                                                 [  88.53891394,   -9.2902517,    58.69749939,  -97.92300657,  -29.95089564,     68.03467155],\
                                                 [ 93.49684288,  -0.18768185,  67.54982677, -93.65324443, -25.32140994,  68.30055418],\
                                                 [ 110.1536073,    39.19422688,  108.76163356,  -70.58401672,   -1.20429189,     69.2858839 ],\
                                                 [113.31291848,  47.8588724,  116.84759337, -63.68670863,   4.19156137,   68.53515649]]),\
                            'vpol':numpy.array([[-2.50430152e+02, -3.53842853e+02,  2.32803698e+02, -1.15768423e+02,  -4.45431597e+01,  7.14442252e+01],\
                                                 [ 8.00775904e+00, -1.04069587e+02,  1.22948818e+03, -1.12092986e+02,  -3.78960941e+01,  7.41186916e+01],\
                                                 [ 4.22190327e+02,  3.10754227e+02,  3.99340062e+02, -1.11092017e+02,  -3.67387226e+01,  7.42594530e+01],\
                                                 [ 8.87875924e+02,  7.83728136e+02,  9.45103249e+02, -1.03991386e+02,  -2.78394748e+01,  7.62301124e+01],\
                                                 [ 343.56727126, 1174.41919239,  537.41134465,  -99.90930618,  -22.58438292,   77.37184372],\
                                                 [ 8.00775904e+00, -4.42522528e+02,  1.03777116e+03, -7.62457526e+01,   1.17301158e+00,  7.75438854e+01],\
                                                 [-19.72223467, -38.05249561, 436.48542843, -70.23993332, 7.55419457,  78.35717344]])},\
                        'max_corrs':{\
                            'hpol':numpy.array([[0.82452304, 0.84237292, 0.86070192, 0.88783822, 0.89508353, 0.84408384],\
                                                 [0.69477446, 0.64290981, 0.70018481, 0.74739501, 0.89817133, 0.73033073],\
                                                 [0.67095742, 0.54535095, 0.70012358, 0.74522961, 0.82753476, 0.73537265],\
                                                 [0.71017735, 0.62077517, 0.68634733, 0.86860821, 0.88005062, 0.87374545],\
                                                 [0.5049515 , 0.42942912, 0.5382682 , 0.74989802, 0.84421557, 0.66331599],\
                                                 [0.65076326, 0.74020585, 0.66372195, 0.80522205, 0.87859943, 0.81493234],\
                                                 [0.39197714, 0.08332387, 0.39682659, 0.58704473, 0.74093629,0.58922157]]),\
                            'vpol':numpy.array([[0.07563383, 0.08511365, 0.09201061, 0.74565473, 0.81545159, 0.72463237],\
                                                 [0.08151722, 0.0958623,  0.08309501, 0.89035292, 0.93663151, 0.8665272 ],\
                                                 [0.06950143, 0.08449305, 0.06821813, 0.85802633, 0.91646282, 0.84926463],\
                                                 [0.09422863, 0.09829601, 0.08132951, 0.78374033, 0.84211843, 0.78580355],\
                                                 [0.07260065, 0.07050859, 0.07768207, 0.88681028, 0.9500332 , 0.86423731],\
                                                 [0.06832285, 0.06841074, 0.06360799, 0.75114916, 0.87657423, 0.74458405],\
                                                 [0.07721145, 0.0884296 , 0.05952351, 0.53772421, 0.81185286, 0.55579139]])}}
    return known_planes

def pulserRuns():
    '''
    Returns
    -------
    pulser_runs : numpy.ndarray of ints
        This is the list of known pulser runs as determined by the matching_times.py script.
    '''
    pulser_runs = numpy.array([734,735,736,737,739,740,746,747,757,757,762,763,764,766,767,768,769,770,781,782,783,784,785,786,787,788,789,790,792,793,1504,1506,1507,1508,1509,1511,5179,5180,5181,5182,5183,5184,5185,5190,5191,5192,5193,5194,5195,5196,5197,5198]) 
    
    return pulser_runs

def loadAntennaZeroLocation(deploy_index=default_deploy,check=False,verbose=False):
    '''
    Loads antenna 0's location (which use used as the station location).
    Loads the latitude, longtidue, elevation
    '''
    if type(deploy_index) == str:
        A0Location = configReader(deploy_index, return_mode='enu',check=check, verbose=verbose)[0]
    elif deploy_index == 0:
        A0Location = (37.5893,-118.2381,3894.12)#latitude,longtidue,elevation  #ELEVATION GIVEN FROM GOOGLE EARTH given in m
    elif deploy_index > 0 and deploy_index <= 9:
        A0Location = (37.589310, -118.237621, 3875.53)#latitude,longtidue,elevation #ELEVATION FROM GOOGLE EARTH given in m  
    elif deploy_index > 9 and deploy_index <= 11:
        #For these deploy indices I am attempting to be more sure of which elevation metric is being used, and ensuring it is properly handled.
        #These coordinates are coming from a picture taken near the base of antenna 0 on a OnePlus 6T, which uses MSL elevation.
        #The offset between MSL and WGS84 onsite according to pulsing data averages to MSL = WGS84 + 26.356m, so I am subtracting the offset such that datum is WGS84
        A0Location = (37.0 + 35.0/60.0 + 21.6528/3600, -(118. + 14.0/60.0 + 15.4715/3600.0),   3850.333 - 26.356) #6ft below antennas, ~3ft to the side (north east ish)
        # A1Location = (37.5892, -118.2380,                                                    3862.776 - 26.356) #No good photos for elevation.  Could be off on this one, this is from a picture taken at approximately the same height?  GPS come from pictures and google maps.  Likely too high.
        # A2Location = (37.0 + 35.0/60.0 + 19.9643/3600, -(118. + 14.0/60.0 + 15.9971/3600.0), 3857.583 - 26.356) #6ft below antennas, ~3ft to the side (north east ish)
        # A3Location = (37.0 + 35.0/60.0 + 20.1155/3600, -(118. + 14.0/60.0 + 16.7496/3600.0), 3859.079 - 26.356) #Slightly downhill south, closer to antenna

    elif deploy_index == 12:
        A0Location = (37.0 + 35.0/60.0 + 21.6528/3600, -(118. + 14.0/60.0 + 15.4715/3600.0),   3850.333) #Interpreting this as WGS84
    elif deploy_index >= 13 and deploy_index <= 22:
        #These positions from from photo_gps.py, which was used to make a plane model of the hillside based on GPS coordinates of
        #cell phone pictures.  The GPS coordinates are then input in this plane to calculate the altitudes.  
        # ENU calculated below relative to deploy_index == 1
        # Antenna 0
        # (E, N, U)       : (0.000000,0.000000,-22.687778)
        # (lat, lon, alt) : (37.589310,-118.237621,3852.842222)
        # Antenna 1
        # (E, N, U)       : (-33.493731,-12.216161,-2.989690)
        # (lat, lon, alt) : (37.589200,-118.238000,3872.540409)
        # Antenna 2
        # (E, N, U)       : (-8.660669,-44.533633,-26.183296)
        # (lat, lon, alt) : (37.588909,-118.237719,3849.346866)
        # Antenna 3
        # (E, N, U)       : (-32.168224,-43.200941,-10.301701)
        # (lat, lon, alt) : (37.588921,-118.237985,3865.228526)
        A0Location = (37.589310,-118.237621,3852.842222) #WGS84
    elif deploy_index >= 23:
        A0Location = (37.589310, -118.237621, 3852.842222)#latitude,longtidue,elevation 
    return A0Location

def loadValleySourcesENU(deploy_index=default_deploy):
    '''
    This returns a list of potential RFI sources in the valley.  These were identified using run 1650 as potential sources
    for the clusters of background events visible in that run.  Some clusters identified had ambigious origin and thus
    are beholden to multiple entries in the below dictionary.  These all use Google Earth elevations ( WGS84 ).
    '''
    if False:
        #ONLY WORKS FOR HPOL WITH MAP KEY 
        '''
        map_direction_dset_key = 'LPf_100.0-LPo_8-HPf_None-HPo_None-Phase_1-Hilb_0-upsample_32768-maxmethod_0-sinesubtract_1-deploy_calibration_22-scope_belowhorizon' # 'LPf_100.0-LPo_8-HPf_None-HPo_None-Phase_1-Hilb_0-upsample_32768-maxmethod_0-sinesubtract_1-deploy_calibration_22-scope_allsky'
        ds.addROI('-19',{'phi_best_h':[-21,-18],'elevation_best_h':[-0.5,0.5]})
        ds.addROI('-10h',{'phi_best_h':[-11,-9],'elevation_best_h':[-1,0.5]})
        ds.addROI('-10l',{'phi_best_h':[-11,-9],'elevation_best_h':[-6,-4]})
        ds.addROI('-2',{'phi_best_h':[-3,-1],'elevation_best_h':[-3.5,-1.5]})
        ds.addROI('8',{'phi_best_h':[7,9],'elevation_best_h':[-2,0]})
        ds.addROI('19',{'phi_best_h':[18,20],'elevation_best_h':[-3,-1.5]})
        ds.addROI('28h',{'phi_best_h':[27,29],'elevation_best_h':[-3,-1.5]})
        ds.addROI('28l',{'phi_best_h':[27,29],'elevation_best_h':[-4,-3]})
        ds.addROI('32',{'phi_best_h':[31,33],'elevation_best_h':[-2,0]})
        '''


        # 'Base Tower'                     :(37.310649, -116.804392, 5872 * 0.3048) #This or palmetto?
        # 'Cross Road Site'                :(37.500680, -117.185470, 4700 * 0.3048) #This or palmetto?
        # 'Complex Tower'                   :(37.711458, -116.447481, 5703 * 0.3048) #This or palmetto?

        source_dict = { 'Tokop'                     :(37.300047, -117.261011, 7097 * 0.3048),\
                        'Palmetto Cell Tower'       :(37.462089, -117.573584, 5943 * 0.3048),\
                        'East Dyer Substation'      :(37.494710, -117.860383, 5144 * 0.3048),\
                        'Cross Road Site'           :(37.500680, -117.185470, 4700 * 0.3048),\
                        'Jack Rabbit Knob'          :(37.685060, -116.543169, 6058 * 0.3048),\
                        'Tonopah Vortac'            :(38.030653, -117.033528, 5350 * 0.3048),\
                        'Tonopah Airport Antenna'   :(38.063273, -117.096715, 5426 * 0.3048),\
                        'Tonopah KTPH'              :(38.051701, -117.226212, 7104 * 0.3048),\
                        'Dyer Cell Tower'           :(37.665613, -118.065012, 4879 * 0.3048),\
                        'Tonopah AFS GATR Site'     :(38.1435,   -117.199212, 7140 * 0.3048)}


        # 'Tonopah KTPH'              :{'time_delay_0subtract1_h':[-135,-131],'time_delay_0subtract2_h':[-111,-105]},\
        # 'Dyer Cell Tower'           :{'time_delay_0subtract1_h':[-135,-131],'time_delay_0subtract2_h':[-111,-105]},\
        #Below are the cuts that were used in the data slicer class to isolate the above clusters.
        data_slicer_cut_dict = {    'Tokop'                 :   {'phi_best_h':[-21,-18],'elevation_best_h':[-0.5,0.5]},\
                                    'Palmetto Cell Tower'   :   {'phi_best_h':[-11,-9],'elevation_best_h':[-1,0.5]},\
                                    'East Dyer Substation'   :   {'phi_best_h':[-11,-9],'elevation_best_h':[-1,0.5]},\
                                    'Cross Road Site'       :   {'phi_best_h':[-3,-1],'elevation_best_h':[-3.5,-1.5]},\
                                    'Jack Rabbit Knob'      :   {'phi_best_h':[7,9],'elevation_best_h':[-2,0]},\
                                    'Tonopah Vortac'        :   {'phi_best_h':[18,20],'elevation_best_h':[-3,-1.5]},\
                                    'Tonopah Airport Antenna':   {'phi_best_h':[18,20],'elevation_best_h':[-3,-1.5]},\
                                    'Tonopah KTPH'          :   {'phi_best_h':[27,29],'elevation_best_h':[-3,-1.5]},\
                                    'Dyer Cell Tower'       :   {'phi_best_h':[27,29],'elevation_best_h':[-3,-1.5]},\
                                    'Tonopah AFS GATR Site' :   {'phi_best_h':[31,33],'elevation_best_h':[-2,0]}}

    elif False:
        source_dict = {}
        source_dict['A'] = (37.759052, -118.097173, 4920 * 0.3048) # North Dyer Substation
        source_dict['B'] = (38.238904, -117.363661, 4922 * 0.3048) # Solar
        source_dict['C'] = (38.094374, -117.186576, 6856 * 0.3048) # Booker
        source_dict['D'] = (37.754281, -117.632355, 4274 * 0.3048) # Silver Peak
        source_dict['E'] = (37.462089, -117.573584, 5943 * 0.3048) # Palmetto

        data_slicer_cut_dict = {}
        data_slicer_cut_dict['A'] = {'time_delay_0subtract1_h':[-127,-123],'time_delay_0subtract2_h':[-127,-123.5]} # North Dyer Substation
        data_slicer_cut_dict['B'] = {'time_delay_0subtract1_h':[-135,-131],'time_delay_0subtract2_h':[-111,-105]} # Solar
        data_slicer_cut_dict['C'] = {'time_delay_0subtract1_h':[-140.5,-137],'time_delay_0subtract2_h':[-90,-83.5],'time_delay_0subtract3_h':[-167,-161],'time_delay_1subtract2_h':[46,55]} # Booker
        data_slicer_cut_dict['D'] = {'time_delay_0subtract1_h':[-143,-140],'time_delay_0subtract2_h':[-60.1,-57.4]}  # Silver Peak
        data_slicer_cut_dict['E'] = {'time_delay_0subtract1_h':[-124.5,-121],'time_delay_0subtract2_h':[22.5,28.5]} # Palmetto
        

    else:
        source_dict = { 'Northern Cell Tower'       :(38.017045, -117.773122, 5525 * 0.3048),\
                        'Solar Plant'               :(38.238904, -117.363661, 4922 * 0.3048),\
                        'Quarry Substation'         :(38.323974, -117.335893, 5365 * 0.3048),\
                        'Tonopah KTPH'              :(38.051701, -117.226212, 7104 * 0.3048),\
                        'Booker Antenna'            :(38.094374, -117.186576, 6856 * 0.3048),\
                        'Nye County Sherriff'       :(38.084554, -117.251408, 5866 * 0.3048),\
                        'Tonopah AFS GATR Site'     :(38.1435,   -117.199212, 7140 * 0.3048),\
                        'KNKN223'                   :(38.017091, -117.773029, 4887 * 0.3048),\
                        'Dyer House Antenna A'      :(37.740821, -118.076144, 4855 * 0.3048),\
                        'Miller Substation'         :(38.131173, -117.459208, 4853 * 0.3048),\
                        'Tonopah Vortac'            :(38.030653, -117.033528, 5350 * 0.3048),\
                        'Tonopah Airport Antenna'   :(38.063273, -117.096715, 5426 * 0.3048),\
                        'Dyer Cell Tower'           :(37.665613, -118.065012, 4879 * 0.3048),\
                        'West Dyer Substation'      :(37.599110, -118.000846, 4942 * 0.3048),\
                        'East Dyer Substation'      :(37.494710, -117.860383, 5144 * 0.3048),\
                        'Beatty Mountain Cell Tower':(36.935220, -116.850985, 5782 * 0.3048),\
                        'Beatty Airport Vortac'     :(36.800590, -116.747633, 3928 * 0.3048),\
                        'Beatty Substation'         :(36.902775, -116.767806, 3378 * 0.3048),\
                        'Oasis'                     :(37.486695, -117.914865, 5057 * 0.3048),\
                        'Tokop'                     :(37.300047, -117.261011, 7097 * 0.3048),\
                        'Beatty Airport Antenna'    :(36.868032, -116.784008, 3166 * 0.3048),\
                        'Palmetto Cell Tower'       :(37.462089, -117.573584, 5943 * 0.3048),\
                        'South Dyer Town'           :(37.579375, -117.973822, 4928 * 0.3048),\
                        'Black Mountain'            :(37.283284, -116.646110, 7232 * 0.3048),\
                        'Cedar Peak'                :(37.706014, -116.335117, 8419 * 0.3048),\
                        'Test Site A'               :(37.886176, -116.779117, 5362 * 0.3048),\
                        'Concrete Substation'       :(37.709394, -117.720283, 5339 * 0.3048),\
                        'Dome Thing'                :(37.753476, -116.538488, 5666 * 0.3048),\
                        'Jack Rabbit Knob'          :(37.685060, -116.543169, 6058 * 0.3048),\
                        'Goldfield Hill Tower'      :(37.726953, -117.225670, 6092 * 0.3048),\
                        'Goldield Town Tower'       :(37.710925, -117.233411, 5670 * 0.3048),\
                        'Goldfield KGFN-FM'         :(37.708384, -117.235265, 5696 * 0.3048),\
                        'Silver Peak Town Antenna'  :(37.752345, -117.630208, 4296 * 0.3048),\
                        'Silver Peak Lithium Mine'  :(37.766835, -117.591208, 4272 * 0.3048),\
                        'Past SP Substation'        :(37.824025, -117.337428, 5034 * 0.3048),\
                        'Silver Peak Substation'    :(37.754281, -117.632355, 4274 * 0.3048),\
                        'A'                         :(37.759052, -118.097173, 4920 * 0.3048),\
                        'B'                         :(38.238904, -117.363661, 4922 * 0.3048),\
                        'C'                         :(38.094374, -117.186576, 6856 * 0.3048),\
                        'D'                         :(37.754281, -117.632355, 4274 * 0.3048),\
                        'E'                         :(37.529279, -117.905027, 5009 * 0.3048),\
                        'F'                         :(37.583882, -117.975084, 4911 * 0.3048)}

        # 'A'                         :(37.759052, -118.097173, 4920 * 0.3048),\ # A original
        # 'A'                         :(37.759599, -118.080870, 4867 * 0.3048),\ # A new (I think less good)
        # 'E'                         :(37.529279, -117.905027, 5009 * 0.3048) #old 
        # 'E'                         :(37.585789, -118.225969, 3852.842222 - (12717 - 12227)*0.3048) #close 1
        # 'E'                         :(37.583756, -118.213022, 3852.842222 - (12717 - 12232)*0.3048) #close 2
        # 'E'                         :(37.588091, -118.231342, 3852.842222 - (12717 - 12143)*0.3048) #close 3

        #37.588091,-118.231342, 12143


        # 'Tonopah KTPH'              :{'time_delay_0subtract1_h':[-135,-131],'time_delay_0subtract2_h':[-111,-105]},\
        # 'Dyer Cell Tower'           :{'time_delay_0subtract1_h':[-135,-131],'time_delay_0subtract2_h':[-111,-105]},\
        #Below are the cuts that were used in the data slicer class to isolate the above clusters.
        #AFS GATR AND MILLER SWAPPED MID DAY ON 4/29/2021
        #Same day Wester Dyer Substation events swapped to be the palmetto ones.
        #old: 'West Dyer Substation'      :{'time_delay_0subtract1_h':[-143,-140],'time_delay_0subtract2_h':[-60.1,-57.4]},\
        #new: 'West Dyer Substation'      :{'time_delay_0subtract1_h':[-138,-131.7],'time_delay_0subtract2_h':[-7,-1]},\
        data_slicer_cut_dict = {    'Northern Cell Tower'       :{'time_delay_0subtract1_h':[-127,-123],'time_delay_0subtract2_h':[-127,-123.5]},\
                                    'Solar Plant'               :{'time_delay_0subtract1_h':[-127,-123],'time_delay_0subtract2_h':[-127,-123.5]},\
                                    'Quarry Substation'         :{'time_delay_0subtract1_h':[-127,-123],'time_delay_0subtract2_h':[-127,-123.5]},\
                                    'Tonopah KTPH'              :{'time_delay_0subtract1_h':[-140.5,-137],'time_delay_0subtract2_h':[-90,-83.5],'time_delay_0subtract3_h':[-167,-161],'time_delay_1subtract2_h':[46,55]},\
                                    'Booker Antenna'            :{'time_delay_0subtract1_h':[-140.5,-137],'time_delay_0subtract2_h':[-90,-83.5],'time_delay_0subtract3_h':[-167,-161],'time_delay_1subtract2_h':[46,55]},\
                                    'Nye County Sherriff'       :{'time_delay_0subtract1_h':[-135,-131],'time_delay_0subtract2_h':[-111,-105]},\
                                    'Tonopah AFS GATR Site'     :{'time_delay_0subtract1_h':[-135,-131],'time_delay_0subtract2_h':[-111,-105]},\
                                    'KNKN223'                   :{'time_delay_0subtract1_h':[-127,-123],'time_delay_0subtract2_h':[-127,-123.5]},\
                                    'Dyer House Antenna A'      :{'time_delay_0subtract1_h':[-127,-123],'time_delay_0subtract2_h':[-127,-123.5]},\
                                    'Miller Substation'         :{'time_delay_0subtract1_h':[-127,-123],'time_delay_0subtract2_h':[-127,-123.5]},\
                                    'Tonopah Vortac'            :{'time_delay_0subtract1_h':[-135,-131],'time_delay_0subtract2_h':[-111,-105]},\
                                    'Tonopah Airport Antenna'   :{'time_delay_0subtract1_h':[-135,-131],'time_delay_0subtract2_h':[-111,-105]},\
                                    'Dyer Cell Tower'           :{'time_delay_0subtract1_h':[-140.5,-137],'time_delay_0subtract2_h':[-90,-83.5],'time_delay_0subtract3_h':[-167,-161],'time_delay_1subtract2_h':[46,55]},\
                                    'West Dyer Substation'      :{'time_delay_0subtract1_h':[-138,-131.7],'time_delay_0subtract2_h':[-7,-1]},\
                                    'East Dyer Substation'      :{'time_delay_0subtract1_h':[-138,-131.7],'time_delay_0subtract2_h':[-7,-1]},\
                                    'Beatty Mountain Cell Tower':{'time_delay_0subtract1_h':[-124.5,-121],'time_delay_0subtract2_h':[22.5,28.5]},\
                                    'Beatty Airport Vortac'     :{'time_delay_0subtract1_h':[-124.5,-121],'time_delay_0subtract2_h':[22.5,28.5]},\
                                    'Beatty Substation'         :{'time_delay_0subtract1_h':[-124.5,-121],'time_delay_0subtract2_h':[22.5,28.5]},\
                                    'Oasis'                     :{'time_delay_0subtract1_h':[-124.5,-121],'time_delay_0subtract2_h':[22.5,28.5]},\
                                    'Tokop'                     :{'time_delay_0subtract1_h':[-124.5,-121],'time_delay_0subtract2_h':[22.5,28.5]},\
                                    'Beatty Airport Antenna'    :{'time_delay_0subtract1_h':[-124.5,-121],'time_delay_0subtract2_h':[22.5,28.5]},\
                                    'Palmetto Cell Tower'       :{'time_delay_0subtract1_h':[-138,-131.7],'time_delay_0subtract2_h':[-7,-1]},\
                                    'South Dyer Town'           :{'time_delay_0subtract1_h':[-138,-131.7],'time_delay_0subtract2_h':[-7,-1]},\
                                    'Black Mountain'            :{'time_delay_0subtract1_h':[-138,-131.7],'time_delay_0subtract2_h':[-7,-1]},\
                                    'Cedar Peak'                :{'time_delay_0subtract1_h':[-143,-140],'time_delay_0subtract2_h':[-60.1,-57.4]},\
                                    'Test Site A'               :{'time_delay_0subtract1_h':[-143,-140],'time_delay_0subtract2_h':[-60.1,-57.4]},\
                                    'Concrete Substation'       :{'time_delay_0subtract1_h':[-143,-140],'time_delay_0subtract2_h':[-60.1,-57.4]},\
                                    'Dome Thing'                :{'time_delay_0subtract1_h':[-143,-140],'time_delay_0subtract2_h':[-60.1,-57.4]},\
                                    'Jack Rabbit Knob'          :{'time_delay_0subtract1_h':[-143,-140],'time_delay_0subtract2_h':[-60.1,-57.4]},\
                                    'Goldfield Hill Tower'      :{'time_delay_0subtract1_h':[-143,-140],'time_delay_0subtract2_h':[-60.1,-57.4]},\
                                    'Goldield Town Tower'       :{'time_delay_0subtract1_h':[-143,-140],'time_delay_0subtract2_h':[-60.1,-57.4]},\
                                    'Goldfield KGFN-FM'         :{'time_delay_0subtract1_h':[-143,-140],'time_delay_0subtract2_h':[-60.1,-57.4]},\
                                    'Silver Peak Town Antenna'  :{'time_delay_0subtract1_h':[-140.5,-137],'time_delay_0subtract2_h':[-90,-83.5],'time_delay_0subtract3_h':[-167,-161],'time_delay_1subtract2_h':[46,55]},\
                                    'Silver Peak Lithium Mine'  :{'time_delay_0subtract1_h':[-140.5,-137],'time_delay_0subtract2_h':[-90,-83.5],'time_delay_0subtract3_h':[-167,-161],'time_delay_1subtract2_h':[46,55]},\
                                    'Past SP Substation'        :{'time_delay_0subtract1_h':[-140.5,-137],'time_delay_0subtract2_h':[-90,-83.5],'time_delay_0subtract3_h':[-167,-161],'time_delay_1subtract2_h':[46,55]},\
                                    'Silver Peak Substation'    :{'time_delay_0subtract1_h':[-140.5,-137],'time_delay_0subtract2_h':[-90,-83.5],'time_delay_0subtract3_h':[-167,-161],'time_delay_1subtract2_h':[46,55]},\
                                    'A'                         :{'time_delay_0subtract1_h':[-127,-123],'time_delay_0subtract2_h':[-127,-123.5]},\
                                    'B'                         :{'time_delay_0subtract1_h':[-135,-131],'time_delay_0subtract2_h':[-111,-105]},\
                                    'C'                         :{'time_delay_0subtract1_h':[-140.5,-137],'time_delay_0subtract2_h':[-90,-83.5],'time_delay_0subtract3_h':[-167,-161],'time_delay_1subtract2_h':[46,55]},\
                                    'D'                         :{'time_delay_0subtract1_h':[-143,-140],'time_delay_0subtract2_h':[-60.1,-57.4]},\
                                    'E'                         :{'time_delay_0subtract1_h':[-124.5,-121],'time_delay_0subtract2_h':[22.5,28.5]},\
                                    'F'                         :{'time_delay_0subtract1_h':[-138,-131.7],'time_delay_0subtract2_h':[-7,-1]}}
    #Note the above ROI assumes you have already cut out events that are below a certain correlation with a template.
    # impulsivity_dset_key = 'LPf_100.0-LPo_8-HPf_None-HPo_None-Phase_1-Hilb_0-corlen_65536-align_0-shortensignals-0-shortenthresh-0.70-shortendelay-10.00-shortenlength-90.00-sinesubtract_1'
    # time_delays_dset_key = 'LPf_100.0-LPo_8-HPf_None-HPo_None-Phase_1-Hilb_0-corlen_65536-align_0-shortensignals-0-shortenthresh-0.70-shortendelay-10.00-shortenlength-90.00-sinesubtract_1'
    # map_direction_dset_key = 'LPf_70.0-LPo_4-HPf_None-HPo_None-Phase_1-Hilb_1-upsample_32768-maxmethod_0'#'LPf_100.0-LPo_8-HPf_None-HPo_None-Phase_1-Hilb_1-upsample_32768-maxmethod_0-sinesubtract_1'
    # ds = dataSlicerSingleRun(reader, impulsivity_dset_key, time_delays_dset_key, map_direction_dset_key,\
    #                 curve_choice=0, trigger_types=trigger_types,included_antennas=[0,1,2,3,4,5,6,7],include_test_roi=False,\
    #                 cr_template_n_bins_h=200,cr_template_n_bins_v=200,\
    #                 impulsivity_n_bins_h=200,impulsivity_n_bins_v=200,\
    #                 time_delays_n_bins_h=150,time_delays_n_bins_v=150,min_time_delays_val=-200,max_time_delays_val=200,\
    #                 std_n_bins_h=200,std_n_bins_v=200,max_std_val=9,\
    #                 p2p_n_bins_h=128,p2p_n_bins_v=128,max_p2p_val=128,\
    #                 snr_n_bins_h=200,snr_n_bins_v=200,max_snr_val=35)
    # ds.addROI('Simple Template V > 0.7',{'cr_template_search_v':[0.7,1.0]})# Adding 2 ROI in different rows and appending as below allows for "OR" instead of "AND"
    # ds.addROI('Simple Template H > 0.7',{'cr_template_search_h':[0.7,1.0]})
    # #Done for OR condition
    # _eventids = numpy.sort(numpy.unique(numpy.append(ds.getCutsFromROI('Simple Template H > 0.7',load=False,save=False),ds.getCutsFromROI('Simple Template V > 0.7',load=False,save=False))))
    # roi_eventids = numpy.intersect1d(ds.getCutsFromROI(roi_key),_eventids)
    source_ENU = {}

    origin = loadAntennaZeroLocation(deploy_index = deploy_index)
    
    for key, location in source_dict.items():
        source_ENU[key] = numpy.array(pm.geodetic2enu(location[0],location[1],location[2],origin[0],origin[1],origin[2]))

    return source_ENU, data_slicer_cut_dict

# def loadUniqueSourceDir():
#     source_ENU, data_slicer_cut_dict = loadValleySourcesENU()

#     [val for key, val in data_slicer_cut_dict.items()]
#     s = list( set([str(val) for key, val in data_slicer_cut_dict.items()]) )


def loadAntennaLocationsENU(deploy_index=default_deploy, check=False, verbose=False):
    '''
    Loads the antenna locations and phase locations as best they are known.
    These are given in ENU relative to Antenna 0.

    Check only applies when using a deploy index that would call the config reader.
    When it does apply it will check for both ENU and latlonel data.
    '''
    try:
        if type(deploy_index) == str:
            ignored_origin, antennas_physical, antennas_phase_hpol, antennas_phase_vpol, ignored_cable_delays = configReader(deploy_index, return_mode='enu',check=check, verbose=verbose)
        elif deploy_index == 0:
            antennas_physical   = {0:(0.0,0.0,0.0),1:(-6.039,-1.618,2.275),2:(-1.272,-10.362,1.282),3:(3.411,-11.897,-0.432)} #ORIGINAL
            '''
            #These were determined using only run 793
            antennas_phase_hpol = {0:(  -0.02557475,   0.03116954,   0.09699316),1:(-6.07239516,  -1.57654064,   2.40102979),2:(-1.03349923, -10.66185761,   0.41323144),3:( 3.0254727 , -11.41386618,   1.08350273)}#ADJUSTED HPOL
            antennas_phase_vpol = {0:(-0.3113139 ,   0.37988811,   1.22224369),1:(-5.87779214,  -1.8179266 ,   1.68175401),2:(-1.57186065,  -9.98385335,   2.45102724),3:( 3.79236323, -12.37305718,  -1.80125484)}#ADJUSTED VPOL
            '''
            #These were determined in first attempt with day 5 and day 6 data with no bounds on phase positons.
            antennas_phase_hpol = {0:( -1.05036701,  -2.83990607,   5.7301439) , 1:(-5.04455409,   1.80238432,  -3.37157069), 2:(-0.70469931,  -9.35762227,  -1.46880603),  3:( 0.62819922, -18.85449124,  14.09627911)}#ADJUSTED HPOL
            antennas_phase_vpol = {0:( -1.97517555,  -4.78830899,  10.53874329), 1:( -5.26414199,   0.06191184,  -1.6073464), 2:( -1.17891238,  -8.69156208,   0.24012179), 3:(  4.23558404, -11.0023696 ,  -4.13418962)}#ADJUSTED VPOL
        elif deploy_index > 0 and deploy_index <= 9:

            origin = loadAntennaZeroLocation(deploy_index = deploy_index)
            antennas_physical_latlon = {0:origin,1:(37.5892, -118.2380, 3890.77),2:(37.588909, -118.237719, 3881.02),3:(37.5889210, -118.2379850, 3887.42)} #ORIGINAL
            antennas_physical = {}
            for key, location in antennas_physical_latlon.items():
                antennas_physical[key] = pm.geodetic2enu(location[0],location[1],location[2],origin[0],origin[1],origin[2])

            if deploy_index == 1:
                #Errors not currently used.  
                antennas_phase_vpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-30.307267, -12.610417, 11.411196], 2 : [-10.464510, -46.217141, -0.229276], 3 : [-31.172820, -42.069610, 14.812669]}
                antennas_phase_vpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.042770, 0.047592, 0.232313], 2 : [0.069353, 0.034351, 0.297275], 3 : [0.065285, 0.047254, 0.249236]}
                antennas_phase_hpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-29.908104, -12.713682, 11.649818], 2 : [-9.956527, -46.119743, 1.003367], 3 : [-31.175775, -41.743273, 15.241286]}
                antennas_phase_hpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.057717, 0.065283, 0.261789], 2 : [0.080427, 0.046084, 0.282382], 3 : [0.084447, 0.065313, 0.276901]}

            elif deploy_index == 2:
                '''
                #These are the ones I got by flipping channel 2
                antennas_phase_hpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-28.231754, -13.562168, 9.068510], 2 : [-9.735529, -45.985775, -0.088781], 3 : [-31.298949, -42.571000, 13.874803]}                                                          
                antennas_phase_hpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.066406, 0.054628, 0.148034], 2 : [0.033279, 0.044264, 0.117928], 3 : [0.034486, 0.038190, 0.096574]} 
                antennas_phase_vpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-30.466405, -12.754674, 11.112169], 2 : [-10.727788, -46.128595, -1.850623], 3 : [-31.569865, -42.169063, 13.027888]}                                                        
                antennas_phase_vpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.024673, 0.039216, 0.162412], 2 : [0.041817, 0.028456, 0.215791], 3 : [0.038274, 0.035657, 0.180371]} 
                '''
                '''
                #These are the ones that I had prior to 11/21/2019
                antennas_phase_vpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-30.401760, -12.621386, 10.810656], 2 : [-10.372617, -46.301546, -0.381405], 3 : [-31.261194, -42.193276, 14.412270]}
                antennas_phase_vpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.042055, 0.048239, 0.254382], 2 : [0.069051, 0.034678, 0.330481], 3 : [0.065562, 0.049100, 0.276208]}

                antennas_phase_hpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-29.979756, -12.405349, 9.822749], 2 : [-9.619360, -46.467924, 2.456841], 3 : [-31.138537, -41.778211, 14.606688]}
                antennas_phase_hpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.051475, 0.064251, 0.278799], 2 : [0.078516, 0.049043, 0.293481], 3 : [0.085002, 0.073460, 0.303864]}

                '''

                #These are from the first 6 planes found. 
                # antennas_phase_hpol = {0 : [259.993245, 787.655542, 437.666287], 1 : [259.993245, 787.655542, 437.666287], 2 : [283.612514, 755.111988, 431.073474], 3 : [261.116575, 757.466770, 437.434022]}
                # antennas_phase_hpol_hesse = {0 : [0.045983, 0.129863, 0.037608], 1 : [0.045983, 0.129863, 0.037608], 2 : [0.046190, 0.130497, 0.037696], 3 : [0.045993, 0.129540, 0.037607]}

                # antennas_phase_hpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-32.940076, -15.159404, 13.220501], 2 : [-9.459576, -48.470314, 9.195625], 3 : [-31.800885, -44.470317, 16.231648]}
                # antennas_phase_hpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.010150, 0.021543, 0.007624], 2 : [0.010652, 0.025185, 0.008330], 3 : [0.009642, 0.020038, 0.006959]}

                #These include the next 6, specifically calibrated to be W sensitive. #currently the best for planes found in west
                antennas_phase_hpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-32.940076, -15.159404, 13.220501], 2 : [-9.459576, -48.470314, 9.195625], 3 : [-31.800885, -44.470317, 16.231648]}
                antennas_phase_hpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.010150, 0.021543, 0.007624], 2 : [0.010652, 0.025185, 0.008330], 3 : [0.009642, 0.020038, 0.006959]}
                antennas_phase_vpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-31.224503, -13.170500, 10.000003], 2 : [-9.765921, -46.417296, 3.205128], 3 : [-31.080523, -42.279361, 12.014143]}
                antennas_phase_vpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.037041, 0.074031, 4.992054], 2 : [0.023776, 0.044105, 0.048783], 3 : [0.027407, 0.050578, 0.057576]}
            elif deploy_index == 3:
                #Here I am just rerunning the time delays from the pulser, and also letting the cable delays vary.  I am only doing a simple chi^2 (Just the adjustedChi^2)
                antennas_phase_hpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-30.568717, -12.446193, 10.212559], 2 : [-9.692826, -46.525891, 2.602984], 3 : [-31.642232, -41.937230, 15.393675]}
                antennas_phase_hpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.067854, 0.057468, 0.200232], 2 : [0.023387, 0.025701, 0.123221], 3 : [0.022399, 0.009549, 0.082992]}

                antennas_phase_vpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-31.334960, -12.928318, 15.911683], 2 : [-10.717905, -46.442935, 0.488731], 3 : [-31.672917, -42.311738, 15.209071]}
                antennas_phase_vpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.022266, 0.010907, 0.128100], 2 : [0.024116, 0.014593, 0.176512], 3 : [0.026911, 0.013143, 0.139782]}
            elif deploy_index == 4:
                #hpol calibration based solely off of matching Solar Plant calibration
                antennas_phase_hpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-34.482512, -16.819514, 13.000502], 2 : [-6.612918, -45.580198, 11.070150], 3 : [-30.208161, -42.804228, 13.270912]}
                antennas_phase_hpol_hesse = {0 : [0.100000, 0.100000, 0.100000], 1 : [3.715818, 3.611556, 4.597339], 2 : [5.816696, 5.086424, 5.437195], 3 : [4.455286, 4.555449, 3.064820]}

                antennas_phase_vpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-34.224499, -16.170499, 12.999983], 2 : [-9.338844, -45.953347, 0.917863], 3 : [-31.007327, -42.196964, 12.929773]}
                antennas_phase_vpol_hesse = {0 : [0.100000, 0.100000, 0.100000], 1 : [0.129504, 0.136716, 4.293571], 2 : [2.441008, 4.373686, 3.341286], 3 : [2.412784, 2.502000, 3.880752]}
            elif deploy_index == 5:
                #Hpol uses the following sources
                #use_sources = ['Quarry Substation','Palmetto Cell Tower','Goldfield KGFN-FM','Silver Peak Substation']
                antennas_phase_hpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-37.482512, -13.819514, 16.000502], 2 : [-7.382560, -44.541828, 14.070150], 3 : [-33.208161, -39.804228, 16.270912]}
                antennas_phase_hpol_hesse = {0 : [0.100000, 0.100000, 0.100000], 1 : [0.003555, 0.170239, 0.097863], 2 : [0.108990, 0.235702, 0.799819], 3 : [0.004331, 0.041649, 0.105451]}
                #Vpol uses the following sources
                #
            elif deploy_index == 6:
                #Southern hpol calibration using ['East Dyer Substation','Goldfield KGFN-FM','Silver Peak Substation']
                antennas_phase_hpol = {0 : [5.000000, -5.000000, 0.000000], 1 : [-34.908104, -10.002345, 16.649818], 2 : [-10.030078, -45.396969, 6.003367], 3 : [-34.535026, -36.743273, 20.241286]}
                antennas_phase_hpol_hesse = {0 : [0.011569, 0.048381, 0.050000], 1 : [0.011566, 0.394467, 0.268665], 2 : [0.112954, 0.401714, 0.596043], 3 : [0.110909, 0.048557, 0.549806]}
                #Southern vpol ['East Dyer Substation','Goldfield KGFN-FM']
                antennas_phase_vpol = {0 : [4.999999, -4.999999, 0.000000], 1 : [-35.307267, -9.499658, 16.411193], 2 : [-9.729938, -42.427576, 4.534545], 3 : [-34.426753, -37.069610, 19.812659]}
                antennas_phase_vpol_hesse = {0 : [0.017758, 0.035716, 0.050000], 1 : [0.017726, 0.549810, 0.388825], 2 : [1.513986, 2.623749, 9.713300], 3 : [0.134422, 0.035845, 0.402331]}

            elif deploy_index == 7:
                #Northern hpol calibration using ['Tonopah KTPH','Solar Plant','Silver Peak Substation']
                antennas_phase_hpol = {0 : [5.000000, -5.000000, 0.000000], 1 : [-33.689692, -15.002345, 21.649818], 2 : [-11.494760, -46.163473, 1.003367], 3 : [-33.922477, -41.471350, 15.241288]}
                antennas_phase_hpol_hesse = {0 : [0.050000, 0.050000, 0.050000], 1 : [0.144083, 0.098881, 7.940934], 2 : [0.338200, 0.531446, 2.016936], 3 : [0.339069, 0.524670, 9.907052]}
                #Northern vpol ['Tonopah KTPH','Solar Plant']
                antennas_phase_vpol = {0 : [4.999999, -4.999999, 0.000000], 1 : [-34.603054, -14.499658, 21.411172], 2 : [-13.467258, -43.818630, 8.089366], 3 : [-35.052678, -40.378028, 22.496440]}
                antennas_phase_vpol_hesse = {0 : [0.050000, 0.050000, 0.050000], 1 : [0.186809, 0.170799, 6.939977], 2 : [0.761651, 2.035546, 7.680443], 3 : [0.754464, 1.907757, 5.935745]}
            elif deploy_index == 8:
                #This uses the sources used for both the southern and northern calibrations above
                # hpol : ['East Dyer Substation','Goldfield KGFN-FM','Tonopah KTPH','Solar Plant','Silver Peak Substation']
                # vpol : ['East Dyer Substation','Goldfield KGFN-FM','Tonopah KTPH','Solar Plant']
                antennas_phase_hpol = {0 : [5.000000, -5.000000, 0.000000], 1 : [-35.499550, -12.062215, 21.649776], 2 : [-10.363603, -46.707683, 11.003365], 3 : [-34.919269, -38.689617, 25.241286]}
                antennas_phase_hpol_hesse = {0 : [0.050000, 0.050000, 0.050000], 1 : [0.128056, 0.264925, 8.677112], 2 : [0.128084, 0.264799, 1.257417], 3 : [0.128088, 0.264868, 0.600729]}

                antennas_phase_vpol = {0 : [4.999999, -4.999999, 0.000000], 1 : [-36.058825, -12.207762, 21.411190], 2 : [-10.579375, -46.727175, 9.534532], 3 : [-35.094910, -39.333878, 24.812656]}
                antennas_phase_vpol_hesse = {0 : [0.050000, 0.050000, 0.050000], 1 : [0.137129, 0.265938, 1.316943], 2 : [0.137083, 0.265485, 1.881641], 3 : [0.137130, 0.265949, 0.504853]}
            elif deploy_index == 9:
                #This uses the airplane data ignoring sources in the East.  
                #Western Hpol calibration
                antennas_phase_hpol = {0 : [5.000000, -5.000000, 0.000000], 1 : [-29.499550, -18.062215, 15.649776], 2 : [-5.412771, -50.968447, 11.312891], 3 : [-28.919269, -44.689617, 19.241286]}
                antennas_phase_hpol_hesse = {0 : [0.100000, 0.100000, 0.100000], 1 : [0.000994, 0.001836, 0.000453], 2 : [0.052628, 0.117427, 0.041269], 3 : [0.000234, 0.000440, 0.000199]}
                #Western Vpol calibration
                antennas_phase_vpol = {0 : [4.999999, -4.999999, 0.000000], 1 : [-30.058825, -18.207762, 15.411190], 2 : [-7.416143, -51.399893, 9.940570], 3 : [-29.094910, -45.333878, 18.812656]}
                antennas_phase_vpol_hesse = {0 : [0.100000, 0.100000, 0.100000], 1 : [0.002770, 0.007155, 0.002050], 2 : [0.093939, 0.138281, 0.121274], 3 : [0.000847, 0.001238, 0.001117]}
        elif deploy_index > 9 and deploy_index <= 11:
            #For these deploy indices I am attempting to be more sure of which elevation metric is being used, and ensuring it is properly handled.
            #The origin of coordinates are coming from a picture taken near the base of antenna 0 on a OnePlus 6T, which **I THINK** uses MSL elevation (then adjusted below to be WGS84)
            origin = loadAntennaZeroLocation(deploy_index = deploy_index)
            #The offset between MSL and WGS84 onsite according to pulsing data averages to MSL = WGS84 + 26.356m, so I am subtracting the offset such that datum is WGS84
            # A0Location = (37.0 + 35.0/60.0 + 21.6528/3600, -(118. + 14.0/60.0 + 15.4715/3600.0), 3850.333 - 26.356) #6ft below antennas, ~3ft to the side (north east ish)
            # A1Location = (37.5892, -118.2380, 3862.776 - 26.356) #No good photos for elevation.  Could be off on this one, this is from a picture taken at approximately the same height?  GPS come from pictures and google maps.  Likely too high.
            # A2Location = (37.0 + 35.0/60.0 + 19.9643/3600, -(118. + 14.0/60.0 + 15.9971/3600.0), 3857.583 - 26.356) #6ft below antennas, ~3ft to the side (north east ish)
            # A3Location = (37.0 + 35.0/60.0 + 20.1155/3600, -(118. + 14.0/60.0 + 16.7496/3600.0), 3859.079 - 26.356) #Slightly downhill south, closer to antenna

            #plotting these makes me think that antenna 2 is not low enough?  Hopefully that fixes in a calibration?  
            print('Antenna Physical location elevations from photos with OnePlus 6t using a false assumption that it is MSL (so doing elevation - 26.356 to get what was suspected to be WGS84 but was not)')
            antennas_physical_latlon = {0:origin,1:(37.5892, -118.2380, 3862.776 - 26.356),2:(37.0 + 35.0/60.0 + 19.9643/3600, -(118. + 14.0/60.0 + 15.9971/3600.0), 3857.583 - 26.356),3:(37.0 + 35.0/60.0 + 20.1155/3600, -(118. + 14.0/60.0 + 16.7496/3600.0), 3859.079 - 26.356)} #MSL mostly derived from pictures taken with a OnePlus 6t phone, then converted to WGS84 by subtracting measured offset from pulsing site gps
            antennas_physical = {}
            for key, location in antennas_physical_latlon.items():
                antennas_physical[key] = pm.geodetic2enu(location[0],location[1],location[2],origin[0],origin[1],origin[2])

            if deploy_index == 10:
                #Errors not currently used.
                antennas_phase_vpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-30.307267, -12.610417, 11.411196], 2 : [-10.464510, -46.217141, -0.229276], 3 : [-31.172820, -42.069610, 14.812669]}
                antennas_phase_vpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.042770, 0.047592, 0.232313], 2 : [0.069353, 0.034351, 0.297275], 3 : [0.065285, 0.047254, 0.249236]}
                antennas_phase_hpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-29.908104, -12.713682, 11.649818], 2 : [-9.956527, -46.119743, 1.003367], 3 : [-31.175775, -41.743273, 15.241286]}
                antennas_phase_hpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.057717, 0.065283, 0.261789], 2 : [0.080427, 0.046084, 0.282382], 3 : [0.084447, 0.065313, 0.276901]}
            elif deploy_index == 11:
                #Using only pulsers based on deploy_index 10.  Has large error in z.
                antennas_phase_hpol = {0 : [0.000000, 0.000000, -4.999851], 1 : [-33.368096, -13.390900, 16.719218], 2 : [-7.939456, -48.869670, 12.249774], 3 : [-31.401009, -43.024315, 13.745746]}
                antennas_phase_hpol_hesse = {0 : [1.000000, 1.000000, 7.550356], 1 : [0.899323, 0.590841, 5.101403], 2 : [0.194723, 0.190567, 1.998298], 3 : [0.166002, 0.195414, 6.334229]}
                antennas_phase_vpol = {0 : [0.000000, 0.000000, 4.999999], 1 : [-32.828532, -13.166628, 9.409578], 2 : [-7.902534, -48.485135, 2.249786], 3 : [-28.853200, -43.872502, 13.687206]}
                antennas_phase_vpol_hesse = {0 : [1.000000, 1.000000, 7.807538], 1 : [0.854570, 0.469628, 8.731584], 2 : [0.248426, 0.184186, 7.639721], 3 : [0.779508, 0.313825, 5.027621]}

        elif deploy_index == 12:
            #For these deploy indices I am attempting to be more sure of which elevation metric is being used, and ensuring it is properly handled.
            #Plotting the reported coordinates of every photo I took on the hillside, including those beside the pulsing site 1, I believe the oneplus 6T reports in WGS84.
            origin = loadAntennaZeroLocation(deploy_index = deploy_index)
            # A0Location = (37.0 + 35.0/60.0 + 21.6528/3600, -(118. + 14.0/60.0 + 15.4715/3600.0), 3850.333) #6ft below antennas, ~3ft to the side (north east ish)
            # A1Location = (37.5892, -118.2380, 3862.776) #No good photos for elevation.  Could be off on this one, this is from a picture taken at approximately the same height?  GPS come from pictures and google maps.  Likely too high.
            # A2Location = (37.0 + 35.0/60.0 + 19.9643/3600, -(118. + 14.0/60.0 + 15.9971/3600.0), 3857.583) #6ft below antennas, ~3ft to the side (north east ish)
            # A3Location = (37.0 + 35.0/60.0 + 20.1155/3600, -(118. + 14.0/60.0 + 16.7496/3600.0), 3859.079) #Slightly downhill south, closer to antenna

            #plotting these makes me think that antenna 2 is not low enough?  Hopefully that fixes in a calibration?  
            print('Antenna Physical location elevations from photos with OnePlus 6t interpreted as WGS84')
            antennas_physical_latlon = {0:origin,1:(37.5892, -118.2380, 3862.776 ),2:(37.0 + 35.0/60.0 + 19.9643/3600, -(118. + 14.0/60.0 + 15.9971/3600.0), 3857.583 ),3:(37.0 + 35.0/60.0 + 20.1155/3600, -(118. + 14.0/60.0 + 16.7496/3600.0), 3859.079 )} 

            antennas_physical = {}
            for key, location in antennas_physical_latlon.items():
                antennas_physical[key] = pm.geodetic2enu(location[0],location[1],location[2],origin[0],origin[1],origin[2])
            #Errors not currently used.
            print('Using best guess physical as both phase locations as well!')
            antennas_phase_vpol = {0 : [antennas_physical[0][0],antennas_physical[0][1],antennas_physical[0][2]], 1 : [antennas_physical[1][0],antennas_physical[1][1],antennas_physical[1][2]], 2 : [antennas_physical[2][0],antennas_physical[2][1],antennas_physical[2][2]], 3 : [antennas_physical[3][0],antennas_physical[3][1],antennas_physical[3][2]]}
            antennas_phase_vpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.000000, 0.000000, 0.000000], 2 : [0.000000, 0.000000, 0.000000], 3 : [0.000000, 0.000000, 0.000000]}
            antennas_phase_hpol = {0 : [antennas_physical[0][0],antennas_physical[0][1],antennas_physical[0][2]], 1 : [antennas_physical[1][0],antennas_physical[1][1],antennas_physical[1][2]], 2 : [antennas_physical[2][0],antennas_physical[2][1],antennas_physical[2][2]], 3 : [antennas_physical[3][0],antennas_physical[3][1],antennas_physical[3][2]]}
            antennas_phase_hpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.000000, 0.000000, 0.000000], 2 : [0.000000, 0.000000, 0.000000], 3 : [0.000000, 0.000000, 0.000000]}
        
        elif deploy_index >= 13 and deploy_index <= 22:
            #These positions from from photo_gps.py, which was used to make a plane model of the hillside based on GPS coordinates of
            #cell phone pictures.  The GPS coordinates are then input in this plane to calculate the altitudes.  
            # ENU calculated below relative to deploy_index == 1
            # Antenna 0
            # (E, N, U)       : (0.000000,0.000000,-22.687778)
            # (lat, lon, alt) : (37.589310,-118.237621,3852.842222)
            # Antenna 1
            # (E, N, U)       : (-33.493731,-12.216161,-2.989690)
            # (lat, lon, alt) : (37.589200,-118.238000,3872.540409)
            # Antenna 2
            # (E, N, U)       : (-8.660669,-44.533633,-26.183296)
            # (lat, lon, alt) : (37.588909,-118.237719,3849.346866)
            # Antenna 3
            # (E, N, U)       : (-32.168224,-43.200941,-10.301701)
            # (lat, lon, alt) : (37.588921,-118.237985,3865.228526)
            origin = loadAntennaZeroLocation(deploy_index = deploy_index)
            print('Antenna Physical location elevations from plane fit to gps coordinates from photos with OnePlus 6t interpreted as WGS84')
            antennas_physical_latlon = {0:origin,1:(37.589200,-118.238000,3872.540409),2:(37.588909,-118.237719,3849.346866),3:(37.588921,-118.237985,3865.228526)} 

            antennas_physical = {}
            for key, location in antennas_physical_latlon.items():
                antennas_physical[key] = pm.geodetic2enu(location[0],location[1],location[2],origin[0],origin[1],origin[2])
            #Errors not currently used.
            if deploy_index == 13:
                print('Using best guess physical as both phase locations as well!')
                antennas_phase_vpol = {0 : [antennas_physical[0][0],antennas_physical[0][1],antennas_physical[0][2]], 1 : [antennas_physical[1][0],antennas_physical[1][1],antennas_physical[1][2]], 2 : [antennas_physical[2][0],antennas_physical[2][1],antennas_physical[2][2]], 3 : [antennas_physical[3][0],antennas_physical[3][1],antennas_physical[3][2]]}
                antennas_phase_vpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.000000, 0.000000, 0.000000], 2 : [0.000000, 0.000000, 0.000000], 3 : [0.000000, 0.000000, 0.000000]}
                antennas_phase_hpol = {0 : [antennas_physical[0][0],antennas_physical[0][1],antennas_physical[0][2]], 1 : [antennas_physical[1][0],antennas_physical[1][1],antennas_physical[1][2]], 2 : [antennas_physical[2][0],antennas_physical[2][1],antennas_physical[2][2]], 3 : [antennas_physical[3][0],antennas_physical[3][1],antennas_physical[3][2]]}
                antennas_phase_hpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.000000, 0.000000, 0.000000], 2 : [0.000000, 0.000000, 0.000000], 3 : [0.000000, 0.000000, 0.000000]}
            elif deploy_index == 14:
                antennas_phase_hpol = {0 : [-0.171160, 1.999962, -3.377134], 1 : [-34.009522, -10.993301, 10.040922], 2 : [-7.848979, -46.517627, 4.278406], 3 : [-32.649573, -41.250262, 16.077983]}
                antennas_phase_hpol_hesse = {0 : [0.652427, 3.986116, 4.445558], 1 : [0.699547, 0.223363, 15.134269], 2 : [0.660478, 0.795400, 3.666424], 3 : [0.707570, 0.270289, 3.338366]}
                
                antennas_phase_vpol = {0 : [-1.424875, 1.992824, 7.248382], 1 : [-33.783376, -11.218451, 11.753426], 2 : [-7.280174, -46.531850, 2.117580], 3 : [-30.760044, -42.275804, 15.503537]}
                antennas_phase_vpol_hesse = {0 : [0.795334, 3.995309, 12.736719], 1 : [0.874418, 0.546834, 11.724445], 2 : [0.814953, 2.000217, 4.394386], 3 : [0.855157, 0.555719, 4.022556]}

            elif deploy_index == 15:
                antennas_phase_hpol_hesse = {0 : [1.107598, 1.155382, 8.290938], 1 : [1.208719, 1.214783, 5.448297], 2 : [1.184062, 1.182823, 9.523712], 3 : [1.251305, 1.219051, 7.934458]}
                antennas_phase_vpol_hesse = {0 : [0.286134, 0.170131, 1.475580], 1 : [0.630060, 0.204455, 9.826477], 2 : [0.283998, 0.178813, 1.356786], 3 : [0.282316, 0.180412, 1.246523]}

                antennas_phase_hpol = {0 : [-0.121226, 1.755070, -4.164016], 1 : [-33.783739, -12.067049, 14.709302], 2 : [-6.931436, -47.135687, 0.600605], 3 : [-30.835281, -42.606386, 14.853267]}
                antennas_phase_vpol = {0 : [-0.442439, 1.784501, -3.595621], 1 : [-34.121366, -11.965828, 14.797254], 2 : [-7.324517, -47.078042, 0.728544], 3 : [-30.611585, -42.820426, 14.415308]}
            elif deploy_index == 16:
                #This set of coordinates DOES NOT COME FROM CHI^2. 
                #This is meant as input.  Essentially starting with the relative antenna positions achieved using airplane 
                #data in the past, but ensuring that antenna 0/the array is at the newly defined elevation.  The relative
                #positions come from calibration 2.

                #These include the next 6, specifically calibrated to be W sensitive. #currently the best for planes found in west
                antennas_phase_hpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-32.940076, -15.159404, 13.220501], 2 : [-9.459576, -48.470314, 9.195625], 3 : [-31.800885, -44.470317, 16.231648]}
                antennas_phase_hpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.010150, 0.021543, 0.007624], 2 : [0.010652, 0.025185, 0.008330], 3 : [0.009642, 0.020038, 0.006959]}
                antennas_phase_vpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-31.224503, -13.170500, 10.000003], 2 : [-9.765921, -46.417296, 3.205128], 3 : [-31.080523, -42.279361, 12.014143]}
                antennas_phase_vpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.037041, 0.074031, 4.992054], 2 : [0.023776, 0.044105, 0.048783], 3 : [0.027407, 0.050578, 0.057576]}
            elif deploy_index == 17:
                #This is using valley sources same as 8, but starting from 13. Results in time delays semi reasonable. 
                #Saved and intended for use as a starting condition for low movement of just pulser data. 
                antennas_phase_hpol = {0 : [-4.865278, 3.214076, 4.630806], 1 : [-32.974217, -15.411447, 22.795159], 2 : [-10.943711, -45.497623, -4.818512], 3 : [-32.061146, -42.722525, 9.177065]}
                antennas_phase_hpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.000000, 0.000000, 0.000000], 2 : [0.000000, 0.000000, 0.000000], 3 : [0.000000, 0.000000, 0.000000]}
                antennas_phase_vpol = {0 : [-4.530553, 3.253017, 4.554258], 1 : [-31.055576, -16.501015, 24.679216], 2 : [-10.686676, -45.258288, -5.432522], 3 : [-31.480157, -42.663642, 9.087964]}
                antennas_phase_vpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.000000, 0.000000, 0.000000], 2 : [0.000000, 0.000000, 0.000000], 3 : [0.000000, 0.000000, 0.000000]}
            elif deploy_index == 18:
                #This set of coordinates DOES NOT COME FROM CHI^2. 
                #This is meant as input.  Essentially starting with the relative antenna positions achieved using valley sources 
                #(literally deploy_index 8), but with the origin set to match 13. 
                #data in the past, but ensuring that antenna 0/the array is at the newly defined elevation.  The relative
                #positions come from calibration 2.

                #These include the next 6, specifically calibrated to be W sensitive. #currently the best for planes found in west
                antennas_phase_hpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-32.940076, -15.159404, 13.220501], 2 : [-9.459576, -48.470314, 9.195625], 3 : [-31.800885, -44.470317, 16.231648]}
                antennas_phase_hpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.010150, 0.021543, 0.007624], 2 : [0.010652, 0.025185, 0.008330], 3 : [0.009642, 0.020038, 0.006959]}
                antennas_phase_vpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-31.224503, -13.170500, 10.000003], 2 : [-9.765921, -46.417296, 3.205128], 3 : [-31.080523, -42.279361, 12.014143]}
                antennas_phase_vpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.037041, 0.074031, 4.992054], 2 : [0.023776, 0.044105, 0.048783], 3 : [0.027407, 0.050578, 0.057576]}
            elif deploy_index == 19:
                #This one works well for the 3 pulsers (which it is based on) and has good results for all antennas but antenna 0 in the valley.
                #Rerunning with this as starting ocndition but with antenna 0 allowed to move. 
                antennas_phase_hpol = {0 : [2.703403, -0.727873, 2.927082], 1 : [-28.493635, -14.166269, 14.698087], 2 : [-5.072297, -49.533393, 1.504482], 3 : [-27.537450, -44.914837, 17.271776]}
                antennas_phase_hpol_hesse = {0 : [0.760297, 0.277011, 5.718408], 1 : [1.583672, 0.196639, 0.419612], 2 : [0.171910, 6.326707, 0.502885], 3 : [0.658066, 0.254736, 9.730493]}
                antennas_phase_vpol = {0 : [2.531864, -0.815938, 4.787836], 1 : [-28.560448, -14.142631, 14.698089], 2 : [-5.005754, -49.488358, 1.504481], 3 : [-27.190815, -45.237602, 17.383858]}
                antennas_phase_vpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.000000, 0.000000, 0.000000], 2 : [0.000000, 0.000000, 0.000000], 3 : [0.000000, 0.000000, 0.000000]}
            elif deploy_index == 20:
                #Similar in effect to 19 but with slightly different antenna locations and cable delays.  
                #This one works well for the 3 pulsers (which it is based on) and has good results for all antennas but antenna 0 in the valley.
                #Rerunning with this as starting ocndition but with antenna 0 allowed to move. 
                '''
                #Starting from deploy_index 13
                #Parameters trying to achieve the 3 antenna match starting from deploy_index = 13.
                include_pulsers = True 
                include_baseline_measurements = False
                baseline_measurement_uncertainty_m = 3 #Assuming a 3m spread in our data.  This is very approximate.
                time_delay_measurement_uncertainty_ns = 25 #ns, The time window used to as error in chi^2 for time delay.  If you are assuming that the time delays are 100% accurate then this is usually sub ns.  But if you think it is slipping cycles you could give this a larger value. 
                include_sanity = True #Slow
                plot_predicted_time_shifts = False
                random_offset_amount = 0.25 #m (every antenna will be stepped randomly by this amount.  Set to 0 if you don't want this. ), Note that this is applied to 
                included_antennas_lumped = [0,1,2,3] #If an antenna is not in this list then it will not be included in the chi^2 (regardless of if it is fixed or not)  Lumped here imlies that antenna 0 in this list means BOTH channels 0 and 1 (H and V of crossed dipole antenna 0).
                included_antennas_channels = numpy.concatenate([[2*i,2*i+1] for i in included_antennas_lumped])
                include_baselines = [0,1,2,3,4,5] #Basically sets the starting condition of which baselines to include, then the lumped channels and antennas will cut out further from that.  The above options of excluding antennas will override this to exclude baselines, but if both antennas are included but the baseline is not then it will not be included.  Overwritten when antennas removed.
                plot_overlap = True #Will plot the overlap map for time delays from each source.
                overlap_window_ns = 50 #ns The time window used to define sufficient overlap. 
                overlap_goal = overlap_window_ns*len(included_antennas_channels)*len(use_sources) #This shouldn't be varied, vary the error if anything.  This is the portion of chi^2 coming from overlapping valley source time delays.  The measured map max will be subtracted from this in a chi^2 calculation.  
                overlap_error = overlap_goal/50 #The error portion of chi^2 coming from overlapping valley source time delays will be devided by this number.
                limit_array_plane_azimuth_range = False #Should be seen as a temporary test.  Doesn't use any errors and isn't in standard chi^2 format.
                allowed_array_plane_azimuth_range = 20 #plus or minus this from East is not impacted by weighting. 

                #Limits 
                initial_step_x = 0.5#75 #m
                initial_step_y = 0.5#75 #m
                initial_step_z = 0.5#5 #m
                initial_step_cable_delay = 1.0 #ns
                cable_delay_guess_range = 10 #ns
                antenna_position_guess_range_x = 5#2#4 #Limit to how far from input phase locations to limit the parameter space to
                antenna_position_guess_range_y = 5#2#7 #Limit to how far from input phase locations to limit the parameter space to
                antenna_position_guess_range_z = 5#3 #Limit to how far from input phase locations to limit the parameter space to

                #Manually shifting input of antenna 0 around so that I can find a fit that has all of its baselines visible for valley sources. 
                manual_offset_ant0_x = 0
                manual_offset_ant0_y = 0
                manual_offset_ant0_z = 0


                fix_ant0_x = False
                fix_ant0_y = False
                fix_ant0_z = False
                fix_ant1_x = False
                fix_ant1_y = False
                fix_ant1_z = False
                fix_ant2_x = False
                fix_ant2_y = False
                fix_ant2_z = False
                fix_ant3_x = False
                fix_ant3_y = False
                fix_ant3_z = False
                fix_cable_delay0 = False
                fix_cable_delay1 = False
                fix_cable_delay2 = False
                fix_cable_delay3 = False
                '''
                antennas_phase_hpol = {0 : [-0.982288, 1.447974, 4.762703], 1 : [-34.051753, -12.072183, 14.698504], 2 : [-7.246353, -47.198002, 1.340104], 3 : [-31.114755, -42.627657, 14.924516]}
                antennas_phase_hpol_hesse = {0 : [0.351842, 0.260876, 7.831570], 1 : [0.504778, 0.276552, 7.620909], 2 : [0.354478, 0.265431, 8.304336], 3 : [0.354914, 0.273275, 1.883443]}
                antennas_phase_vpol = {0 : [-0.784322, 1.765724, 1.553684], 1 : [-34.153473, -11.806226, 15.018032], 2 : [-7.391859, -46.958796, 1.473361], 3 : [-30.656309, -42.670223, 14.731633]}
                antennas_phase_vpol_hesse = {0 : [0.682632, 0.613462, 3.806129], 1 : [0.718409, 0.646417, 8.186476], 2 : [0.696899, 0.646127, 8.174901], 3 : [0.714915, 0.643952, 3.290147]}
            elif deploy_index == 21:
                #Using relative positions from deploy 1 with z of deploy 13
                antennas_phase_vpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-30.307267, -12.610417, 11.411196], 2 : [-10.464510, -46.217141, -0.229276], 3 : [-31.172820, -42.069610, 14.812669]}
                antennas_phase_vpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.042770, 0.047592, 0.232313], 2 : [0.069353, 0.034351, 0.297275], 3 : [0.065285, 0.047254, 0.249236]}
                antennas_phase_hpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-29.908104, -12.713682, 11.649818], 2 : [-9.956527, -46.119743, 1.003367], 3 : [-31.175775, -41.743273, 15.241286]}
                antennas_phase_hpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.057717, 0.065283, 0.261789], 2 : [0.080427, 0.046084, 0.282382], 3 : [0.084447, 0.065313, 0.276901]}
            elif deploy_index == 22:
                '''
                This one comes from starting with 13, then manually shifting antennas around.  Limiting cable delay variation
                and locking down the position of antenna 0, and using only valley sources.

                pulser_weight = 0.0 #Each pulsing site worth this % as much as a valley source.
                unknown_source_dir_valley = False #If true then the chi^2 will not assume known arrival directions, but will instead just attempt to get overlap ANYWHERE for all selected populations.
                if mode == 'hpol':
                    use_sources = ['Tonopah Airport Antenna','Tonopah AFS GATR Site','Dome Thing','Silver Peak Town Antenna']#['East Dyer Substation','Goldfield KGFN-FM','Tonopah KTPH','Solar Plant','Silver Peak Substation']#['Tonopah KTPH','Solar Plant','Silver Peak Substation']#'East Dyer Substation',
                    included_pulsers = ['run1507','run1509','run1511']#['run1507','run1509','run1511']#['run1509']#['run1507','run1509','run1511']#['run1507','run1509','run1511']#['run1507','run1509','run1511'] #Only included if include_pulsers == True
                elif mode == 'vpol':
                    use_sources = ['Tonopah Vortac','Tonopah AFS GATR Site']#'East Dyer Substation',
                    included_pulsers = ['run1507','run1509','run1511']#['run1507','run1509','run1511']#['run1507','run1509','run1511'] #Only included if include_pulsers == True



                #Parameters trying to achieve the 3 antenna match starting from deploy_index = 13.
                include_pulsers = True 
                include_baseline_measurements = True
                baseline_measurement_uncertainty_m = 3 #Assuming a 3m spread in our data.  This is very approximate.
                time_delay_measurement_uncertainty_ns = 1 #ns, The time window used to as error in chi^2 for time delay.  If you are assuming that the time delays are 100% accurate then this is usually sub ns.  But if you think it is slipping cycles you could give this a larger value. 
                include_sanity = False #Slow
                plot_predicted_time_shifts = False
                random_offset_amount = 0.1#0.25 #m (every antenna will be stepped randomly by this amount.  Set to 0 if you don't want this. ), Note that this is applied to 
                included_antennas_lumped = [0,1,2,3] #If an antenna is not in this list then it will not be included in the chi^2 (regardless of if it is fixed or not)  Lumped here imlies that antenna 0 in this list means BOTH channels 0 and 1 (H and V of crossed dipole antenna 0).
                included_antennas_channels = numpy.concatenate([[2*i,2*i+1] for i in included_antennas_lumped])
                include_baselines = [0,1,2,3,4,5] #Basically sets the starting condition of which baselines to include, then the lumped channels and antennas will cut out further from that.  The above options of excluding antennas will override this to exclude baselines, but if both antennas are included but the baseline is not then it will not be included.  Overwritten when antennas removed.
                plot_overlap = False #Will plot the overlap map for time delays from each source.
                overlap_window_ns = 50 #ns The time window used to define sufficient overlap. 
                overlap_goal = overlap_window_ns*len(included_antennas_channels)*len(use_sources) #This shouldn't be varied, vary the error if anything.  This is the portion of chi^2 coming from overlapping valley source time delays.  The measured map max will be subtracted from this in a chi^2 calculation.  
                overlap_error = overlap_goal/50 #The error portion of chi^2 coming from overlapping valley source time delays will be devided by this number.
                limit_array_plane_azimuth_range = False #Should be seen as a temporary test.  Doesn't use any errors and isn't in standard chi^2 format.
                allowed_array_plane_azimuth_range = 20 #plus or minus this from East is not impacted by weighting. 

                #Limits 
                initial_step_x = 0.75 #m
                initial_step_y = 0.75 #m
                initial_step_z = 0.5 #m
                initial_step_cable_delay = 0.25 #ns
                cable_delay_guess_range = 3 #ns
                antenna_position_guess_range_x = 5#4#2#4 #Limit to how far from input phase locations to limit the parameter space to
                antenna_position_guess_range_y = 5#4#2#7 #Limit to how far from input phase locations to limit the parameter space to
                antenna_position_guess_range_z = 5#2#3 #Limit to how far from input phase locations to limit the parameter space to

                #Manually shifting input of antenna 0 around so that I can find a fit that has all of its baselines visible for valley sources. 
                manual_offset_ant0_x = 0#14
                manual_offset_ant0_y = 0#-2.7
                manual_offset_ant0_z = 0#-17

                manual_offset_ant1_x = -1#0    + manual_offset_ant0_x
                manual_offset_ant1_y = 5#-2   + manual_offset_ant0_y
                manual_offset_ant1_z = 0#0    + manual_offset_ant0_z

                manual_offset_ant2_x = 0#0    + manual_offset_ant0_x
                manual_offset_ant2_y = -5#-4   + manual_offset_ant0_y
                manual_offset_ant2_z = 12#0    + manual_offset_ant0_z

                manual_offset_ant3_x = -3#0    + manual_offset_ant0_x
                manual_offset_ant3_y = 0#0    + manual_offset_ant0_y
                manual_offset_ant3_z = 3#-6   + manual_offset_ant0_z


                fix_ant0_x = True
                fix_ant0_y = True
                fix_ant0_z = True
                fix_ant1_x = False
                fix_ant1_y = False
                fix_ant1_z = False
                fix_ant2_x = False
                fix_ant2_y = False
                fix_ant2_z = False
                fix_ant3_x = False
                fix_ant3_y = False
                fix_ant3_z = False
                fix_cable_delay0 = True
                fix_cable_delay1 = False
                fix_cable_delay2 = False
                fix_cable_delay3 = False
                '''
                antennas_phase_hpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-39.493623, -4.905741, 14.698088], 2 : [-12.239970, -51.023459, 3.504483], 3 : [-37.662065, -38.394831, 10.386077]}
                antennas_phase_hpol_hesse = {0 : [0.750000, 0.750000, 0.500000], 1 : [1.981312, 0.439145, 7.869927], 2 : [0.222825, 0.508381, 7.186704], 3 : [0.225246, 0.502959, 6.634587]}
                antennas_phase_vpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-39.493635, -5.121617, 14.698087], 2 : [-12.425378, -50.901975, 7.789672], 3 : [-37.428109, -39.320700, 11.755655]}
                antennas_phase_vpol_hesse = {0 : [0.750000, 0.750000, 0.500000], 1 : [7.476337, 0.667707, 6.331664], 2 : [0.303953, 0.562640, 7.032839], 3 : [0.319401, 0.566975, 5.809684]}
        elif deploy_index >= 23:
            # This utilizes the google earth elevation profile data for relative positions, but utilizes the absolute elevation value given by the photo_gps.py script for antenna 0.
            #antennas_physical_latlon = {0:origin,1:(37.5892, -118.2380, 3890.77),2:(37.588909, -118.237719, 3881.02),3:(37.5889210, -118.2379850, 3887.42)} #ORIGINAL VALUES FROM GOOGLE MAPS AND ESTIMATES
            origin = loadAntennaZeroLocation(deploy_index = deploy_index)
            print('Antenna Physical location elevations from plane fit to gps coordinates from photos with OnePlus 6t interpreted as WGS84')

            original_z = 3875.53
            phone_z = 3852.842222


            antennas_physical_latlon =  {0:origin,1:(37.5892, -118.2380, 3890.77 - original_z + phone_z),2:(37.588909, -118.237719, 3881.02 - original_z + phone_z),3:(37.5889210, -118.2379850, 3887.42 - original_z + phone_z)} 
            antennas_physical = {}

            for key, location in antennas_physical_latlon.items():
                antennas_physical[key] = pm.geodetic2enu(location[0],location[1],location[2],origin[0],origin[1],origin[2])
            #Errors not currently used.
            if deploy_index == 23:
                print('Using best guess physical as both phase locations as well!')
                antennas_phase_vpol = {0 : [antennas_physical[0][0],antennas_physical[0][1],antennas_physical[0][2]], 1 : [antennas_physical[1][0],antennas_physical[1][1],antennas_physical[1][2]], 2 : [antennas_physical[2][0],antennas_physical[2][1],antennas_physical[2][2]], 3 : [antennas_physical[3][0],antennas_physical[3][1],antennas_physical[3][2]]}
                antennas_phase_vpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.000000, 0.000000, 0.000000], 2 : [0.000000, 0.000000, 0.000000], 3 : [0.000000, 0.000000, 0.000000]}
                antennas_phase_hpol = {0 : [antennas_physical[0][0],antennas_physical[0][1],antennas_physical[0][2]], 1 : [antennas_physical[1][0],antennas_physical[1][1],antennas_physical[1][2]], 2 : [antennas_physical[2][0],antennas_physical[2][1],antennas_physical[2][2]], 3 : [antennas_physical[3][0],antennas_physical[3][1],antennas_physical[3][2]]}
                antennas_phase_hpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.000000, 0.000000, 0.000000], 2 : [0.000000, 0.000000, 0.000000], 3 : [0.000000, 0.000000, 0.000000]}
            elif deploy_index == 24:
                #Made based of of khsv signal + 'Miller Substation','Tonopah AFS GATR Site' with unkown source directions.  Only works for antennas 0,1,3
                #antennas_phase_hpol = {0 : [0.000000, 0.000000, -4.990390], 1 : [-32.664553, -13.694597, 16.364447], 2 : [-8.660638, -44.533474, 5.489838], 3 : [-31.208945, -45.179683, 15.312945]}
                antennas_phase_hpol = {0 : [0.000000, 0.000000, -4.990390], 1 : [-32.664553, -13.694597, 20.239900], 2 : [-8.660638, -44.533474, 5.489838], 3 : [-31.208945, -45.179683, 15.312945]} #edited antenna 1 z to start where vpol was found to be. 
                antennas_phase_vpol = {0 : [0.000000, 0.000000, -5.000000], 1 : [-32.735165, -13.434077, 20.239900], 2 : [-8.660638, -44.533474, 5.489838], 3 : [-30.927869, -44.407966, 15.259098]}

                antennas_phase_hpol_hesse = {0 : [2.000000, 2.000000, 0.000000], 1 : [0.000000, 0.000000, 0.000000], 2 : [2.000000, 2.000000, 0.750000], 3 : [0.000000, 0.000000, 0.000000]}
                antennas_phase_vpol_hesse = {0 : [2.000000, 2.000000, 0.376409], 1 : [0.040986, 0.049558, 0.314455], 2 : [2.000000, 2.000000, 0.750000], 3 : [0.096819, 0.165549, 2.221534]}

                '''
                antennas_phase_vpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-33.188229, -13.605917, 15.280357], 2 : [-8.660638, -44.533474, 5.489838], 3 : [-31.142426, -44.937935, 17.380436]}
                antennas_phase_hpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-32.980772, -13.604003, 21.074896], 2 : [-8.660638, -44.533474, 5.489838], 3 : [-31.619148, -44.744242, 11.074111]}
                antennas_phase_vpol_hesse = {0 : [2.000000, 2.000000, 0.750000], 1 : [0.000000, 0.000000, 0.000000], 2 : [2.000000, 2.000000, 0.750000], 3 : [0.000000, 0.000000, 0.000000]}
                antennas_phase_hpol_hesse = {0 : [2.000000, 2.000000, 0.750000], 1 : [0.000300, 0.000360, 0.001686], 2 : [2.000000, 2.000000, 0.750000], 3 : [0.040703, 0.210699, 0.156562]}

                cable_delays_vpol = numpy.array([13.115628,15.781942,11.090487,10.848566])
                cable_delays_vpol_hesse = numpy.array([0.500000,0.000000,0.500000,0.000000])


                cable_delays_hpol = numpy.array([7.901212,11.040073,0.000000,6.786517])
                cable_delays_hpol_hesse = numpy.array([0.500000,0.000796,0.500000,0.249012])

                '''
            elif deploy_index == 25:
                #Starting from 24, but with more sources.  Still limited to 3 antennas. 
                '''
                ------------------------------------------------------------------
                | FCN = 0.0003234               |     Ncalls=931 (931 total)     |
                | EDM = 8.84e-05 (Goal: 0.0002) |            up = 1.0            |
                ------------------------------------------------------------------
                |  Valid Min.   | Valid Param.  | Above EDM | Reached call limit |
                ------------------------------------------------------------------
                |     True      |     True      |   False   |       False        |
                ------------------------------------------------------------------
                | Hesse failed  |   Has cov.    | Accurate  | Pos. def. | Forced |
                ------------------------------------------------------------------
                |     False     |     True      |   False   |   False   |  True  |
                ------------------------------------------------------------------
                --------------------------------------------------------------------------------------------------
                |   | Name         |   Value   | Hesse Err | Minos Err- | Minos Err+ | Limit-  | Limit+  | Fixed |
                --------------------------------------------------------------------------------------------------
                | 0 | ant0_x       |     0     |     2     |            |            |   -10   |   10    |  yes  |
                | 1 | ant0_y       |     0     |     2     |            |            |   -10   |   10    |  yes  |
                | 2 | ant0_z       |    0.0    |    0.8    |            |            |   -5    |    5    |  yes  |
                | 3 | ant1_x       |   -35.6   |    2.6    |    -3.7    |    13.1    |-43.4936 |-23.4936 |       |
                | 4 | ant1_y       |    -18    |     4     |     -4     |     16     |-22.2161 |-2.21612 |       |
                | 5 | ant1_z       |    20     |     6     |    -10     |     5      | 10.2399 | 20.2399 |       |
                | 6 | ant2_x       |   -8.7    |    2.0    |            |            |-18.6606 | 1.33936 |  yes  |
                | 7 | ant2_y       |   -44.5   |    2.0    |            |            |-54.5335 |-34.5335 |  yes  |
                | 8 | ant2_z       |    5.5    |    0.8    |            |            |0.489838 | 10.4898 |  yes  |
                | 9 | ant3_x       |   -30.0   |    2.6    |    -7.8    |    10.9    |-42.1681 |-22.1681 |       |
                | 10| ant3_y       |    -43    |     4     |    -10     |     10     |-53.2008 |-33.2008 |       |
                | 11| ant3_z       |    13     |     5     |     -7     |     4      | 6.88977 | 16.8898 |       |
                | 12| cable_delay0 |    7.9    |    0.1    |            |            | 4.90121 | 10.9012 |  yes  |
                | 13| cable_delay1 |   11.2    |    3.0    |    -3.7    |    3.7     | 9.00991 | 15.0099 |       |
                | 14| cable_delay2 |    0.0    |    0.1    |            |            |   -3    |    3    |  yes  |
                | 15| cable_delay3 |    8.4    |    4.5    |    -3.9    |    2.1     | 4.52048 | 10.5205 |       |
                --------------------------------------------------------------------------------------------------


                Copy-Paste Prints:
                ------------

                antennas_phase_hpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-35.627008, -18.143051, 20.169783], 2 : [-8.660638, -44.533474, 5.489838], 3 : [-30.001992, -43.078926, 12.520058]}
                antennas_phase_hpol_hesse = {0 : [2.000000, 2.000000, 0.750000], 1 : [13.102980, 14.054989, 5.158160], 2 : [2.000000, 2.000000, 0.750000], 3 : [10.944684, 15.051348, 6.694572]}

                cable_delays_hpol = numpy.array([7.901212,11.157171,0.000000,8.444916])
                cable_delays_hpol_hesse = numpy.array([0.100000,3.663444,0.100000,3.264144])
                Code completed.
                '''
                antennas_phase_hpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-35.627008, -18.143051, 20.169783], 2 : [-8.660638, -44.533474, 5.489838], 3 : [-30.001992, -43.078926, 12.520058]}
                antennas_phase_hpol_hesse = {0 : [2.000000, 2.000000, 0.750000], 1 : [13.102980, 14.054989, 5.158160], 2 : [2.000000, 2.000000, 0.750000], 3 : [10.944684, 15.051348, 6.694572]}

                #Vpol not calculated, based on hpol.
                antennas_phase_vpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-35.627008, -18.143051, 20.169783], 2 : [-8.660638, -44.533474, 5.489838], 3 : [-30.001992, -43.078926, 12.520058]}
                antennas_phase_vpol_hesse = {0 : [2.000000, 2.000000, 0.750000], 1 : [13.102980, 14.054989, 5.158160], 2 : [2.000000, 2.000000, 0.750000], 3 : [10.944684, 15.051348, 6.694572]}

            elif deploy_index == 26:
                #Starting from 25, with more sources, and using cor map peaks instead of strips.  Ultimately the same calibration but more refined.

                # ------------------------------------------------------------------
                # | FCN = 0                       |      Ncalls=40 (40 total)      |
                # | EDM = 0 (Goal: 0.0002)        |            up = 1.0            |
                # ------------------------------------------------------------------
                # |  Valid Min.   | Valid Param.  | Above EDM | Reached call limit |
                # ------------------------------------------------------------------
                # |     False     |     True      |   False   |       False        |
                # ------------------------------------------------------------------
                # | Hesse failed  |   Has cov.    | Accurate  | Pos. def. | Forced |
                # ------------------------------------------------------------------
                # |     True      |     True      |   False   |   False   | False  |
                # ------------------------------------------------------------------
                # --------------------------------------------------------------------------------------------------
                # |   | Name         |   Value   | Hesse Err | Minos Err- | Minos Err+ | Limit-  | Limit+  | Fixed |
                # --------------------------------------------------------------------------------------------------
                # | 0 | ant0_x       |    0.0    |    0.5    |            |            |   -2    |    2    |  yes  |
                # | 1 | ant0_y       |    0.0    |    0.5    |            |            |   -2    |    2    |  yes  |
                # | 2 | ant0_z       |    0.0    |    0.5    |            |            |   -2    |    2    |  yes  |
                # | 3 | ant1_x       | -3.5535e1 | 0.0000e1  |            |            | -37.627 | -33.627 |       |
                # | 4 | ant1_y       | -1.8062e1 | 0.0000e1  |            |            |-20.1431 |-16.1431 |       |
                # | 5 | ant1_z       | 2.0166e1  | 0.0000e1  |            |            | 18.1698 | 22.1698 |       |
                # | 6 | ant2_x       |   -8.7    |    0.5    |            |            |-10.6606 |-6.66064 |  yes  |
                # | 7 | ant2_y       |   -44.5   |    0.5    |            |            |-46.5335 |-42.5335 |  yes  |
                # | 8 | ant2_z       |    5.5    |    0.5    |            |            | 3.48984 | 7.48984 |  yes  |
                # | 9 | ant3_x       | -2.991e1  |  0.000e1  |            |            | -32.002 | -28.002 |       |
                # | 10| ant3_y       | -4.3007e1 | 0.0000e1  |            |            |-45.0789 |-41.0789 |       |
                # | 11| ant3_z       | 1.2424e1  | 0.0000e1  |            |            | 10.5201 | 14.5201 |       |
                # | 12| cable_delay0 |    7.9    |    0.1    |            |            | 4.90121 | 10.9012 |  yes  |
                # | 13| cable_delay1 | 1.1157e1  | 0.0000e1  |            |            | 8.15717 | 14.1572 |       |
                # | 14| cable_delay2 |    0.0    |    0.1    |            |            |   -3    |    3    |  yes  |
                # | 15| cable_delay3 |  8.4449   |  0.0000   |            |            | 5.44492 | 11.4449 |       |
                # --------------------------------------------------------------------------------------------------


                # Copy-Paste Prints:
                # ------------

                antennas_phase_hpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-35.535249, -18.061861, 20.165817], 2 : [-8.660638, -44.533474, 5.489838], 3 : [-29.909783, -43.007372, 12.424257]}
                antennas_phase_hpol_hesse = {0 : [0.500000, 0.500000, 0.500000], 1 : [0.000000, 0.000000, 0.000000], 2 : [0.500000, 0.500000, 0.500000], 3 : [0.000000, 0.000000, 0.000000]}

                antennas_phase_vpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-35.535249, -18.061861, 20.165817], 2 : [-8.660638, -44.533474, 5.489838], 3 : [-29.909783, -43.007372, 12.424257]}
                antennas_phase_vpol_hesse = {0 : [0.500000, 0.500000, 0.500000], 1 : [0.000000, 0.000000, 0.000000], 2 : [0.500000, 0.500000, 0.500000], 3 : [0.000000, 0.000000, 0.000000]}
            elif deploy_index == 27:
                # From 26 using known sources A,B,C,D, and TV.  Using only antennas 0,1,3, hpol only.
                # ------------------------------------------------------------------
                # | FCN = 3.125                   |     Ncalls=607 (607 total)     |
                # | EDM = 9.57e-08 (Goal: 0.0002) |            up = 1.0            |
                # ------------------------------------------------------------------
                # |  Valid Min.   | Valid Param.  | Above EDM | Reached call limit |
                # ------------------------------------------------------------------
                # |     True      |     True      |   False   |       False        |
                # ------------------------------------------------------------------
                # | Hesse failed  |   Has cov.    | Accurate  | Pos. def. | Forced |
                # ------------------------------------------------------------------
                # |     False     |     True      |   True    |   True    | False  |
                # ------------------------------------------------------------------
                # --------------------------------------------------------------------------------------------------
                # |   | Name         |   Value   | Hesse Err | Minos Err- | Minos Err+ | Limit-  | Limit+  | Fixed |
                # --------------------------------------------------------------------------------------------------
                # | 0 | ant0_x       |    0.0    |    0.5    |            |            |   -2    |    2    |  yes  |
                # | 1 | ant0_y       |    0.0    |    0.5    |            |            |   -2    |    2    |  yes  |
                # | 2 | ant0_z       |    0.0    |    0.5    |            |            |   -2    |    2    |  yes  |
                # | 3 | ant1_x       |  -37.28   |   0.16    |   -0.16    |    0.33    |-37.5352 |-33.5352 |       |
                # | 4 | ant1_y       |  -18.72   |   0.21    |   -0.22    |    0.22    |-20.0619 |-16.0619 |       |
                # | 5 | ant1_z       |18.165817004|3.692450139|-0.000000004|2.472806550 | 18.1658 | 22.1658 |       |
                # | 6 | ant2_x       |   -8.7    |    0.5    |            |            |-10.6606 |-6.66064 |  yes  |
                # | 7 | ant2_y       |   -44.5   |    0.5    |            |            |-46.5335 |-42.5335 |  yes  |
                # | 8 | ant2_z       |    5.5    |    0.5    |            |            | 3.48984 | 7.48984 |  yes  |
                # | 9 | ant3_x       |   -30.0   |    0.8    |    -0.9    |    0.7     |-31.9098 |-27.9098 |       |
                # | 10| ant3_y       |  -43.53   |   0.27    |   -0.27    |    0.27    |-45.0074 |-41.0074 |       |
                # | 11| ant3_z       |   10.4    |    3.2    |    -3.2    |    2.4     | 10.4243 | 14.4243 |       |
                # | 12| cable_delay0 |    7.9    |    0.1    |            |            | 4.90121 | 10.9012 |  yes  |
                # | 13| cable_delay1 |    8.2    |    1.0    |    -1.0    |    0.9     | 8.15717 | 14.1572 |       |
                # | 14| cable_delay2 |    0.0    |    0.1    |            |            |   -3    |    3    |  yes  |
                # | 15| cable_delay3 |    9.6    |    2.1    |    -2.5    |    1.8     | 5.44492 | 11.4449 |       |
                # --------------------------------------------------------------------------------------------------


                # Copy-Paste Prints:
                # ------------

                antennas_phase_hpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-37.281439, -18.720550, 18.165817], 2 : [-8.660638, -44.533474, 5.489838], 3 : [-30.032919, -43.530065, 10.424257]}
                antennas_phase_hpol_hesse = {0 : [0.500000, 0.500000, 0.500000], 1 : [0.161029, 0.214942, 3.674703], 2 : [0.500000, 0.500000, 0.500000], 3 : [0.825754, 0.271855, 3.198833]}

                antennas_phase_vpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-37.281439, -18.720550, 18.165817], 2 : [-8.660638, -44.533474, 5.489838], 3 : [-30.032919, -43.530065, 10.424257]}
                antennas_phase_vpol_hesse = {0 : [0.500000, 0.500000, 0.500000], 1 : [0.161029, 0.214942, 3.674703], 2 : [0.500000, 0.500000, 0.500000], 3 : [0.825754, 0.271855, 3.198833]}
            elif deploy_index == 28:
                #Starting with 27, letting only antenna 2 float.  I had to let the cable delay float a lot and I am not sure why.  Using known source locations ABCD.  Large freedom of movement allowed for antenna 2.
                #Still no vpol
                
                # ------------------------------------------------------------------
                # | FCN = 4.576                   |     Ncalls=147 (147 total)     |
                # | EDM = 9.57e-09 (Goal: 0.0002) |            up = 1.0            |
                # ------------------------------------------------------------------
                # |  Valid Min.   | Valid Param.  | Above EDM | Reached call limit |
                # ------------------------------------------------------------------
                # |     True      |     True      |   False   |       False        |
                # ------------------------------------------------------------------
                # | Hesse failed  |   Has cov.    | Accurate  | Pos. def. | Forced |
                # ------------------------------------------------------------------
                # |     False     |     True      |   True    |   True    | False  |
                # ------------------------------------------------------------------
                # --------------------------------------------------------------------------------------------------
                # |   | Name         |   Value   | Hesse Err | Minos Err- | Minos Err+ | Limit-  | Limit+  | Fixed |
                # --------------------------------------------------------------------------------------------------
                # | 0 | ant0_x       |     0     |     1     |            |            |   -20   |   20    |  yes  |
                # | 1 | ant0_y       |     0     |     1     |            |            |   -20   |   20    |  yes  |
                # | 2 | ant0_z       |     0     |     1     |            |            |   -5    |    5    |  yes  |
                # | 3 | ant1_x       |   -37.3   |    1.0    |            |            |-57.2814 |-17.2814 |  yes  |
                # | 4 | ant1_y       |   -18.7   |    1.0    |            |            |-38.7206 | 1.27945 |  yes  |
                # | 5 | ant1_z       |   18.2    |    1.0    |            |            | 13.1658 | 23.1658 |  yes  |
                # | 6 | ant2_x       |   -17.3   |    0.9    |    -0.9    |    0.9     |-28.6606 | 11.3394 |       |
                # | 7 | ant2_y       |  -53.74   |   0.20    |   -0.20    |    0.20    |-64.5335 |-24.5335 |       |
                # | 8 | ant2_z       |    6.2    |    3.4    |    -2.7    |    3.9     | 3.48984 | 13.4898 |       |
                # | 9 | ant3_x       |    -30    |     1     |            |            |-50.0329 |-10.0329 |  yes  |
                # | 10| ant3_y       |   -43.5   |    1.0    |            |            |-63.5301 |-23.5301 |  yes  |
                # | 11| ant3_z       |   10.4    |    1.0    |            |            | 5.42426 | 15.4243 |  yes  |
                # | 12| cable_delay0 |    7.9    |    0.5    |            |            |-992.099 | 1007.9  |  yes  |
                # | 13| cable_delay1 |    8.2    |    0.5    |            |            |-991.843 | 1008.16 |  yes  |
                # | 14| cable_delay2 |   -47.7   |    3.0    |    -3.0    |    3.0     |  -1000  |  1000   |       |
                # | 15| cable_delay3 |    9.6    |    0.5    |            |            |-990.409 | 1009.59 |  yes  |
                # --------------------------------------------------------------------------------------------------


                # Copy-Paste Prints:
                # ------------

                antennas_phase_hpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-37.281439, -18.720550, 18.165817], 2 : [-17.337033, -53.740481, 6.177357], 3 : [-30.032919, -43.530065, 10.424257]}
                antennas_phase_hpol_hesse = {0 : [1.000000, 1.000000, 1.000000], 1 : [1.000000, 1.000000, 1.000000], 2 : [0.928322, 0.204631, 3.417158], 3 : [1.000000, 1.000000, 1.000000]}

                antennas_phase_vpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-37.281439, -18.720550, 18.165817], 2 : [-17.337033, -53.740481, 6.177357], 3 : [-30.032919, -43.530065, 10.424257]}
                antennas_phase_vpol_hesse = {0 : [1.000000, 1.000000, 1.000000], 1 : [1.000000, 1.000000, 1.000000], 2 : [0.928322, 0.204631, 3.417158], 3 : [1.000000, 1.000000, 1.000000]}
            elif deploy_index == 29:
                #Made starting with 28, and letting 1,2,3 vary +- 20m, cable delays fixed.  Using "known source locations" from a,b,c,d,e,f
                #This "works" well in that it points to all 5 source locations.  Unsure how to sanity check however, as the
                #determined locations of the antennas do not match with my memory of where they were lcoated particularly well.
                #Works VERY poorly for the CW signal
                # ------------------------------------------------------------------
                # | FCN = 7.084                   |     Ncalls=372 (372 total)     |
                # | EDM = 0.000198 (Goal: 0.0002) |            up = 1.0            |
                # ------------------------------------------------------------------
                # |  Valid Min.   | Valid Param.  | Above EDM | Reached call limit |
                # ------------------------------------------------------------------
                # |     True      |     True      |   False   |       False        |
                # ------------------------------------------------------------------
                # | Hesse failed  |   Has cov.    | Accurate  | Pos. def. | Forced |
                # ------------------------------------------------------------------
                # |     False     |     True      |   True    |   True    | False  |
                # ------------------------------------------------------------------
                # --------------------------------------------------------------------------------------------------
                # |   | Name         |   Value   | Hesse Err | Minos Err- | Minos Err+ | Limit-  | Limit+  | Fixed |
                # --------------------------------------------------------------------------------------------------
                # | 0 | ant0_x       |     0     |     1     |            |            |   -20   |   20    |  yes  |
                # | 1 | ant0_y       |     0     |     1     |            |            |   -20   |   20    |  yes  |
                # | 2 | ant0_z       |     0     |     1     |            |            |   -20   |   20    |  yes  |
                # | 3 | ant1_x       |  -38.10   |   0.23    |   -0.23    |    0.23    |-57.2814 |-17.2814 |       |
                # | 4 | ant1_y       |  -16.97   |   0.25    |   -0.25    |    0.25    |-38.7206 | 1.27945 |       |
                # | 5 | ant1_z       |   26.9    |    2.5    |    -2.5    |    2.4     |-1.83418 | 38.1658 |       |
                # | 6 | ant2_x       |   -5.86   |   0.23    |   -0.23    |    0.23    | -34.337 | 5.66297 |       |
                # | 7 | ant2_y       |  -45.67   |   0.25    |   -0.25    |    0.25    |-63.7405 |-23.7405 |       |
                # | 8 | ant2_z       |   -7.6    |    2.5    |    -2.5    |    2.5     |-13.8226 | 26.1774 |       |
                # | 9 | ant3_x       |  -30.45   |   0.23    |   -0.23    |    0.23    |-50.0329 |-10.0329 |       |
                # | 10| ant3_y       |  -42.80   |   0.25    |   -0.25    |    0.25    |-63.5301 |-23.5301 |       |
                # | 11| ant3_z       |   13.1    |    2.5    |    -2.5    |    2.4     |-9.57574 | 30.4243 |       |
                # | 12| cable_delay0 |    7.9    |    0.5    |            |            |-2.09879 | 17.9012 |  yes  |
                # | 13| cable_delay1 |    8.2    |    0.5    |            |            |-1.84283 | 18.1572 |  yes  |
                # | 14| cable_delay2 |    0.0    |    0.5    |            |            |   -10   |   10    |  yes  |
                # | 15| cable_delay3 |    9.6    |    0.5    |            |            |-0.408563| 19.5914 |  yes  |
                # --------------------------------------------------------------------------------------------------
                antennas_phase_hpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-38.102155, -16.971278, 26.881001], 2 : [-5.862395, -45.670696, -7.619558], 3 : [-30.451192, -42.804655, 13.053250]}
                antennas_phase_hpol_hesse = {0 : [1.000000, 1.000000, 1.000000], 1 : [0.232099, 0.254682, 2.453574], 2 : [0.238776, 0.257414, 2.540291], 3 : [0.233637, 0.255081, 2.488746]}

                #Vpol only uses A,B,D as these have vpol.  This is generated started from 29 hpol (with vpol cable delays) and letting antennas float pm 3 m.
                # ------------------------------------------------------------------
                # | FCN = 0.7056                  |    Ncalls=2135 (2135 total)    |
                # | EDM = 6.69e-05 (Goal: 0.0002) |            up = 1.0            |
                # ------------------------------------------------------------------
                # |  Valid Min.   | Valid Param.  | Above EDM | Reached call limit |
                # ------------------------------------------------------------------
                # |     False     |     True      |   False   |       False        |
                # ------------------------------------------------------------------
                # | Hesse failed  |   Has cov.    | Accurate  | Pos. def. | Forced |
                # ------------------------------------------------------------------
                # |     True      |     True      |   False   |   False   | False  |
                # ------------------------------------------------------------------
                # --------------------------------------------------------------------------------------------------
                # |   | Name         |   Value   | Hesse Err | Minos Err- | Minos Err+ | Limit-  | Limit+  | Fixed |
                # --------------------------------------------------------------------------------------------------
                # | 0 | ant0_x       |     0     |     1     |            |            |   -3    |    3    |  yes  |
                # | 1 | ant0_y       |     0     |     1     |            |            |   -3    |    3    |  yes  |
                # | 2 | ant0_z       |     0     |     1     |            |            |   -3    |    3    |  yes  |
                # | 3 | ant1_x       | -3.8684e1 | 0.0000e1  |            |            |-41.1022 |-35.1022 |       |
                # | 4 | ant1_y       | -1.8606e1 | 0.0000e1  |            |            |-19.9713 |-13.9713 |       |
                # | 5 | ant1_z       | 2.3881e1  | 0.0000e1  |            |            | 23.881  | 29.881  |       |
                # | 6 | ant2_x       |  -5.4477  |  0.0000   |            |            |-8.86239 | -2.8624 |       |
                # | 7 | ant2_y       | -4.5528e1 | 0.0000e1  |            |            |-48.6707 |-42.6707 |       |
                # | 8 | ant2_z       |  -5.7316  |  0.0000   |            |            |-10.6196 |-4.61956 |       |
                # | 9 | ant3_x       | -3.0946e1 | 0.0000e1  |            |            |-33.4512 |-27.4512 |       |
                # | 10| ant3_y       | -4.4897e1 | 0.0000e1  |            |            |-45.8047 |-39.8047 |       |
                # | 11| ant3_z       | 1.0053e1  | 0.0000e1  |            |            | 10.0533 | 16.0532 |       |
                # | 12| cable_delay0 |   13.1    |    0.5    |            |            | 3.11563 | 23.1156 |  yes  |
                # | 13| cable_delay1 |  5.7821   |  0.0000   |            |            | 5.78194 | 25.7819 |       |
                # | 14| cable_delay2 |  9.1349   |  0.0000   |            |            | 1.09049 | 21.0905 |       |
                # | 15| cable_delay3 |  4.7912   |  0.0000   |            |            |0.848566 | 20.8486 |       |
                # --------------------------------------------------------------------------------------------------

                #Currently from hpol only
                antennas_phase_vpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-38.684105, -18.606490, 23.881001], 2 : [-5.447701, -45.528246, -5.731552], 3 : [-30.946243, -44.897257, 10.053253]}
                antennas_phase_vpol_hesse = {0 : [1.000000, 1.000000, 1.000000], 1 : [0.000000, 0.000000, 0.000000], 2 : [0.000000, 0.000000, 0.000000], 3 : [0.000000, 0.000000, 0.000000]}

                # cable_delays_vpol = numpy.array([13.115628,5.782146,9.134935,4.791166])
                # cable_delays_vpol_hesse = numpy.array([0.500000,0.000000,0.000000,0.000000])

            elif deploy_index == 30:
                # Using 29, but changing the khsv (TV) signal to different cycles (chosen to be offset/cycle slip for a 
                # signal that is 57 MHz).  These new TV time delays allow for better TV signal overlap with similar 
                # calibration found in 29.
                # ------------------------------------------------------------------
                # | FCN = 9.477                   |     Ncalls=606 (606 total)     |
                # | EDM = 5.22e-05 (Goal: 0.0002) |            up = 1.0            |
                # ------------------------------------------------------------------
                # |  Valid Min.   | Valid Param.  | Above EDM | Reached call limit |
                # ------------------------------------------------------------------
                # |     True      |     True      |   False   |       False        |
                # ------------------------------------------------------------------
                # | Hesse failed  |   Has cov.    | Accurate  | Pos. def. | Forced |
                # ------------------------------------------------------------------
                # |     False     |     True      |   True    |   True    | False  |
                # ------------------------------------------------------------------
                # --------------------------------------------------------------------------------------------------
                # |   | Name         |   Value   | Hesse Err | Minos Err- | Minos Err+ | Limit-  | Limit+  | Fixed |
                # --------------------------------------------------------------------------------------------------
                # | 0 | ant0_x       |     0     |     1     |            |            |   -20   |   20    |  yes  |
                # | 1 | ant0_y       |     0     |     1     |            |            |   -20   |   20    |  yes  |
                # | 2 | ant0_z       |     0     |     1     |            |            |   -20   |   20    |  yes  |
                # | 3 | ant1_x       |   -41.7   |    0.8    |    -0.8    |    0.8     |-58.1022 |-18.1022 |       |
                # | 4 | ant1_y       |  -19.02   |   0.25    |   -0.25    |    0.25    |-36.9713 | 3.02872 |       |
                # | 5 | ant1_z       |   33.4    |    2.6    |    -2.6    |    2.6     |  6.881  | 46.881  |       |
                # | 6 | ant2_x       |   -11.1   |    0.8    |    -0.8    |    0.8     |-25.8624 | 14.1376 |       |
                # | 7 | ant2_y       |  -48.55   |   0.25    |   -0.25    |    0.25    |-65.6707 |-25.6707 |       |
                # | 8 | ant2_z       |    1.7    |    2.6    |    -2.6    |    2.6     |-27.6196 | 12.3804 |       |
                # | 9 | ant3_x       |   -32.0   |    0.8    |    -0.8    |    0.8     |-50.4512 |-10.4512 |       |
                # | 10| ant3_y       |  -43.68   |   0.25    |   -0.25    |    0.25    |-62.8047 |-22.8047 |       |
                # | 11| ant3_z       |   15.8    |    2.6    |    -2.6    |    2.6     |-6.94675 | 33.0532 |       |
                # | 12| cable_delay0 |    7.9    |    0.5    |            |            |-92.0988 | 107.901 |  yes  |
                # | 13| cable_delay1 |   -6.2    |    2.5    |    -2.4    |    2.4     |-91.8428 | 108.157 |       |
                # | 14| cable_delay2 |   -20.5   |    2.4    |    -2.4    |    2.4     |  -100   |   100   |       |
                # | 15| cable_delay3 |    3.6    |    2.4    |    -2.4    |    2.4     |-90.4086 | 109.591 |       |
                # --------------------------------------------------------------------------------------------------


                #Vpol comes from hpol, with limited movement of 3m around the hpol antennas.
                # ------------------------------------------------------------------
                # | FCN = 16.36                   |    Ncalls=1991 (1991 total)    |
                # | EDM = 0.000187 (Goal: 0.0002) |            up = 1.0            |
                # ------------------------------------------------------------------
                # |  Valid Min.   | Valid Param.  | Above EDM | Reached call limit |
                # ------------------------------------------------------------------
                # |     True      |     True      |   False   |       False        |
                # ------------------------------------------------------------------
                # | Hesse failed  |   Has cov.    | Accurate  | Pos. def. | Forced |
                # ------------------------------------------------------------------
                # |     False     |     True      |   True    |   True    | False  |
                # ------------------------------------------------------------------
                # --------------------------------------------------------------------------------------------------
                # |   | Name         |   Value   | Hesse Err | Minos Err- | Minos Err+ | Limit-  | Limit+  | Fixed |
                # --------------------------------------------------------------------------------------------------
                # | 0 | ant0_x       |     0     |     1     |            |            |   -3    |    3    |  yes  |
                # | 1 | ant0_y       |     0     |     1     |            |            |   -3    |    3    |  yes  |
                # | 2 | ant0_z       |     0     |     1     |            |            |   -3    |    3    |  yes  |
                # | 3 | ant1_x       |  -38.70   |   0.17    |   -0.17    |    0.17    |-44.6952 |-38.6952 |       |
                # | 4 | ant1_y       |  -16.32   |   0.20    |   -0.20    |    0.20    |-22.0227 |-16.0227 |       |
                # | 5 | ant1_z       |   30.4    |    4.1    |    -4.1    |    1.9     | 30.3832 | 36.3832 |       |
                # | 6 | ant2_x       |   -10.1   |    1.0    |    -1.0    |    1.0     |-14.0539 |-8.05391 |       |
                # | 7 | ant2_y       |  -47.49   |   0.26    |   -0.26    |    0.26    |-51.5494 |-45.5494 |       |
                # | 8 | ant2_z       |    2.9    |    5.0    |    -4.1    |    1.9     |-1.25035 | 4.74965 |       |
                # | 9 | ant3_x       |   -30.5   |    0.9    |    -1.0    |    0.8     | -34.956 | -28.956 |       |
                # | 10| ant3_y       |  -43.43   |   0.26    |   -0.26    |    0.26    |-46.6801 |-40.6801 |       |
                # | 11| ant3_z       |    13     |     5     |     -5     |     4      | 12.8067 | 18.8067 |       |
                # | 12| cable_delay0 |   13.1    |    0.5    |            |            |-86.8844 | 113.116 |  yes  |
                # | 13| cable_delay1 |    9.3    |    0.4    |    -0.6    |    0.4     |-94.2179 | 105.782 |       |
                # | 14| cable_delay2 |   -8.1    |    3.2    |    -3.0    |    3.1     |-90.8651 | 109.135 |       |
                # | 15| cable_delay3 |    8.5    |    2.8    |    -3.2    |    2.3     |-95.2088 | 104.791 |       |
                # --------------------------------------------------------------------------------------------------


                antennas_phase_hpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-41.695157, -19.022663, 33.383186], 2 : [-11.053909, -48.549442, 1.749655], 3 : [-31.956005, -43.680061, 15.806712]}
                antennas_phase_hpol_hesse = {0 : [1.000000, 1.000000, 1.000000], 1 : [0.813590, 0.252366, 2.627863], 2 : [0.792450, 0.252823, 2.624041], 3 : [0.855193, 0.260376, 2.641065]}

                antennas_phase_vpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-38.695157, -16.320563, 30.383186], 2 : [-10.124559, -47.491375, 2.875563], 3 : [-30.465630, -43.425621, 12.857971]}
                antennas_phase_vpol_hesse = {0 : [1.000000, 1.000000, 1.000000], 1 : [0.171479, 0.203726, 4.087032], 2 : [0.958606, 0.257511, 4.931464], 3 : [0.838223, 0.255872, 4.973041]}
        return antennas_physical, antennas_phase_hpol, antennas_phase_vpol
    except Exception as e:
        print('\nError in %s'%inspect.stack()[0][3])
        print(e)
        exc_type, exc_obj, exc_tb = sys.exc_info()
        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
        print(exc_type, fname, exc_tb.tb_lineno)

def loadCableDelays(deploy_index=default_deploy,return_raw=False, check=False):
    '''
    This are calculated using group_delay.py via the group delay.  They correspond to the length of the LMR400
    cable that extends from the observatory to the antennas and accounts for the majority of systematic delay
    between signals.  This should be accounted for in interferometric uses.
    '''
    try:
        if type(deploy_index) == str:
            ignored_origin, ignored_antennas_physical, ignored_antennas_phase_hpol, ignored_antennas_phase_vpol, cable_delays = configReader(deploy_index, return_mode='enu', check=check, verbose=False)
        elif deploy_index == 0:
            cable_delays =  {'hpol': numpy.array([0.0, 0.0, 0.0, 0.0]), \
                             'vpol': numpy.array([0.0, 0.0, 0.0, 0.0])}
        elif deploy_index == 1:
            cable_delays =  {'hpol': numpy.array([423.37836156, 428.43979143, 415.47714969, 423.58803498]), \
                             'vpol': numpy.array([428.59277751, 430.16685915, 423.56765695, 423.50469285])}
        elif deploy_index == 2:
            cable_delays =  {'hpol': numpy.array([423.37836156, 428.43979143, 415.47714969, 423.58803498]), \
                             'vpol': numpy.array([428.59277751, 430.16685915, 423.56765695, 423.50469285])}

        elif deploy_index == 3:
            #Here I am just rerunning the time delays from the pulser, and also letting the cable delays vary.  I am only doing a simple chi^2 (Just the adjustedChi^2)
            cable_delays =  {'hpol' : numpy.array([ 9.716096686691788 , 6.557263164293925 , 1.338560237462631 , 7.988215967106549 ]) + 415.47714969, \
                             'vpol' : numpy.array([ 15.427099049222033 , 12.16895487865136 , 9.310628362153283 , 8.630112284474672 ]) + 423.56765695}





            # pulser_locations_ENU['hpol'] = {'run1507':[259.417378, -353.989882, -88.125921], 'run1509':[1129.874543, -528.948053, -160.527267], 'run1511':[189.018118, 338.618832, -44.960478]}
            # pulser_locations_ENU['hpol_hesse_error'] = {'run1507':[0.010000, 0.010000, 0.010000], 'run1509':[0.010000, 0.010000, 0.010000], 'run1511':[0.010000, 0.010000, 0.010000]}
        elif deploy_index == 11:
            cable_delays =  {'hpol' : numpy.array([7.901212,12.248939,10.000000,18.110885]) + 415.47714969, \
                             'vpol' : numpy.array([13.115628,8.986282,12.530756,12.041758]) + 423.56765695}

            #cable_delays_vpol_hesse = numpy.array([0.500000,3.390690,0.407566,2.505386])
            #cable_delays_hpol_hesse = numpy.array([0.500000,5.916741,0.885048,1.197699])

        elif deploy_index == 14:
            cable_delays =  {   'hpol':     numpy.array([3.451618,7.826725,8.083331,7.546091]), \
                                'vpol':     numpy.array([10.914086,7.477607,16.681922,7.471445])}
        elif deploy_index == 15:
            # cable_delays_hpol = numpy.array([17.809761,3.103724,9.518142,7.911402])
            # cable_delays_hpol_hesse = numpy.array([17.980015,17.603312,15.514188,4.179351])
            # cable_delays_vpol = numpy.array([21.671835,4.689877,17.031305,7.945473])
            # cable_delays_vpol_hesse = numpy.array([0.746272,19.473516,0.748978,0.742503])

            cable_delays =  {   'hpol':     numpy.array([17.809761,3.103724,9.518142,7.911402]), \
                                'vpol':     numpy.array([21.671835,4.689877,17.031305,7.945473])}
        elif deploy_index == 17:
            cable_delays =  {   'hpol':     numpy.array([2.901715,11.148590,3.695444,13.082649]), \
                                'vpol':     numpy.array([8.324117,19.208286,12.596147,12.946409])}

        elif deploy_index == 19:
            cable_delays =  {   'hpol':     numpy.array([12.890893,7.962642,5.000000,6.202864]), \
                                'vpol':     numpy.array([15.835665,9.689739,13.090459,5.637693])}
        elif deploy_index == 20:
            cable_delays =  {   'hpol':     numpy.array([12.094088,3.168013,9.118150,7.905168]), \
                                'vpol':     numpy.array([18.743829,4.867362,16.899300,8.054707])}

        elif deploy_index == 22:
            cable_delays =  {   'hpol':     numpy.array([7.901212,15.961225,2.999975,11.110831]), \
                                'vpol':     numpy.array([13.115628,17.688231,11.090487,11.027541])}
            #cable_delays_hpol_hesse = numpy.array([0.250000,3.177605,4.465699,4.766975])
            #cable_delays_vpol_hesse = numpy.array([0.250000,5.576029,4.727528,5.035706])
        elif deploy_index == 23:
            #Made based of of khsv signal + 'Miller Substation','Tonopah AFS GATR Site' with unkown source directions.  Only works for antennas 0,1,3
            cable_delays =  {   'hpol':     numpy.array([7.901212,12.009911,0.000000,7.520476]), \
                                'vpol':     numpy.array([13.115628,16.688239,11.090487,10.646654])}
            # antennas_phase_vpol = {0 : [0.000000, 0.000000, -5.000000], 1 : [-32.735165, -13.434077, 20.239900], 2 : [-8.660638, -44.533474, 5.489838], 3 : [-30.927869, -44.407966, 15.259098]}
            # antennas_phase_vpol_hesse = {0 : [2.000000, 2.000000, 0.376409], 1 : [0.040986, 0.049558, 0.314455], 2 : [2.000000, 2.000000, 0.750000], 3 : [0.096819, 0.165549, 2.221534]}

            # cable_delays_hpol = numpy.array([7.901212,12.009911,0.000000,7.520476])
            # cable_delays_hpol_hesse = numpy.array([0.500000,0.000000,0.000000,0.000000])
        elif deploy_index == 24:
            cable_delays =  {   'hpol':     numpy.array([7.901212,11.040073,0.000000,6.786517]), \
                                'vpol':     numpy.array([13.115628,15.781942,11.090487,10.848566])}
            # cable_delays_vpol_hesse = numpy.array([0.500000,0.000000,0.500000,0.000000])
            # cable_delays_hpol_hesse = numpy.array([0.500000,0.000796,0.500000,0.249012])

        elif deploy_index == 25:
            #Starting from 24, but with more sources.  Still limited to 3 antennas. 
            '''
            ------------------------------------------------------------------
            | FCN = 0.0003234               |     Ncalls=931 (931 total)     |
            | EDM = 8.84e-05 (Goal: 0.0002) |            up = 1.0            |
            ------------------------------------------------------------------
            |  Valid Min.   | Valid Param.  | Above EDM | Reached call limit |
            ------------------------------------------------------------------
            |     True      |     True      |   False   |       False        |
            ------------------------------------------------------------------
            | Hesse failed  |   Has cov.    | Accurate  | Pos. def. | Forced |
            ------------------------------------------------------------------
            |     False     |     True      |   False   |   False   |  True  |
            ------------------------------------------------------------------
            --------------------------------------------------------------------------------------------------
            |   | Name         |   Value   | Hesse Err | Minos Err- | Minos Err+ | Limit-  | Limit+  | Fixed |
            --------------------------------------------------------------------------------------------------
            | 0 | ant0_x       |     0     |     2     |            |            |   -10   |   10    |  yes  |
            | 1 | ant0_y       |     0     |     2     |            |            |   -10   |   10    |  yes  |
            | 2 | ant0_z       |    0.0    |    0.8    |            |            |   -5    |    5    |  yes  |
            | 3 | ant1_x       |   -35.6   |    2.6    |    -3.7    |    13.1    |-43.4936 |-23.4936 |       |
            | 4 | ant1_y       |    -18    |     4     |     -4     |     16     |-22.2161 |-2.21612 |       |
            | 5 | ant1_z       |    20     |     6     |    -10     |     5      | 10.2399 | 20.2399 |       |
            | 6 | ant2_x       |   -8.7    |    2.0    |            |            |-18.6606 | 1.33936 |  yes  |
            | 7 | ant2_y       |   -44.5   |    2.0    |            |            |-54.5335 |-34.5335 |  yes  |
            | 8 | ant2_z       |    5.5    |    0.8    |            |            |0.489838 | 10.4898 |  yes  |
            | 9 | ant3_x       |   -30.0   |    2.6    |    -7.8    |    10.9    |-42.1681 |-22.1681 |       |
            | 10| ant3_y       |    -43    |     4     |    -10     |     10     |-53.2008 |-33.2008 |       |
            | 11| ant3_z       |    13     |     5     |     -7     |     4      | 6.88977 | 16.8898 |       |
            | 12| cable_delay0 |    7.9    |    0.1    |            |            | 4.90121 | 10.9012 |  yes  |
            | 13| cable_delay1 |   11.2    |    3.0    |    -3.7    |    3.7     | 9.00991 | 15.0099 |       |
            | 14| cable_delay2 |    0.0    |    0.1    |            |            |   -3    |    3    |  yes  |
            | 15| cable_delay3 |    8.4    |    4.5    |    -3.9    |    2.1     | 4.52048 | 10.5205 |       |
            --------------------------------------------------------------------------------------------------


            Copy-Paste Prints:
            ------------

            antennas_phase_hpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-35.627008, -18.143051, 20.169783], 2 : [-8.660638, -44.533474, 5.489838], 3 : [-30.001992, -43.078926, 12.520058]}
            antennas_phase_hpol_hesse = {0 : [2.000000, 2.000000, 0.750000], 1 : [13.102980, 14.054989, 5.158160], 2 : [2.000000, 2.000000, 0.750000], 3 : [10.944684, 15.051348, 6.694572]}

            cable_delays_hpol = numpy.array([7.901212,11.157171,0.000000,8.444916])
            cable_delays_hpol_hesse = numpy.array([0.100000,3.663444,0.100000,3.264144])
            Code completed.
            '''

            #Vpol taken from 24

            cable_delays =  {   'hpol':      numpy.array([7.901212,11.157171,0.000000,8.444916]), \
                                'vpol':     numpy.array([13.115628,15.781942,11.090487,10.848566])}
        elif deploy_index == 26:
            cable_delays =  {   'hpol':     numpy.array([7.901212,11.157171,0.000000,8.444916]), \
                                'vpol':     numpy.array([13.115628,15.781942,11.090487,10.848566])}
        elif deploy_index == 27:
            cable_delays =  {   'hpol':     numpy.array([7.901212,8.157171,0.000000,9.591437]), \
                                'vpol':     numpy.array([13.115628,15.781942,11.090487,10.848566])}

            # cable_delays_hpol = 
            # cable_delays_hpol_hesse = numpy.array([0.100000,0.951527,0.100000,2.137623])
        elif deploy_index == 28:
            cable_delays =  {   'hpol':     numpy.array([7.901212,8.157171,0,9.591437]), \
                                'vpol':     numpy.array([13.115628,15.781942,11.090487,10.848566])}
            # cable_delays =  {   'hpol':     numpy.array([7.901212,8.157171,-47.749751,9.591437]), \
            #                     'vpol':     numpy.array([13.115628,15.781942,11.090487,10.848566])}
        elif deploy_index == 29:
            cable_delays =  {   'hpol':     numpy.array([7.901212,8.157171,0.000000,9.591437]), \
                                'vpol':     numpy.array([13.115628,5.782146,9.134935,4.791166])}
            # cable_delays =  {   'hpol':     numpy.array([7.901212,8.157171,-47.749751,9.591437]), \
            #                     'vpol':     numpy.array([13.115628,15.781942,11.090487,10.848566])}
            # cable_delays_hpol = numpy.array([7.901212,8.157171,0.000000,9.591437])
            # cable_delays_hpol_hesse = numpy.array([0.500000,0.500000,0.500000,0.500000])
            # cable_delays_vpol = numpy.array([13.115628,5.782146,9.134935,4.791166])
            # cable_delays_vpol_hesse = numpy.array([0.500000,0.000000,0.000000,0.000000])
        elif deploy_index == 30:
            cable_delays =  {   'hpol':     numpy.array([7.901212,-6.188353,-20.544049,3.551777]), \
                                'vpol':     numpy.array([13.115628,9.321441,-8.072655,8.535294])}

            # cable_delays_hpol = numpy.array([7.901212,-6.188353,-20.544049,3.551777])
            # cable_delays_hpol_hesse = numpy.array([0.500000,2.571836,2.490392,2.693619])

            # cable_delays_hpol = numpy.array([7.901212,-5.937433,-19.999884,3.821820])
            # cable_delays_hpol_hesse = numpy.array([0.500000,2.179866,3.926540,2.118012])

            # cable_delays_hpol = numpy.array([7.901212,-0.804752,-10.000000,8.866679])
            # cable_delays_hpol_hesse = numpy.array([0.500000,1.955870,0.302548,2.080929])


        else:
            print('Using unmodified cable delays.')
            cable_delays =  {'hpol': numpy.array([423.37836156, 428.43979143, 415.47714969, 423.58803498]), \
                             'vpol': numpy.array([428.59277751, 430.16685915, 423.56765695, 423.50469285])}

        cable_delays['hpol'] = numpy.asarray(cable_delays['hpol'])
        cable_delays['vpol'] = numpy.asarray(cable_delays['vpol'])
        if return_raw == False:
            min_delay = min((min(cable_delays['hpol']),min(cable_delays['vpol'])))
            cable_delays['hpol'] -= min_delay
            cable_delays['vpol'] -= min_delay

        return cable_delays
    except Exception as e:
        print('\nError in %s'%inspect.stack()[0][3])
        print(e)
        exc_type, exc_obj, exc_tb = sys.exc_info()
        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
        print(exc_type, fname, exc_tb.tb_lineno)


def loadPulserPolarizations():
    '''
    Loads the polarizations used in each pulsing run.  Options are hpol, vpol, or both

    This won't make sense for data taken in the October 2019 pulsing run.   Will need higher
    resolution, i.e. time of day spans rather than run labels. 
    '''
    pulser_pol = {}

    #Trip 1
    #Day 1
    #Site 1 37.4671° N, 117.7525° W
    pulser_pol['run734'] = 'vpol'
    pulser_pol['run735'] = 'vpol'
    pulser_pol['run736'] = 'both'
    pulser_pol['run737'] = 'hpol'
    #Site 2 37° 34' 30.8" N, 117° 54' 31.7" W
    pulser_pol['run739'] = 'both'
    pulser_pol['run740'] = 'hpol'

    #Day 2 37° 34' 30.8" N 117° 54' 31.7" W
    pulser_pol['run746'] = 'both'
    pulser_pol['run747'] = 'vpol'

    #Day 3 37° 35’ 54.82” N 117° 59’ 37.97” W
    pulser_pol['run756'] = 'hpol'
    pulser_pol['run757'] = 'hpol'

    #Day 4
    #Site 1 37° 43' 36.40" N 118° 2' 3.40" W
    pulser_pol['run762'] = 'vpol'
    pulser_pol['run763'] = 'vpol'
    pulser_pol['run764'] = 'vpol'
    #Site2 37° 25' 32.85" N 117° 37' 57.55" W
    pulser_pol['run766'] = 'vpol'
    pulser_pol['run767'] = 'vpol'
    pulser_pol['run768'] = 'vpol'
    pulser_pol['run769'] = 'vpol'
    pulser_pol['run770'] = 'hpol'

    #Day 5 37° 35' 9.27" N 118° 14' 0.73" W
    pulser_pol['run781'] = 'hpol'
    pulser_pol['run782'] = 'hpol'
    pulser_pol['run783'] = 'hpol'
    pulser_pol['run784'] = 'hpol'
    pulser_pol['run785'] = 'hpol'
    pulser_pol['run786'] = 'hpol'
    pulser_pol['run787'] = 'hpol'
    pulser_pol['run788'] = 'hpol'
    pulser_pol['run789'] = 'hpol'
    pulser_pol['run790'] = 'vpol'

    #Day 6 37° 35.166' N 118° 13.990' W 
    pulser_pol['run792'] = 'vpol'
    pulser_pol['run793'] = 'vpol'

    #Trip 2
    #Site 1a 37.5859361° N 118.233841 W 
    pulser_pol['run1506'] = 'hpol'
    pulser_pol['run1507'] = 'hpol'

    #Site 2 37.58568583° N 118.225942 W 
    pulser_pol['run1508'] = 'both'
    pulser_pol['run1509'] = 'both'

    #Site 3 37.592001861° N 118.2354480278 W 
    pulser_pol['run1511'] = 'both'

    #Pulsing from June 2021
    pulser_pol['run5167'] = 'both'
    pulser_pol['run5168'] = 'both'
    pulser_pol['run5169'] = 'both'
    pulser_pol['run5170'] = 'both'
    pulser_pol['run5171'] = 'both'
    pulser_pol['run5172'] = 'both'
    pulser_pol['run5173'] = 'both'
    pulser_pol['run5176'] = 'both'
    pulser_pol['run5179'] = 'both'
    pulser_pol['run5180'] = 'both'
    pulser_pol['run5182'] = 'both'
    pulser_pol['run5183'] = 'both'
    pulser_pol['run5185'] = 'both'
    pulser_pol['run5190'] = 'both'
    pulser_pol['run5191'] = 'both'
    pulser_pol['run5195'] = 'both'
    pulser_pol['run5196'] = 'both'
    pulser_pol['run5198'] = 'both'
    
    return pulser_pol   

def loadPulserLocations(deploy_index=default_deploy):
    '''
    Loads the latitude,longtidue,elevation locations of the antennas.
    See loadPulserLocationsENU for these locations converted to
    be relative to antenna 0.

    These are repeated if that pulser is used for multiply runs. 

    Note that deploy index here mostly just chooses in newer runs which GPS elevation to use.
    '''
    pulser_locations = {}

    #Day 1
    #Site 1 37.4671° N, 117.7525° W
    pulser_locations['run734'] = (37.4671,-117.7525,1763.0)
    pulser_locations['run735'] = (37.4671,-117.7525,1763.0)
    pulser_locations['run736'] = (37.4671,-117.7525,1763.0)
    pulser_locations['run737'] = (37.4671,-117.7525,1763.0)
    #Site 2 37° 34' 30.8" N, 117° 54' 31.7" W
    pulser_locations['run739'] = (37.575225,-117.908807,1646.0)
    pulser_locations['run740'] = (37.575225,-117.908807,1646.0)

    #Day 2 37° 34' 30.8" N 117° 54' 31.7" W
    pulser_locations['run746'] = (37.575225,-117.908807,1646.0)
    pulser_locations['run747'] = (37.575225,-117.908807,1646.0)

    #Day 3 37° 35’ 54.82” N 117° 59’ 37.97” W
    pulser_locations['run756'] = (37.598554,-117.993874,1501.0)
    pulser_locations['run757'] = (37.598554,-117.993874,1501.0)

    #Day 4
    #Site 1 37° 43' 36.40" N 118° 2' 3.40" W
    pulser_locations['run762'] = (37.726735,-118.034261,1542.0)
    pulser_locations['run763'] = (37.726735,-118.034261,1542.0)
    pulser_locations['run764'] = (37.726735,-118.034261,1542.0)
    #Site2 37° 25' 32.85" N 117° 37' 57.55" W
    pulser_locations['run766'] = (37.425788,-117.632653,2021.0)
    pulser_locations['run767'] = (37.425788,-117.632653,2021.0)
    pulser_locations['run768'] = (37.425788,-117.632653,2021.0)
    pulser_locations['run769'] = (37.425788,-117.632653,2021.0)
    pulser_locations['run770'] = (37.425788,-117.632653,2021.0)

    #Day 5 37° 35' 9.27" N 118° 14' 0.73" W
    pulser_locations['run781'] = (37.585912,-118.233535,3789)
    pulser_locations['run782'] = (37.585912,-118.233535,3789)
    pulser_locations['run783'] = (37.585912,-118.233535,3789)
    pulser_locations['run784'] = (37.585912,-118.233535,3789)
    pulser_locations['run785'] = (37.585912,-118.233535,3789)
    pulser_locations['run786'] = (37.585912,-118.233535,3789)
    pulser_locations['run787'] = (37.585912,-118.233535,3789)
    pulser_locations['run788'] = (37.585912,-118.233535,3789)
    pulser_locations['run789'] = (37.585912,-118.233535,3789)
    pulser_locations['run790'] = (37.585912,-118.233535,3789)

    #Day 6 37° 35.166' N 118° 13.990' W 
    pulser_locations['run792'] = (37.5861,-118.2332,3779.52)
    pulser_locations['run793'] = (37.5861,-118.2332,3779.52)

    # Pulsing June 2021 Site 1
    # 1 meter added to elevation because the antenna was approximately 1 meter above where the GPS was.
    #Site 1 first day of pulsing.  Some of the earliest events might be at a slightly shifted location
    pulser_locations['run5167'] = ( 37.586044, -118.233545, 3765.2 + 1 )
    pulser_locations['run5168'] = ( 37.586044, -118.233545, 3765.2 + 1 )
    pulser_locations['run5169'] = ( 37.586044, -118.233545, 3765.2 + 1 )
    pulser_locations['run5170'] = ( 37.586044, -118.233545, 3765.2 + 1 )
    pulser_locations['run5171'] = ( 37.586044, -118.233545, 3765.2 + 1 )
    pulser_locations['run5172'] = ( 37.586044, -118.233545, 3765.2 + 1 )
    pulser_locations['run5173'] = ( 37.586044, -118.233545, 3765.2 + 1 )
    pulser_locations['run5176'] = ( 37.586044, -118.233545, 3765.2 + 1 )
    pulser_locations['run5190'] = ( 37.586044, -118.233545, 3765.2 + 1 )
    pulser_locations['run5191'] = ( 37.586044, -118.233545, 3765.2 + 1 )
    pulser_locations['run5195'] = ( 37.586044, -118.233545, 3765.2 + 1 )
    pulser_locations['run5196'] = ( 37.586044, -118.233545, 3765.2 + 1 )
    pulser_locations['run5198'] = ( 37.586044, -118.233545, 3765.2 + 1 )

    # Near array pulsing site, just north of Antenna 1
    # These GPS coordinates are approximate, and should not be trusted for anything beyond sanity checks.  They use the elevation of antenna 1.
    pulser_locations['run5179'] = ( 37.589291, -118.238082, 3865.1272 )
    pulser_locations['run5180'] = ( 37.589291, -118.238082, 3865.1272 )

    # Pulsing June 2021 Site 2
    #pulser_locations['run5181'] = ( 37.591998, -118.235489, 3805.8 + 1 )
    pulser_locations['run5182'] = ( 37.591998, -118.235489, 3805.8 + 1 )
    pulser_locations['run5183'] = ( 37.591998, -118.235489, 3805.8 + 1 )
    #pulser_locations['run5184'] = ( 37.591998, -118.235489, 3805.8 + 1 )
    pulser_locations['run5185'] = ( 37.591998, -118.235489, 3805.8 + 1 )
    

    if type(deploy_index) == int:
        if deploy_index <= 9:
            print('Pulser location elevations from Google Earth (approximate WGS84)')
            #Trip 2
            #Site 1  37.5859361 N 118.233918056 W  (37.5859361, -118.233918056)
            #Alt: 3762.9m (GPS)  3789.32 m (MSL) Google Earth: Alt: 3796.284
            pulser_locations['run1504'] = (37.5859361, -118.233918056,3796.284)

            #Site 1a 37.58595472° N 118.233841 W 
            #Alt: 3763.1m (GPS)  3789.53 m (MSL) Google Earth: 3794.76
            pulser_locations['run1506'] = (37.58595472, -118.233841,3794.76)
            pulser_locations['run1507'] = (37.58595472, -118.233841,3794.76)

            #Site 2 37.58568583° N 118.225942 W 
            #Alt: 3690.70m (GPS)  3717.04m (MSL) Google Earth: 3729.228
            pulser_locations['run1508'] = (37.58568583, -118.225942,3729.228)
            pulser_locations['run1509'] = (37.58568583, -118.225942,3729.228)

            #Site 3 37.592001861° N 118.2354480278 W 
            #Alt: 3806.25m (GPS)  3832.55m (MSL) Google Earth: 3827.6784
            pulser_locations['run1511'] = (37.592001861, -118.2354480278,3827.6784)
        elif deploy_index > 9:
            print('Pulser location elevations from GPS (measured WGS84)')
            #Trip 2
            #Site 1  37.5859361 N 118.233918056 W  (37.5859361, -118.233918056)
            #Alt: 3762.9m (GPS)  3789.32 m (MSL) Google Earth: Alt: 3796.284
            pulser_locations['run1504'] = (37.5859361, -118.233918056,3762.9)

            #Site 1a 37.58595472° N 118.233841 W 
            #Alt: 3763.1m (GPS)  3789.53 m (MSL) Google Earth: 3794.76
            pulser_locations['run1506'] = (37.58595472, -118.233841,3763.1)
            pulser_locations['run1507'] = (37.58595472, -118.233841,3763.1)

            #Site 2 37.58568583° N 118.225942 W 
            #Alt: 3690.70m (GPS)  3717.04m (MSL) Google Earth: 3729.228
            pulser_locations['run1508'] = (37.58568583, -118.225942,3690.7)
            pulser_locations['run1509'] = (37.58568583, -118.225942,3690.7)

            #Site 3 37.592001861° N 118.2354480278 W 
            #Alt: 3806.25m (GPS)  3832.55m (MSL) Google Earth: 3827.6784
            pulser_locations['run1511'] = (37.592001861, -118.2354480278,3806.25)
    elif type(deploy_index) == str:
        print('Interpreting deploy index as str and assuming most recent pulsing locations.')
        #Trip 2
        #Site 1  37.5859361 N 118.233918056 W  (37.5859361, -118.233918056)
        #Alt: 3762.9m (GPS)  3789.32 m (MSL) Google Earth: Alt: 3796.284
        pulser_locations['run1504'] = (37.5859361, -118.233918056,3762.9)

        #Site 1a 37.58595472° N 118.233841 W 
        #Alt: 3763.1m (GPS)  3789.53 m (MSL) Google Earth: 3794.76
        pulser_locations['run1506'] = (37.58595472, -118.233841,3763.1)
        pulser_locations['run1507'] = (37.58595472, -118.233841,3763.1)

        #Site 2 37.58568583° N 118.225942 W 
        #Alt: 3690.70m (GPS)  3717.04m (MSL) Google Earth: 3729.228
        pulser_locations['run1508'] = (37.58568583, -118.225942, 3690.7)
        pulser_locations['run1509'] = (37.58568583, -118.225942, 3690.7)

        #Site 3 37.592001861° N 118.2354480278 W 
        #Alt: 3806.25m (GPS)  3832.55m (MSL) Google Earth: 3827.6784
        pulser_locations['run1511'] = (37.592001861, -118.2354480278,3806.25)


    return pulser_locations    

def loadPulserLocationsENU(deploy_index=default_deploy):
    '''
    Loads the locations of the antennas converted to
    be relative to antenna 0.

    These are repeated if that pulser is used for multiple runs. 

    This is depricated and does not all for the antennas to have different 
    phase centers. loadPulserPhaseLocationsENU is better.
    '''
    try:
        pulser_locations_ENU = {}
        pulser_locations = loadPulserLocations(deploy_index=deploy_index)

        origin = loadAntennaZeroLocation(deploy_index=deploy_index)
        print(origin)
        for key, location in pulser_locations.items():
            pulser_locations_ENU[key] = pm.geodetic2enu(location[0],location[1],location[2],origin[0],origin[1],origin[2])
        return pulser_locations_ENU
    except Exception as e:
        print('\nError in %s'%inspect.stack()[0][3])
        print(e)
        exc_type, exc_obj, exc_tb = sys.exc_info()
        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
        print(exc_type, fname, exc_tb.tb_lineno)

def loadPulserPhaseLocationsENU(deploy_index=default_deploy):
    '''
    Loads the locations of the antennas converted to
    be relative to antenna 0.

    These are repeated if that pulser is used for multiple runs.  

    The output will be a dictionary with keys 'physical','hpol', and 'vpol'
    corresponding to the best known physical locations, and current best fit
    for phase centers.
    '''
    try:
        pulser_locations_ENU = {}
        pulser_locations = loadPulserLocations(deploy_index=deploy_index)

        pulser_locations_ENU['physical'] = {}

        origin = loadAntennaZeroLocation(deploy_index=deploy_index)
        for key, location in pulser_locations.items():
            pulser_locations_ENU['physical'][key] = pm.geodetic2enu(location[0],location[1],location[2],origin[0],origin[1],origin[2])

        if type(deploy_index) == str:
            #These are using the physical coordinates and are not calibrated phase center positions.
            pulser_locations_ENU['hpol'] = {}
            pulser_locations_ENU['hpol_hesse_error'] = {}
            pulser_locations_ENU['vpol'] = {}
            pulser_locations_ENU['vpol_hesse_error'] = {}
            for key in list(pulser_locations.keys()):
                pulser_locations_ENU['hpol'][key] = pulser_locations_ENU['physical'][key]
                pulser_locations_ENU['hpol_hesse_error'][key] = [2, 2, 2]
                pulser_locations_ENU['vpol'][key] = pulser_locations_ENU['physical'][key]
                pulser_locations_ENU['vpol_hesse_error'][key] = [2, 2, 2]

        elif deploy_index <= 9:
            #pulser_locations_ENU['vpol'] = {'run1507':[275.708465, -372.224572, -82.673435], 'run1509':[1027.431897, -492.547030, -155.078725], 'run1511':[178.030733, 331.491744, -39.509867]}
            #pulser_locations_ENU['vpol_hesse_error'] = {'run1507':[1.106217, 1.246325, 2.503419], 'run1509':[5.552711, 2.469107, 5.305297], 'run1511':[1.324100, 2.146287, 2.310413]}
            
            '''
            #These are the ones I got by flipping channel 2
            pulser_locations_ENU['hpol'] = {'run1507':[253.799742, -355.808099, -117.460144], 'run1509':[1137.872525, -534.620695, -189.860634], 'run1511':[117.111896, 303.926298, -74.299903]}                                                         
            pulser_locations_ENU['hpol_hesse_error'] = {'run1507':[0.501879, 0.520719, 1.090585], 'run1509':[2.701943, 1.187494, 3.423798], 'run1511':[2.560162, 6.026819, 3.490432]}
            pulser_locations_ENU['vpol'] = {'run1507':[263.002766, -355.657916, -80.473571], 'run1509':[1067.737570, -511.201739, -152.867512], 'run1511':[179.261666, 338.184460, -37.316588]}
            pulser_locations_ENU['vpol_hesse_error'] = {'run1507':[0.848562, 0.978776, 1.976002], 'run1509':[2.842634, 1.265834, 3.353987], 'run1511':[1.327852, 2.182353, 2.249852]}
            '''

            #These are the ones I got prior to 11/21/2019
            pulser_locations_ENU['hpol'] = {'run1507':[259.417378, -353.989882, -84.468321], 'run1509':[1129.874543, -528.948053, -156.869667], 'run1511':[189.018118, 338.618832, -41.302878]}
            pulser_locations_ENU['hpol_hesse_error'] = {'run1507':[1.335408, 1.471356, 3.081678], 'run1509':[9.068532, 3.966986, 8.780782], 'run1511':[2.157532, 3.556144, 4.533434]}
            pulser_locations_ENU['vpol'] = {'run1507':[271.225702, -362.785806, -75.741218], 'run1509':[1063.720642, -504.948969, -148.130744], 'run1511':[181.798419, 331.680671, -32.583995]}
            pulser_locations_ENU['vpol_hesse_error'] = {'run1507':[1.080508, 1.216558, 2.517439], 'run1509':[5.776634, 2.552221, 5.590785], 'run1511':[1.319455, 2.150750, 2.325213]}

            #pulser_locations_ENU['hpol'] = {'run1507':[265.441241, -366.161638, -91.314401], 'run1509':[1065.399706, -508.295499, -163.706607], 'run1511':[178.535899, 344.684624, -48.158593]}
            #pulser_locations_ENU['hpol_hesse_error'] = {'run1507':[1.384200, 1.534385, 3.015226], 'run1509':[8.512122, 3.788872, 7.223959], 'run1511':[2.282271, 3.801014, 4.190135]}
        elif deploy_index > 9:
            #These are using the physical coordinates and are not calibrated phase center positions.
            print('Using physical location GPS measurements for pulser phase centers.')
            pulser_locations_ENU['hpol'] = {'run1507':pulser_locations_ENU['physical']['run1507'], 'run1509':pulser_locations_ENU['physical']['run1509'], 'run1511':pulser_locations_ENU['physical']['run1511']}
            pulser_locations_ENU['hpol_hesse_error'] = {'run1507':[2, 2, 2], 'run1509':[2, 2, 2], 'run1511':[2, 2, 2]}
            pulser_locations_ENU['vpol'] = {'run1507':pulser_locations_ENU['physical']['run1507'], 'run1509':pulser_locations_ENU['physical']['run1509'], 'run1511':pulser_locations_ENU['physical']['run1511']}
            pulser_locations_ENU['vpol_hesse_error'] = {'run1507':[2, 2, 2], 'run1509':[2, 2, 2], 'run1511':[2, 2, 2]}

        return pulser_locations_ENU
    except Exception as e:
        print('\nError in %s'%inspect.stack()[0][3])
        print(e)
        exc_type, exc_obj, exc_tb = sys.exc_info()
        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
        print(exc_type, fname, exc_tb.tb_lineno)



def plotStationAndPulsers(deploy_index=default_deploy,plot_phase=False, plot_pulsers=False):
    '''
    Currently only intended to plot the most recent station with the three pulsers that we used for it.
    '''
    try:
        antennas_physical, antennas_phase_hpol, antennas_phase_vpol = loadAntennaLocationsENU(deploy_index=deploy_index)

        colors = ['#1f77b4','#ff7f0e','#2ca02c','#d62728']
        pulser_colors = ['#ffaaff','#55ffff','k']

        if plot_pulsers == True:
            fig = plt.figure()
            fig.canvas.set_window_title(str(deploy_index))#'Antenna + Pulser Locations')
            plt.suptitle(str(deploy_index))
            ax = fig.add_subplot(111, projection='3d')

            for i, a in antennas_physical.items():
                ax.scatter(a[0], a[1], a[2], marker='o',color=colors[i],label='Physical %i'%i,alpha=0.8)

            if plot_phase == True:
                for i, a in antennas_phase_hpol.items():
                    ax.plot([antennas_physical[i][0],antennas_phase_hpol[i][0]],[antennas_physical[i][1],antennas_phase_hpol[i][1]],[antennas_physical[i][2],antennas_phase_hpol[i][2]],color=colors[i],linestyle='--',alpha=0.5)
                    ax.scatter(a[0], a[1], a[2], marker='*',color=colors[i],label='%s Phase Center %i'%('Hpol', i),alpha=0.8)
                for i, a in antennas_phase_vpol.items():
                    ax.plot([antennas_physical[i][0],antennas_phase_vpol[i][0]],[antennas_physical[i][1],antennas_phase_vpol[i][1]],[antennas_physical[i][2],antennas_phase_vpol[i][2]],color=colors[i],linestyle='--',alpha=0.5)
                    ax.scatter(a[0], a[1], a[2], marker='^',color=colors[i],label='%s Phase Center %i'%('Vpol', i),alpha=0.8)



            pulser_locations = loadPulserPhaseLocationsENU()
            for site, key in enumerate(['run1507','run1509','run1511']):
                site += 1
                ax.scatter(pulser_locations['physical'][key][0], pulser_locations['physical'][key][1], pulser_locations['physical'][key][2], color=pulser_colors[site-1], marker='o',label='Physical Pulser Site %i'%site,alpha=0.8)

            if plot_phase == True:
                ax.plot([pulser_locations['hpol']['run1507'][0],pulser_locations['physical']['run1507'][0]],[pulser_locations['hpol']['run1507'][1],pulser_locations['physical']['run1507'][1]],[pulser_locations['hpol']['run1507'][2],pulser_locations['physical']['run1507'][2]],color=pulser_colors[0],linestyle='--',alpha=0.5)
                ax.scatter( pulser_locations['hpol']['run1507'][0] , pulser_locations['hpol']['run1507'][1] , pulser_locations['hpol']['run1507'][2] , color=pulser_colors[0] , marker='*',alpha=0.8)

                ax.plot([pulser_locations['hpol']['run1509'][0],pulser_locations['physical']['run1509'][0]],[pulser_locations['hpol']['run1509'][1],pulser_locations['physical']['run1509'][1]],[pulser_locations['hpol']['run1509'][2],pulser_locations['physical']['run1509'][2]],color=pulser_colors[1],linestyle='--',alpha=0.5)
                ax.scatter( pulser_locations['hpol']['run1509'][0] , pulser_locations['hpol']['run1509'][1] , pulser_locations['hpol']['run1509'][2] , color=pulser_colors[1] , marker='*',alpha=0.8)

                ax.plot([pulser_locations['hpol']['run1511'][0],pulser_locations['physical']['run1511'][0]],[pulser_locations['hpol']['run1511'][1],pulser_locations['physical']['run1511'][1]],[pulser_locations['hpol']['run1511'][2],pulser_locations['physical']['run1511'][2]],color=pulser_colors[2],linestyle='--',alpha=0.5)
                ax.scatter( pulser_locations['hpol']['run1511'][0] , pulser_locations['hpol']['run1511'][1] , pulser_locations['hpol']['run1511'][2] , color=pulser_colors[2] , marker='*',alpha=0.8)

                ax.plot([pulser_locations['vpol']['run1507'][0],pulser_locations['physical']['run1507'][0]],[pulser_locations['vpol']['run1507'][1],pulser_locations['physical']['run1507'][1]],[pulser_locations['vpol']['run1507'][2],pulser_locations['physical']['run1507'][2]],color=pulser_colors[0],linestyle='--',alpha=0.5)
                ax.scatter( pulser_locations['vpol']['run1507'][0] , pulser_locations['vpol']['run1507'][1] , pulser_locations['vpol']['run1507'][2] , color=pulser_colors[0] , marker='^',alpha=0.8)

                ax.plot([pulser_locations['vpol']['run1509'][0],pulser_locations['physical']['run1509'][0]],[pulser_locations['vpol']['run1509'][1],pulser_locations['physical']['run1509'][1]],[pulser_locations['vpol']['run1509'][2],pulser_locations['physical']['run1509'][2]],color=pulser_colors[1],linestyle='--',alpha=0.5)
                ax.scatter( pulser_locations['vpol']['run1509'][0] , pulser_locations['vpol']['run1509'][1] , pulser_locations['vpol']['run1509'][2] , color=pulser_colors[1] , marker='^',alpha=0.8)

                ax.plot([pulser_locations['vpol']['run1511'][0],pulser_locations['physical']['run1511'][0]],[pulser_locations['vpol']['run1511'][1],pulser_locations['physical']['run1511'][1]],[pulser_locations['vpol']['run1511'][2],pulser_locations['physical']['run1511'][2]],color=pulser_colors[2],linestyle='--',alpha=0.5)
                ax.scatter( pulser_locations['vpol']['run1511'][0] , pulser_locations['vpol']['run1511'][1] , pulser_locations['vpol']['run1511'][2] , color=pulser_colors[2] , marker='^',alpha=0.8)


            ax.set_xlabel('E (m)')
            ax.set_ylabel('N (m)')
            ax.set_zlabel('Relative Elevation (m)')
            plt.legend()


        fig = plt.figure()
        fig.canvas.set_window_title(str(deploy_index))#'Antenna Locations')
        plt.suptitle(str(deploy_index))
        ax = fig.add_subplot(111, projection='3d')

        for i, a in antennas_physical.items():
            ax.scatter(a[0], a[1], a[2], marker='o',color=colors[i],label='Physical %i'%i,alpha=0.8)

        if plot_phase == True:
            for i, a in antennas_phase_hpol.items():
                ax.plot([antennas_physical[i][0],antennas_phase_hpol[i][0]],[antennas_physical[i][1],antennas_phase_hpol[i][1]],[antennas_physical[i][2],antennas_phase_hpol[i][2]],color=colors[i],linestyle='--',alpha=0.5)
                ax.scatter(a[0], a[1], a[2], marker='*',color=colors[i],label='%s Phase Center %i'%('Hpol', i),alpha=0.8)
            for i, a in antennas_phase_vpol.items():
                ax.plot([antennas_physical[i][0],antennas_phase_vpol[i][0]],[antennas_physical[i][1],antennas_phase_vpol[i][1]],[antennas_physical[i][2],antennas_phase_vpol[i][2]],color=colors[i],linestyle='--',alpha=0.5)
                ax.scatter(a[0], a[1], a[2], marker='^',color=colors[i],label='%s Phase Center %i'%('Vpol', i),alpha=0.8)

        ax.set_zlim(-1, 16)
        ax.set_xlim(-40,5)
        ax.set_ylim(-50,5)
        ax.set_xlabel('E (m)')
        ax.set_ylabel('N (m)')
        ax.set_zlabel('Relative Elevation (m)')
        plt.legend()
    except Exception as e:
        print('\nError in %s'%inspect.stack()[0][3])
        print(e)
        exc_type, exc_obj, exc_tb = sys.exc_info()
        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
        print(exc_type, fname, exc_tb.tb_lineno)



def loadClockRates():
    '''
    Loads a dictionary containing the known clock rates as calculated using the clock_correct.py scipt.
    These are given in Hz.
    '''
    clock_rates = {
    'run782'    :31249808.91966798,
    'run783'    :31249808.948130235,
    'run784'    :31249809.35802664,
    'run785'    :31249809.82779526,
    'run788'    :31249807.839061476,
    'run789'    :31249809.895620257,
    'run792'    :31249812.04283368,
    'run793'    :31249809.22371152,
    'run1506'   :31249822.962542757,
    'run1507'   :31249815.193117745,
    'run1508'   :31249811.59632718,
    'run1509'   :31249810.666976035,
    'run1511'   :31249840.967325963}
    #'run5181'   :31249782.340630278}
    clock_rates['default'] = numpy.mean([v for key,v in clock_rates.items()])
    return clock_rates


def loadIgnorableEventids():
    '''
    This function loads dictionaries containing eventids that one may want to ignore.

    For instance eventids that are known pulser event ids but ones you want to ignore
    when making a template. 
    '''

    ignore_eventids = {}
    ignore_eventids['run793'] = numpy.array([ 96607,  96657,  96820,  96875,  98125,  98588,  99208, 100531,\
                           101328, 101470, 101616, 101640, 101667, 102159, 102326, 102625,\
                           103235, 103646, 103842, 103895, 103977, 104118, 104545, 105226,\
                           105695, 105999, 106227, 106476, 106622, 106754, 106786, 106813,\
                           106845, 107022, 107814, 108162, 110074, 110534, 110858, 111098,\
                           111197, 111311, 111542, 111902, 111941, 112675, 112713, 112864,\
                           112887, 113062, 113194, 113392, 113476, 113957, 114069, 114084,\
                           114295, 114719, 114738, 114755, 114942, 115055, 115413, 115442,\
                           115465, 115491, 115612, 116065])
    #For some reason there is a shift in arrival times that makes these different than later events?
    ignore_eventids['run1509'] = numpy.array([  2473, 2475, 2477, 2479, 2481, 2483, 2485, 2487, 2489, 2491, 2493,\
                                               2495, 2497, 2499, 2501, 2503, 2505, 2507, 2509, 2511, 2513, 2515,\
                                               2517, 2519, 2521, 2523, 2525, 2527, 2529, 2531, 2533, 2535, 2537,\
                                               2539, 2541, 2543, 2545, 2547, 2549, 2551, 2553, 2555, 2557, 2559,\
                                               2561, 2563, 2565, 2567, 2569, 2571, 2573, 2575, 2577, 2579, 2581,\
                                               2583, 2585, 2587, 2589, 2591, 2593, 2595, 2597, 2599, 2601, 2603,\
                                               2605, 2607, 2609, 2611, 2613, 2615, 2617, 2619, 2621, 2623, 2625,\
                                               2627, 2629, 2631, 2633, 2635, 2637, 2639, 2641, 2643, 2645, 2647,\
                                               2649, 2651, 2653, 2655, 2657, 2659, 2661, 2663, 2665, 2667, 2669,\
                                               2671, 2673, 2675, 2677, 2679, 2681, 2683, 2685, 2687, 2689, 2691,\
                                               2693, 2695, 2697, 2699, 2701, 2703, 2705, 2707, 2709, 2711, 2713,\
                                               2715, 2717, 2719, 2721, 2723, 2725, 2727, 2729, 2731, 2733, 2735,\
                                               2737, 2739, 2741, 2743, 2745, 2747, 2749, 2751, 2753, 2755, 2757,\
                                               2759, 2761, 2763, 2765, 2767, 2769, 2771, 2773, 2775, 2777, 2779,\
                                               2781, 2783, 2785, 2787, 2789, 2791, 2793, 2795, 2797, 2799, 2801,\
                                               2803, 2805, 2807, 2809, 2811, 2813, 2815, 2817, 2819, 2821, 2823,\
                                               2825, 2827, 2829, 2831, 2833, 2835, 2837, 2839, 2841, 2843, 2845,\
                                               2847, 2849, 2851, 2853, 2855, 2857, 2859])
    ignore_eventids['run1511'] = numpy.array([1052, 1162, 1198, 1224, 1230, 1232, 1242, 1244, 1262, 1264, 1286,\
                                        1310, 1328, 1330, 1346, 1350, 1370, 1372, 1382, 1416, 1420, 1426,\
                                        1428, 1434, 1442, 1458, 1462, 1464, 1470, 1482, 1492, 1494, 1502,\
                                        1504, 1506, 1528, 1536, 1538, 1574, 1592, 1614, 1636, 1644, 1654,\
                                        1668, 1670, 1672, 1680, 1684, 1686, 1694, 1698, 1710, 1726, 1734,\
                                        1736, 1738, 1742, 1774, 1776, 1782, 1786, 1794, 1798, 1804, 1826,\
                                        1832, 1838, 1848, 1860, 1862, 1868, 1876, 1880, 1882, 1888, 1890,\
                                        1892, 1894, 1908, 1912, 1950, 1960, 1962, 1964, 1974, 1992, 2004,\
                                        2012, 2014, 2018, 2030, 2034, 2048, 2050, 2054, 2058, 2066, 2068,\
                                        2070, 2076, 2078, 2096, 2100, 2108, 2120, 2124, 2126, 2134, 2146,\
                                        2152, 2162, 2176, 2182, 2184, 2186, 2196, 2200, 2202, 2216, 2220,\
                                        2230, 2236, 2242, 2248, 2258, 2266, 2270, 2280, 2302, 2304, 2316,\
                                        2330, 2348, 2352, 2356, 2360, 2362, 2368, 2372, 2376, 2388, 2390,\
                                        2392, 2394, 2396, 2398, 2400, 2406, 2408, 2416, 2426, 2428, 2442,\
                                        2452, 2458, 2466, 2470, 2472, 2476, 2484, 2486, 2498, 2504, 2516,\
                                        2530, 2532, 2534, 2542, 2546, 2570, 2592, 2594, 2596, 2598, 2600,\
                                        2602, 2608, 2620, 2622, 2624, 2636, 2638, 2650, 2660, 2664, 2670,\
                                        2686, 2692, 2698, 2700, 2702, 2706, 2716, 2718, 2740, 2750, 2754])
    ignore_eventids['run1507'] = numpy.loadtxt(os.environ['BEACON_ANALYSIS_DIR'] + 'tools/eventids/run1507_pulser_ignoreids.csv',delimiter=',').astype(int)
    ignore_eventids['run1509'] = numpy.sort(numpy.append(ignore_eventids['run1509'],numpy.loadtxt(os.environ['BEACON_ANALYSIS_DIR'] + 'tools/eventids/run1509_pulser_ignoreids.csv',delimiter=',').astype(int)))
    ignore_eventids['run1511'] = numpy.sort(numpy.append(ignore_eventids['run1511'],numpy.loadtxt(os.environ['BEACON_ANALYSIS_DIR'] + 'tools/eventids/run1511_pulser_ignoreids.csv',delimiter=',').astype(int)))
    return ignore_eventids

def loadPulserEventids(remove_ignored=True):
    '''
    Loads a dictionary containing the known eventids for pulsers.

    If subsets of runs are known to be different, this dictionary may contain
    an additional layer of keys seperating the events.  The code that uses this should
    known how to handle this. 
    '''
    known_pulser_ids = {}
    known_pulser_ids['run781'] = numpy.array([])
    known_pulser_ids['run782'] = numpy.loadtxt(os.environ['BEACON_ANALYSIS_DIR'] + 'tools/eventids/run782_pulser_eventids.csv',delimiter=',').astype(int)
    known_pulser_ids['run783'] = numpy.loadtxt(os.environ['BEACON_ANALYSIS_DIR'] + 'tools/eventids/run783_pulser_eventids.csv',delimiter=',').astype(int)
    known_pulser_ids['run784'] = numpy.loadtxt(os.environ['BEACON_ANALYSIS_DIR'] + 'tools/eventids/run784_pulser_eventids.csv',delimiter=',').astype(int)
    known_pulser_ids['run785'] = numpy.loadtxt(os.environ['BEACON_ANALYSIS_DIR'] + 'tools/eventids/run785_pulser_eventids.csv',delimiter=',').astype(int)
    known_pulser_ids['run786'] = numpy.array([])
    known_pulser_ids['run787'] = numpy.array([])
    known_pulser_ids['run788'] = numpy.loadtxt(os.environ['BEACON_ANALYSIS_DIR'] + 'tools/eventids/run788_pulser_eventids.csv',delimiter=',').astype(int)
    known_pulser_ids['run789'] = numpy.loadtxt(os.environ['BEACON_ANALYSIS_DIR'] + 'tools/eventids/run789_pulser_eventids.csv',delimiter=',').astype(int)

    known_pulser_ids['run792'] = \
        numpy.array([115156, 115228, 115256, 115276, 115283, 115315, 115330, 115371,\
        115447, 115612, 115872, 116230, 116262, 116462, 116473, 116479,\
        116486, 116511, 116524, 116603, 116619, 116624, 116633, 116760,\
        116790, 116816, 117026, 117050, 117175, 117195, 117237, 117247,\
        117258, 117315, 117378, 117540, 117837, 117858, 117874, 117933,\
        117949, 118116, 118139, 118167, 118208, 118219, 118227, 118241,\
        118256, 118267, 118295, 118364, 118423, 118461, 118497, 118518,\
        118644, 118662, 118676, 118685, 118719, 118752, 118856, 118872,\
        118889, 118908, 118930, 118946, 118994, 119038, 119053, 119064,\
        119070, 119094, 119150, 119161, 119177, 119208, 119223, 119304,\
        119315, 119339, 119346, 119371, 119390, 119401, 119408, 119414,\
        119431, 119434, 119458, 119472, 119478, 119508, 119517, 119555,\
        119578, 119598, 119629, 119636, 119648, 119660, 119671, 119844,\
        120009, 120107, 120115, 120202, 120225, 120241, 120249, 120263,\
        120276, 120281, 120292, 120374, 120587, 120607, 120613, 120628,\
        120632, 120905, 120910, 120916, 120925, 120941, 121019, 121081,\
        121170, 121318, 121382, 121460, 121489, 121510, 121725, 121736,\
        121741, 121751, 121765, 121769, 121803, 121876, 121981, 122001,\
        122014, 122021, 122053, 122073, 122093, 122166, 122293, 122311,\
        122403, 122455, 122508, 122551, 122560, 122579, 122723, 122761,\
        122797])
    known_pulser_ids['run793'] = \
        numpy.array([    96607,  96632,  96657,  96684,  96762,  96820,  96875,  96962,\
        97532,  97550,  97583,  97623,  97636,  97661,  97681,  97698,\
        97720,  97739,  97761,  97782,  97803,  97824,  97846,  97876,\
        97932,  97954,  97979,  98006,  98030,  98050,  98075,  98125,\
        98148,  98163,  98190,  98207,  98277,  98431,  98450,  98472,\
        98507,  98545,  98561,  98577,  98587,  98588,  98631,  98657,\
        98674,  98687,  98707,  98731,  98799,  98815,  99040,  99086,\
        99110,  99158,  99208,  99227,  99245,  99264,  99288,  99309,\
        99340,  99353,  99375,  99398,  99423,  99440,  99454,  99477,\
        99493,  99513,  99530,  99548,  99911,  99942,  99951,  99985,\
        100002, 100019, 100035, 100055, 100073, 100096, 100114, 100153,\
        100189, 100294, 100424, 100442, 100531, 100591, 100748, 100767,\
        100899, 100979, 101000, 101011, 101025, 101129, 101146, 101161,\
        101177, 101191, 101212, 101227, 101261, 101281, 101297, 101311,\
        101328, 101363, 101378, 101457, 101470, 101485, 101500, 101527,\
        101540, 101556, 101578, 101616, 101640, 101667, 101736, 101760,\
        101819, 102100, 102116, 102136, 102159, 102178, 102194, 102215,\
        102239, 102255, 102274, 102309, 102326, 102364, 102382, 102398,\
        102417, 102443, 102464, 102484, 102516, 102529, 102551, 102562,\
        102574, 102587, 102606, 102625, 102648, 102667, 102693, 102713,\
        102733, 102758, 102775, 102796, 102811, 102830, 102847, 102870,\
        102883, 102904, 102924, 102944, 102965, 102982, 102997, 103017,\
        103035, 103054, 103075, 103097, 103116, 103135, 103156, 103176,\
        103195, 103214, 103235, 103249, 103264, 103283, 103301, 103323,\
        103340, 103390, 103407, 103419, 103438, 103456, 103468, 103479,\
        103497, 103512, 103528, 103540, 103555, 103578, 103593, 103617,\
        103627, 103646, 103665, 103679, 103697, 103715, 103731, 103747,\
        103761, 103774, 103800, 103818, 103842, 103880, 103895, 103921,\
        103965, 103977, 103995, 104008, 104025, 104055, 104073, 104118,\
        104142, 104152, 104174, 104191, 104204, 104220, 104255, 104279,\
        104340, 104398, 104430, 104487, 104515, 104545, 104572, 104606,\
        104632, 104656, 104721, 104745, 104779, 104812, 104836, 105082,\
        105119, 105147, 105191, 105226, 105304, 105329, 105352, 105407,\
        105429, 105454, 105477, 105510, 105530, 105560, 105586, 105620,\
        105641, 105667, 105695, 105723, 105749, 105779, 105804, 105832,\
        105881, 105897, 105967, 105999, 106017, 106043, 106063, 106093,\
        106152, 106227, 106397, 106421, 106461, 106476, 106516, 106538,\
        106559, 106581, 106622, 106680, 106730, 106754, 106765, 106786,\
        106813, 106845, 106869, 106891, 106916, 106942, 106966, 107022,\
        107052, 107070, 107088, 107114, 107126, 107153, 107203, 107221,\
        107249, 107275, 107302, 107325, 107341, 107356, 107382, 107407,\
        107433, 107461, 107489, 107499, 107522, 107546, 107571, 107596,\
        107620, 107646, 107672, 107692, 107718, 107744, 107764, 107790,\
        107814, 107835, 107856, 107881, 107911, 107940, 108115, 108131,\
        108162, 108184, 108209, 108233, 108275, 108294, 108319, 108373,\
        108827, 108878, 108926, 108969, 108984, 109012, 109054, 109087,\
        109106, 109121, 109139, 109161, 109185, 109212, 109261, 110029,\
        110074, 110100, 110126, 110142, 110163, 110181, 110203, 110221,\
        110235, 110258, 110274, 110429, 110442, 110471, 110534, 110580,\
        110599, 110624, 110643, 110661, 110684, 110713, 110741, 110777,\
        110795, 110858, 110884, 110900, 110917, 110970, 110993, 111005,\
        111035, 111056, 111083, 111098, 111126, 111145, 111183, 111197,\
        111238, 111274, 111293, 111311, 111331, 111368, 111389, 111415,\
        111440, 111456, 111481, 111504, 111522, 111542, 111584, 111600,\
        111640, 111702, 111714, 111729, 111750, 111796, 111823, 111841,\
        111855, 111873, 111885, 111902, 111919, 111941, 111956, 111980,\
        111991, 112010, 112025, 112035, 112051, 112068, 112080, 112092,\
        112115, 112140, 112160, 112177, 112196, 112213, 112258, 112294,\
        112315, 112610, 112626, 112656, 112675, 112701, 112713, 112730,\
        112749, 112765, 112812, 112844, 112864, 112887, 112907, 112934,\
        112952, 112972, 113038, 113062, 113156, 113178, 113194, 113235,\
        113259, 113275, 113295, 113312, 113333, 113357, 113375, 113392,\
        113414, 113476, 113496, 113519, 113889, 113930, 113957, 114004,\
        114048, 114069, 114084, 114127, 114147, 114173, 114196, 114226,\
        114266, 114295, 114313, 114331, 114356, 114374, 114399, 114428,\
        114457, 114500, 114525, 114569, 114589, 114633, 114655, 114677,\
        114703, 114719, 114738, 114755, 114777, 114789, 114801, 114852,\
        114879, 114900, 114942, 114960, 114996, 115019, 115055, 115095,\
        115115, 115130, 115197, 115217, 115236, 115275, 115283, 115303,\
        115321, 115337, 115377, 115413, 115442, 115465, 115491, 115535,\
        115554, 115570, 115584, 115612, 115630, 115644, 115662, 115675,\
        115689, 115708, 115721, 115735, 115759, 115787, 115806, 115823,\
        115844, 115870, 115888, 115912, 115935, 115963, 115976, 115996,\
        116019, 116044, 116065, 116082, 116101, 116115, 116155, 116173,\
        116184])

    known_pulser_ids['run1507'] = {}
    known_pulser_ids['run1507']['hpol'] = numpy.loadtxt(os.environ['BEACON_ANALYSIS_DIR'] + 'tools/eventids/run1507_pulser_eventids_site_1a_bicone_hpol_16dB.csv',delimiter=',').astype(int)
    known_pulser_ids['run1507']['vpol'] = numpy.loadtxt(os.environ['BEACON_ANALYSIS_DIR'] + 'tools/eventids/run1507_pulser_eventids_site_1a_bicone_vpol_16dB.csv',delimiter=',').astype(int)

    known_pulser_ids['run1509'] = {}
    known_pulser_ids['run1509']['hpol'] = numpy.loadtxt(os.environ['BEACON_ANALYSIS_DIR'] + 'tools/eventids/run1509_pulser_eventids_site_2_bicone_hpol_22dB.csv',delimiter=',').astype(int)
    known_pulser_ids['run1509']['vpol'] = numpy.loadtxt(os.environ['BEACON_ANALYSIS_DIR'] + 'tools/eventids/run1509_pulser_eventids_site_2_bicone_vpol_17dB.csv',delimiter=',').astype(int)

    known_pulser_ids['run1511'] = {}
    known_pulser_ids['run1511']['hpol'] = numpy.loadtxt(os.environ['BEACON_ANALYSIS_DIR'] + 'tools/eventids/run1511_pulser_eventids_site_3_bicone_hpol_20dB.csv',delimiter=',').astype(int)
    known_pulser_ids['run1511']['vpol'] = numpy.loadtxt(os.environ['BEACON_ANALYSIS_DIR'] + 'tools/eventids/run1511_pulser_eventids_site_3_bicone_vpol_20dB.csv',delimiter=',').astype(int)

    known_pulser_ids['run5182'] = {} #These are probably wrong
    known_pulser_ids['run5182']['hpol'] = numpy.array([  45,   48,   57,   66,   71,   80,   83,   86,   96,  102,  110,\
                                                        124,  152,  162,  192,  209,  224,  250,  253,  287,  314,  325,\
                                                        329,  343,  352,  355,  358,  361,  371,  380,  404,  407,  411,\
                                                        430,  439,  455,  465,  470,  481,  489,  492,  527,  543,  553,\
                                                        560,  563,  575,  593,  607,  610,  613,  618,  633,  638,  654,\
                                                        659,  684,  701,  714,  722,  727,  730,  733,  738,  748,  755,\
                                                        760,  769,  789,  816,  826,  832,  845,  854,  877,  882,  896,\
                                                        907,  910,  925,  949,  986,  990,  997, 1006, 1095, 1098, 1105,\
                                                       1118])
    known_pulser_ids['run5182']['vpol'] = numpy.copy(known_pulser_ids['run5182']['hpol'])

    known_pulser_ids['run5185'] = {}
    known_pulser_ids['run5185']['hpol'] = numpy.array([ 688,  700,  997, 1033, 1154, 1257, 1289, 1341, 1512, 1630, 1705, 1773, 1876, 3077])
    known_pulser_ids['run5185']['vpol'] = numpy.copy(known_pulser_ids['run5185']['hpol'])

    

    known_pulser_ids['run5191'] = {}
    known_pulser_ids['run5191']['hpol'] = numpy.array([ 138,  459,  551,  902, 1364, 1391, 1439, 1448, 1454, 1536, 1618,\
                                                        1740, 1922, 2027, 2272, 2511, 2660, 3125, 3249, 3391])

    known_pulser_ids['run5191']['vpol'] = numpy.copy(known_pulser_ids['run5191']['hpol'])


    
    #This includes events that triggered both in trigtype 2 and 3.
    known_pulser_ids['run5195'] = {}
    known_pulser_ids['run5195']['hpol'] = numpy.array([ 709,  745,  766,  878,  941, 1004, 1074, 1107, 1242, 1277, 1284,\
                                                       1340, 1375, 1389, 1409, 1515, 1557, 1703, 1710, 1717, 1724, 1738,\
                                                       1752, 1766, 1771, 1779, 1787, 1794, 1800, 1813, 1820, 1843, 1850,\
                                                       1857, 1864, 1868, 1884, 1892, 1898, 1904, 1910, 1918, 1927, 1931,\
                                                       1941, 1948, 1954, 1960, 1965, 1988, 1995, 2002, 2009, 2015, 2022,\
                                                       2029, 2036, 2044, 2051, 2058, 2064, 2079, 2086, 2100, 2114, 2135,\
                                                       2149, 2169, 2212, 2233, 2247, 2296, 2303, 2310, 2316, 2324, 2331,\
                                                       2337, 2359, 2378, 2393, 2401, 2407, 2415, 2422, 2429, 2434, 2449,\
                                                       2463, 2477, 2483, 2499, 2513, 2539, 2540, 2547, 2577, 2588, 2594,\
                                                       2604, 2611, 2624, 2635, 2644, 2649, 2659, 2677, 2688, 2693, 2710,\
                                                       2715, 2726, 2736, 2761, 2776, 2792, 2817, 2840, 2845, 2865, 2911,\
                                                       2921, 2927, 2957, 2960, 2965, 2970, 2978, 2986, 2989, 3000, 3003,\
                                                       3034, 3047, 3051, 3056, 3061, 3075, 3083, 3098, 3101, 3116, 3119,\
                                                       3123, 3128, 3149, 3164, 3169, 3195, 3199, 3226, 3261, 3267, 3271,\
                                                       3277, 3283, 3296, 3303, 3308, 3320, 3325, 3327, 3334, 3339, 3349,\
                                                       3358, 3368, 3373, 3377, 3399, 3405, 3410, 3420, 3426, 3449, 3455,\
                                                       3463, 3469, 3508, 3511, 3521, 3526, 3535, 3560, 3564, 3588, 3592,\
                                                       3607, 3629, 3633, 3656, 3666, 3672, 3681, 3710, 3716, 3758, 3812,\
                                                       3815, 3818, 3826, 3834, 3844, 3861, 3867, 3873, 3882, 3889, 3894,\
                                                       3900, 3914, 3957, 3966, 3976, 3987, 4009, 4014, 4023, 4034, 4048,\
                                                       4052, 4062, 4078, 4098, 4141, 4162, 4216, 4231, 4244, 4278, 4332,\
                                                       4347, 4359, 4373, 4378, 4381, 4391, 4394, 4409, 4436, 4443, 4460,\
                                                       4490, 4494, 4512, 4533, 4541, 4545, 4552, 4564, 4575, 4632, 4656,\
                                                       4665, 4677, 4682, 4688, 4724, 4740, 4780, 4785, 4789, 4815])

    # array([ 709,  745,  766,  878,  941, 1004, 1074, 1107, 1242, 1277, 1284,
    #    1340, 1375, 1389, 1409, 1515, 1557])

    known_pulser_ids['run5195']['vpol'] = numpy.copy(known_pulser_ids['run5195']['hpol'])

    known_pulser_ids['run5198'] = {}
    known_pulser_ids['run5198']['hpol'] = numpy.array([  235,   273,   391,   416,   438,   539,   542,   558,   621,\
                                                         643,   659,   697,   867,   921,   981,  1076,  1243,  1281,\
                                                        1322,  1499,  1701,  1723,  2159,  2270,  2361,  2506,  2692,\
                                                        2805,  2906,  3006,  3174,  3253,  3541,  3791,  3817,  3855,\
                                                        3874,  3955,  4016,  4073,  4255,  4511,  4596,  4618,  4658,\
                                                        4720,  4777,  4850,  4940,  4943,  5001,  5050,  5136,  5260,\
                                                        5269,  5305,  5438,  5442,  5683,  5760,  5966,  5987,  6178,\
                                                        6420,  6479,  6517,  6591,  6596,  6606,  6654,  6747,  6796,\
                                                        6889,  6914,  6983,  7001,  7080,  7180,  7183,  7243,  7987,\
                                                        8013,  8032,  8507,  8512,  8778,  8896,  9090,  9255,  9360,\
                                                        9372,  9417,  9573,  9654,  9839,  9858,  9997, 10391, 10401,\
                                                       10408, 10421, 10482, 10510, 10595, 10925, 10944, 11441, 11534,\
                                                       11573, 11626, 11705, 11752, 11827, 11933, 11941, 12037, 12145,\
                                                       12220, 12319, 12327, 12401, 12522, 12581, 12694, 12748, 12849,\
                                                       12954, 12985, 13392, 13400, 13442, 13487, 13514, 13522, 13525,\
                                                       13657, 13665, 13705, 13708, 13812, 13834, 13857, 13892, 13898,\
                                                       14017, 14054, 14075, 14142, 14230, 14238, 14383, 14441, 14521,\
                                                       14550, 14576, 14630, 14738, 14883, 15003, 15059, 15076, 15542,\
                                                       15622, 15700, 15730, 15775, 15816, 15821, 15849, 15967, 16004,\
                                                       16158, 16386, 16433, 16500, 16530, 16543, 16576, 16745, 16773,\
                                                       16784, 16794, 17051, 17057, 17104, 17377, 17469, 17562, 17752,\
                                                       17758, 17836, 17871, 17967, 17970, 18137, 18228, 18309, 18343,\
                                                       18426, 18538])
    known_pulser_ids['run5198']['vpol'] = numpy.copy(known_pulser_ids['run5198']['hpol'])

    known_pulser_ids['run5167'] = {}
    known_pulser_ids['run5167']['hpol'] = numpy.array([4878, 4901, 4983, 4988, 5059, 5131, 5135, 5154, 5158, 5236, 5249,\
                                                       5282, 5306, 5312, 5327, 5448, 5499, 5668, 5672, 5683, 5731, 5755,\
                                                       5802, 5826, 5921, 5924, 5925, 5985, 5995, 6037, 6054, 6063, 6120,\
                                                       6137, 6156, 6159, 6291, 6293, 6304, 6330, 6430, 6441, 6449, 6526,\
                                                       6538, 6539, 6542, 6555, 6578])
    known_pulser_ids['run5167']['vpol'] = numpy.copy(known_pulser_ids['run5167']['hpol'])


    known_pulser_ids['run5168'] = {}
    known_pulser_ids['run5168']['hpol'] = numpy.array([ 119,  155,  184,  194,  266,  383,  416,  653,  667,  698,  709,\
                                                        743,  787,  788,  819,  924,  962, 1093, 1127, 1296, 1312, 1452,\
                                                       1526, 1531, 1587, 1744, 1746, 1766, 1786, 1870, 1890, 1962, 1984,\
                                                       2030, 2055, 2062, 2131, 2207, 2234, 2278, 2307, 2514, 2527, 2591,\
                                                       2634, 2653, 2654, 2750, 2762, 2823, 2891, 2942, 2969, 3012, 3047,\
                                                       3115, 3123, 3134, 3159, 3160, 3167, 3170, 3206, 3333, 3334, 3349,\
                                                       3367, 3368, 3390, 3400, 3410, 3411, 3419, 3431, 3435, 3461, 3489,\
                                                       4095, 4123, 4194, 4298, 4350, 4957, 5244, 5639, 6372, 6762, 7060,\
                                                       7159, 7316, 7489, 7584, 7673, 8283, 8653, 8811, 8853])
    known_pulser_ids['run5168']['vpol'] = numpy.copy(known_pulser_ids['run5168']['hpol'])

    known_pulser_ids['run5169'] = {}
    known_pulser_ids['run5169']['hpol'] = numpy.array([ 833,  908,  977, 1070, 1107, 1142, 1149, 1180, 1245, 1330, 1354,\
                                                       1357, 1387, 1421, 1434, 1472, 1473, 1549, 1556, 1557, 1561, 1573,\
                                                       1599, 1615, 1627, 1636, 1637, 1652, 1660, 1679, 1702, 1706, 1722,\
                                                       1739, 1743, 1771, 1783, 1785, 1793, 1837, 1845, 1870, 1889, 1894,\
                                                       1896, 1911, 1919, 1925, 1942, 1950, 1969, 1981, 1989, 2004, 2005,\
                                                       2019, 2022, 2024, 2030, 2044, 2047, 2049, 2051, 2057, 2089, 2093,\
                                                       2100, 2102, 2113, 2115, 2120, 2122, 2128, 2156, 2181, 2185, 2187,\
                                                       2191, 2192, 2201, 2217, 2227, 2231, 2241, 2250, 2255, 2262, 2268,\
                                                       2273, 2274, 2277, 2280, 2288, 2290, 2291, 2293, 2294, 2295, 2297,\
                                                       2329, 2333, 2355, 2363, 2410, 2414, 2416, 2420, 2425, 2434, 2435,\
                                                       2436, 2437, 2441, 2472, 2491, 2497, 2506, 2508, 2550, 2568, 2575,\
                                                       2583, 2585, 2591, 2596, 2619, 2623, 2631, 2636, 2647, 2664, 2698,\
                                                       2710, 2720, 2737, 2758, 2765, 2817, 2829, 2848, 2898, 2904, 2935,\
                                                       2944, 2958, 2984, 3000, 3008, 3061, 3062, 3086, 3104, 3135, 3184,\
                                                       3237, 3307, 3376, 3434, 3483, 3613, 3696, 3700, 3891])
    known_pulser_ids['run5169']['vpol'] = numpy.copy(known_pulser_ids['run5169']['hpol'])

    known_pulser_ids['run5170'] = {}
    known_pulser_ids['run5170']['hpol'] = numpy.array([   75,   113,   152,   163,   184,   197,   202,   210,   214,\
                                                         224,   249,   320,   347,   348,   374,   392,   395,   404,\
                                                         412,   489,   508,   557,   586,   587,   589,   596,   612,\
                                                         616,   756,   822,  1027,  1055,  1458,  1606,  1630,  1635,\
                                                        1716,  1764,  1831,  1882,  1966,  1995,  2001,  2100,  2199,\
                                                        2233,  2257,  2320,  2370,  2386,  2402,  2414,  2453,  2471,\
                                                        2477,  2482,  2487,  2488,  2531,  2551,  2561,  2564,  2579,\
                                                        2586,  2591,  2595,  2946,  3217,  3529,  4104,  4185,  4546,\
                                                        4549,  4591,  4710,  4722,  4728,  4813,  5158,  5165,  5174,\
                                                        5259,  5290,  5294,  5335,  5384,  5492,  5622,  5678,  5685,\
                                                        5790,  5866,  5896,  5919,  5930,  5958,  6008,  6099,  6513,\
                                                        6572,  6583,  6610,  6645,  6701,  6707,  6741,  6812,  6915,\
                                                        6949,  6963,  6981,  7079,  7101,  7183,  7209,  7325,  7338,\
                                                        7585,  7686,  9028,  9489,  9551,  9929,  9973, 10075, 10267,\
                                                       10330])
    known_pulser_ids['run5170']['vpol'] = numpy.copy(known_pulser_ids['run5170']['hpol'])

    known_pulser_ids['run5171'] = {}
    known_pulser_ids['run5171']['hpol'] = numpy.array([   43,    57,   280,   296,   824,   985,  1283,  1415,  1453,\
                                                        1509,  1669,  1705,  2021,  2377,  2416,  3153,  3394,  3595,\
                                                        3680,  3792,  4162,  4185,  4302,  4384,  4705,  4971,  5052,\
                                                        6171,  6393,  6596,  6681,  7515,  7568,  7655,  8005,  8292,\
                                                        8351,  8491,  8497,  8526,  8882,  9113,  9139,  9168,  9314,\
                                                        9820, 10369, 10634, 11185, 11200, 11392, 11422, 11550, 11837,\
                                                       12046, 12495, 12694, 12775, 13207, 13811, 14232, 14360, 15041,\
                                                       15240, 15302, 15308, 15828, 15983, 16099, 19892, 19947, 20054,\
                                                       20123, 20425, 20431, 20461, 20623, 20635, 21451, 21454, 22115,\
                                                       22279, 22843, 23119, 23525, 23629, 24111, 24179, 24425, 25334,\
                                                       25460, 25688, 25843])
    known_pulser_ids['run5171']['vpol'] = numpy.copy(known_pulser_ids['run5171']['hpol'])

    known_pulser_ids['run5172'] = {}
    known_pulser_ids['run5172']['hpol'] = numpy.array([ 6011,  6248,  6653,  6780,  6863,  7045,  7056,  7160,  7537,\
                                                        7892,  8078,  9173,  9324, 10322, 10529, 10672, 10961, 11705,\
                                                       14561, 14738, 14851, 15355, 17325, 18248])
    known_pulser_ids['run5172']['vpol'] = numpy.copy(known_pulser_ids['run5172']['hpol'])

    #Might have some signal polution
    known_pulser_ids['run5173'] = {}
    known_pulser_ids['run5173']['hpol'] = numpy.array([ 1634,  1651,  1656,  1657,  1679,  1699,  1718,  1730,  1809,\
                                                        1812,  1813,  1831,  1864,  1867,  1869,  1927,  1964,  1967,\
                                                        1980,  2010,  2044,  2052,  2058,  2061,  2067,  2102,  2119,\
                                                        2160,  2170,  2179,  2259,  2300,  2336,  2358,  2369,  2382,\
                                                        2386,  2399,  2441,  2454,  2456,  2491,  2500,  2562,  2581,\
                                                        2607,  2610,  2613,  2649,  2712,  2737,  2779,  2780,  2791,\
                                                        2801,  2845,  2904,  2906,  2918,  2921,  2941,  2962,  2966,\
                                                        3037,  3088,  3091,  3110,  3123,  3135,  3156,  3204,  3210,\
                                                        3217,  3231,  3234,  3299,  3301,  3305,  3400,  3476,  3492,\
                                                        3503,  3508,  3524,  3528,  3541,  3553,  3562,  3610,  3649,\
                                                        3677,  3713,  3727,  3741,  3746,  3763,  3776,  3792,  3837,\
                                                        3877,  3896,  3914,  3915,  3931,  4014,  4017,  4018,  4028,\
                                                        4030,  4080,  4091,  4096,  4110,  4112,  4117,  4122,  4161,\
                                                        4222,  4224,  4246,  4340,  4397,  4448,  4478,  4521,  4523,\
                                                        4540,  4549,  4572,  4592,  4609,  4698,  4776,  4779,  4780,\
                                                        4810,  4814,  4827,  4878,  4891,  4910,  4911,  4945,  5019,\
                                                        5026,  5052,  5062,  5120,  5163,  5214,  5226,  5300,  5324,\
                                                        5376,  5410,  5418,  5425,  5436,  5438,  5447,  5455,  5475,\
                                                        5484,  5507,  5544,  5552,  5560,  5569,  5578,  5601,  5615,\
                                                        5631,  5688,  5690,  5692,  5697,  5701,  5729,  5756,  5762,\
                                                        5772,  5798,  5833,  5852,  5865,  5872,  5897,  5898,  5981,\
                                                        5995,  6008,  6052,  6065,  6074,  6139,  6179,  6185,  6188,\
                                                        6196,  6197,  6272,  6273,  6275,  6307,  6344,  6356,  6362,\
                                                        6375,  6391,  6473,  6476,  6560,  6567,  6584,  6606,  6613,\
                                                        6622,  6662,  6691,  6715,  6777,  6793,  6807,  6816,  6857,\
                                                        6867,  6894,  6901,  6912,  6926,  6928,  6976,  7022,  7037,\
                                                        7048,  7049,  7096,  7156,  7162,  7198,  7276,  7290,  7313,\
                                                        7346,  7413,  7417,  7419,  7429,  7462,  7480,  7496,  7528,\
                                                        7542,  7603,  7619,  7659,  7680,  7736,  7772,  7795,  7828,\
                                                        7842,  7866,  7888,  7939,  7963,  7977,  8037,  8040,  8054,\
                                                        8057,  8061,  8110,  8125,  8126,  8127,  8128,  8129,  8130,\
                                                        8131,  8133,  8134,  8135,  8137,  8138,  8140,  8141,  8142,\
                                                        8144,  8145,  8147,  8148,  8151,  8152,  8154,  8155,  8156,\
                                                        8158,  8160,  8161,  8162,  8165,  8166,  8168,  8169,  8172,\
                                                        8173,  8174,  8175,  8176,  8177,  8178,  8180,  8181,  8182,\
                                                        8183,  8184,  8185,  8186,  8187,  8189,  8190,  8191,  8192,\
                                                        8194,  8195,  8196,  8197,  8198,  8199,  8200,  8201,  8203,\
                                                        8204,  8205,  8206,  8207,  8208,  8209,  8210,  8212,  8214,\
                                                        8215,  8216,  8217,  8218,  8219,  8220,  8221,  8222,  8223,\
                                                        8224,  8225,  8226,  8227,  8228,  8229,  8251,  8257,  8288,\
                                                        8314,  8343,  8372,  8375,  8431,  8466,  8469,  8472,  8488,\
                                                        8499,  8504,  8515,  8533,  8538,  8545,  8560,  8583,  8589,\
                                                        8596,  8695,  8696,  8723,  8731,  8774,  8812,  8827,  8849,\
                                                        8870,  8900,  8904,  8910,  8911,  8924,  9003,  9040,  9053,\
                                                        9063,  9171,  9214,  9222,  9239,  9253,  9256,  9372,  9386,\
                                                        9450,  9512,  9520,  9545,  9592,  9606,  9618,  9658,  9675,\
                                                        9707,  9716,  9718,  9721,  9726,  9735,  9741,  9752,  9779,\
                                                        9780,  9785,  9817,  9820,  9824,  9877,  9888,  9890,  9919,\
                                                        9928,  9971,  9974, 10013, 10067, 10085, 10105, 10112, 10134,\
                                                       10191, 10240, 10273, 10285, 10297, 10307])
    known_pulser_ids['run5173']['vpol'] = numpy.copy(known_pulser_ids['run5173']['hpol'])

    known_pulser_ids['run5176'] = {}
    known_pulser_ids['run5176']['hpol'] = numpy.array([12830, 12831, 12832, 12833, 12834, 12835, 12836, 12837, 12838,\
                                                       12839, 12840, 12841, 12842, 12843, 12844, 12845, 12846, 12847,\
                                                       12848, 12849, 12850, 12851, 12852, 12853, 12855, 12856, 12857,\
                                                       12858, 12859, 12860, 12861, 12862, 12863, 12864, 12865, 12866,\
                                                       12868, 12869, 12870, 12871, 12872, 12873, 12874, 12875, 12876,\
                                                       12878, 12879, 12880, 12881, 12882, 12883, 12884, 12885, 12886,\
                                                       12888, 12889, 12890, 12891, 12892, 12894, 12895, 12896, 12897,\
                                                       12898, 12899, 12900, 12901, 12903, 12904, 12905, 12906, 12907,\
                                                       12908, 12909, 12910, 12911, 12912, 12914, 12915, 12916, 12917,\
                                                       12918, 12920, 12921, 12922, 12923, 12924, 12925, 12926, 12928,\
                                                       12929, 12930, 12931, 12932, 12934, 12935, 12936, 12937, 12938,\
                                                       12939, 12940, 12941, 12942, 12943, 12944, 12945, 12947, 12948,\
                                                       12949, 12950, 12951, 12952, 12953, 12954, 12955, 12957, 12958,\
                                                       12959, 12960, 12961, 12962, 12963, 12964, 12965, 12966, 12967,\
                                                       12969, 12970, 12971, 12972, 12973, 12974, 12975, 12977, 12978,\
                                                       12979, 12980, 12981, 12982, 12983, 12984, 12985, 12987, 12988,\
                                                       12989, 12990, 12991, 12993, 12994, 12995, 12996, 12997, 12998,\
                                                       12999, 13000, 13001, 13003, 13004, 13005, 13006, 13007, 13008,\
                                                       13009, 13011, 13012, 13013, 13014, 13015, 13016, 13017, 13018,\
                                                       13019, 13020, 13022, 13023, 13024, 13026, 13027, 13028, 13029,\
                                                       13030, 13031, 13032, 13033, 13034, 13035, 13036, 13037, 13038,\
                                                       13039, 13040, 13041, 13042, 13043, 13045, 13046, 13047, 13049,\
                                                       13050, 13051, 13052, 13053, 13054, 13055, 13056, 13058, 13059,\
                                                       13061, 13062, 13063, 13064, 13065, 13066, 13067, 13070, 13071,\
                                                       13072, 13073, 13074, 13075, 13076, 13077, 13078, 13080, 13081,\
                                                       13083, 13084, 13085, 13086, 13087, 13088, 13089, 13090, 13093,\
                                                       13094, 13095, 13096, 13097, 13098, 13099, 13100, 13101, 13102,\
                                                       13103, 13104, 13105, 13106, 13107, 13108, 13109, 13111, 13112,\
                                                       13113, 13114, 13115, 13117, 13118, 13119, 13120, 13121, 13122,\
                                                       13123, 13124, 13125, 13126, 13127, 13128, 13129, 13130, 13131,\
                                                       13133, 13134, 13135, 13136, 13138, 13139, 13140, 13141, 13142,\
                                                       13144, 13145, 13146, 13147, 13148, 13149, 13150, 13151, 13153,\
                                                       13154, 13155, 13156, 13157, 13160, 13161, 13162, 13163, 13164,\
                                                       13165, 13166, 13167, 13169, 13170, 13171, 13172, 13174, 13175,\
                                                       13176, 13177, 13178, 13179, 13180, 13181, 13182, 13183, 13185,\
                                                       13186, 13187, 13188, 13190, 13191, 13192, 13193, 13194, 13195,\
                                                       13196, 13197, 13198, 13199, 13200, 13201, 13202, 13203, 13204,\
                                                       13205, 13206, 13207, 13209, 13210, 13211, 13212, 13214, 13215,\
                                                       13216, 13217, 13219, 13220, 13221, 13222, 13223, 13224, 13226,\
                                                       13227, 13228, 13230, 13231, 13232, 13233, 13234, 13235, 13236,\
                                                       13237, 13238, 13239, 13240, 13241, 13242, 13243, 13244, 13245,\
                                                       13247, 13248, 13249, 13250, 13252, 13253, 13254, 13255, 13256,\
                                                       13257, 13258, 13259, 13260, 13261, 13262, 13263, 13264, 13265,\
                                                       13266, 13267, 13268, 13269, 13271, 13272, 13273, 13274, 13276,\
                                                       13277, 13278, 13279, 13280, 13281, 13282, 13283, 13284, 13285,\
                                                       13286, 13287, 13288, 13290, 13291, 13292, 13293, 13294, 13295,\
                                                       13297, 13298, 13299, 13300, 13301, 13302, 13303, 13304, 13305,\
                                                       13306, 13307, 13308, 13309, 13311, 13312, 13314, 13315, 13316,\
                                                       13317, 13318, 13319, 13320, 13321, 13322, 13323, 13324, 13325,\
                                                       13327, 13328, 13330, 13331, 13332, 13333, 13334, 13335, 13336,\
                                                       13337, 13338, 13340, 13341, 13342, 13344, 13345, 13346, 13347,\
                                                       13348, 13349, 13350, 13351, 13352, 13353, 13354, 13355, 13356,\
                                                       13357, 13358, 13359, 13360, 13361, 13362, 13363, 13364, 13366,\
                                                       13367, 13369, 13370, 13371, 13372, 13373, 13374, 13375, 13376,\
                                                       13377, 13378, 13379, 13380, 13382, 13383, 13384, 13385, 13386,\
                                                       13387, 13388, 13389, 13390, 13391, 13393, 13394, 13395, 13396,\
                                                       13397, 13398, 13399, 13400, 13401, 13402, 13403, 13404, 13405,\
                                                       13407, 13408, 13409, 13410, 13412, 13413, 13414, 13415, 13416,\
                                                       13417, 13418, 13419, 13421, 13422, 13423, 13424, 13425, 13427,\
                                                       13428, 13429, 13430, 13431, 13432, 13433, 13434, 13435, 13436,\
                                                       13437, 13438, 13439, 13440, 13441, 13443, 13444, 13445, 13446,\
                                                       13447, 13448, 13449, 13450, 13451, 13452, 13453, 13455, 13456,\
                                                       13457, 13458, 13459, 13461, 13462, 13463, 13465, 13466, 13467,\
                                                       13468, 13469, 13470, 13471, 13472, 13474, 13475, 13476, 13477,\
                                                       13478, 13479, 13480, 13481, 13482, 13484, 13485, 13486, 13487,\
                                                       13488, 13490, 13491, 13492, 13493, 13494, 13495, 13496, 13497,\
                                                       13498, 13499, 13500, 13502, 13503, 13504, 13505, 13506, 13507,\
                                                       13508, 13509, 13510, 13512, 13513, 13514, 13515, 13516, 13517,\
                                                       13518, 13519, 13520, 13522, 13523, 13524, 13525, 13526, 13527,\
                                                       13529, 13530, 13531, 13532, 13533, 13534, 13535, 13536, 13537,\
                                                       13538, 13539, 13541, 13542, 13543, 13544, 13545, 13546, 13547,\
                                                       13548, 13550, 13551, 13552, 13553, 13554, 13555, 13557, 13558,\
                                                       13559, 13560, 13561, 13563, 13564, 13565, 13566, 13567, 13568,\
                                                       13569, 13570, 13571, 13572, 13573, 13574, 13575, 13576, 13577,\
                                                       13578, 13579, 13580, 13581, 13582, 13583, 13585, 13586, 13588,\
                                                       13589, 13590, 13591, 13592, 13593, 13594, 13595, 13596, 13597,\
                                                       13598, 13599, 13600, 13601, 13602, 13603, 13605, 13607, 13608,\
                                                       13609, 13610, 13611, 13612, 13613, 13615, 13616, 13617, 13619,\
                                                       13620, 13621, 13622, 13623, 13624, 13625, 13626, 13627, 13630,\
                                                       13631, 13632, 13633, 13634, 13635, 13636, 13637, 13639, 13641,\
                                                       13642, 13643, 13644, 13645, 13646, 13647, 13648, 13649, 13650,\
                                                       13652, 13653, 13654, 13655, 13656, 13657, 13658, 13659, 13660,\
                                                       13661, 13663, 13664, 13665, 13666, 13667, 13668, 13669, 13670,\
                                                       13671, 13672, 13673, 13674, 13675, 13676, 13678, 13679, 13680,\
                                                       13682, 13683, 13684, 13685, 13686, 13687, 13688, 13690, 13691,\
                                                       13692, 13693, 13694, 13696, 13697, 13698, 13699, 13700, 13701,\
                                                       13703, 13704, 13705, 13706, 13707, 13708, 13709, 13710, 13712,\
                                                       13713, 13714, 13716, 13717, 13718, 13719, 13720, 13721, 13722,\
                                                       13723, 13724, 13725, 13727, 13728, 13729, 13730, 13731, 13732,\
                                                       13733, 13734, 13736, 13737, 13738, 13739, 13740, 13741, 13742,\
                                                       13743, 13744, 13745, 13746, 13747, 13748, 13749, 13750, 13751,\
                                                       13752, 13753, 13754, 13755, 13756, 13757, 13758, 13759, 13760,\
                                                       13761, 13762, 13763, 13764, 13765, 13766, 13767, 13768, 13769,\
                                                       13770, 13771, 13772, 13773, 13774, 13775, 13776, 13777, 13778,\
                                                       13779, 13780, 13781, 13782, 13783, 13784, 13785, 13786, 13787,\
                                                       13788, 13789, 13790, 13792, 13793, 13794, 13795, 13796, 13797,\
                                                       13798, 13799, 13800, 13801, 13802, 13803, 13804, 13805, 13806,\
                                                       13807, 13808, 13809, 13810, 13812, 13813, 13814, 13815, 13817,\
                                                       13818, 13820, 13821, 13822, 13823, 13824, 13825, 13826, 13827,\
                                                       13828, 13829, 13830, 13831, 13832, 13833, 13834, 13835, 13836,\
                                                       13837, 13838, 13840, 13841, 13842, 13843, 13844, 13845, 13846,\
                                                       13847, 13848, 13849, 13850, 13852, 13853, 13854, 13855, 13856,\
                                                       13857, 13858, 13859, 13860, 13861, 13862, 13863, 13865, 13866,\
                                                       13867, 13868, 13869, 13870, 13871, 13872, 13873, 13874, 13875,\
                                                       13876, 13878, 13879, 13880, 13881, 13882, 13883, 13884, 13885,\
                                                       13886, 13887, 13888, 13889, 13890, 13892, 13893, 13894, 13895,\
                                                       13896, 13897, 13898, 13899, 13901, 13902, 13903, 13904, 13905,\
                                                       13906, 13907, 13908, 13910, 13911, 13912, 13913, 13914, 13915,\
                                                       13916, 13917, 13918, 13920, 13921, 13922, 13923, 13924, 13925,\
                                                       13927, 13928, 13929, 13930, 13931, 13932, 13933, 13934, 13936,\
                                                       13937, 13938, 13939, 13940, 13941, 13943, 13944, 13945, 13946,\
                                                       13947, 13948, 13949, 13950, 13951, 13952, 13953, 13954, 13955,\
                                                       13956, 13957, 13958, 13959, 13960, 13961, 13963, 13964, 13965,\
                                                       13967, 13968, 13969, 13970, 13971, 13972, 13973, 13974, 13975,\
                                                       13976, 13977, 13978, 13979, 13980, 13981, 13982, 13983, 13984,\
                                                       13985, 13986, 13987, 13988, 13990, 13991, 13992, 13993, 13994,\
                                                       13995, 13996, 13997, 13998, 13999, 14000, 14001, 14002, 14003,\
                                                       14004, 14005, 14006, 14007, 14008, 14009, 14010, 14011, 14013,\
                                                       14014, 14015, 14016, 14017, 14018, 14019, 14020, 14021, 14022,\
                                                       14023, 14024, 14025, 14026, 14027, 14028, 14029, 14030, 14031,\
                                                       14032, 14033, 14034, 14035, 14036, 14037, 14038, 14039, 14040,\
                                                       14041, 14042, 14043, 14044, 14045, 14046, 14047, 14048, 14049,\
                                                       14050, 14051, 14052, 14053, 14054, 14055, 14056, 14057, 14058,\
                                                       14059, 14060, 14061, 14062, 14063, 14064, 14065, 14066, 14067,\
                                                       14068, 14069, 14070, 14071, 14072, 14073, 14074, 14075, 14076,\
                                                       14077, 14078, 14079, 14080, 14081, 14082, 14083, 14084, 14085,\
                                                       14086, 14087, 14088, 14089, 14090, 14091, 14092, 14093, 14094,\
                                                       14095, 14096, 14098, 14099, 14100, 14101, 14102, 14103, 14104,\
                                                       14105, 14106, 14107, 14108, 14109, 14110, 14111, 14112, 14113,\
                                                       14114, 14115, 14116, 14117, 14118, 14119, 14120, 14121, 14122,\
                                                       14123, 14124, 14125, 14126, 14127, 14128, 14129, 14130, 14131,\
                                                       14132, 14133, 14134, 14135, 14136, 14137, 14138, 14139, 14140,\
                                                       14141, 14142, 14143, 14144, 14145, 14146, 14147, 14148, 14149,\
                                                       14150, 14151, 14152, 14154, 14155, 14156, 14157, 14158, 14159,\
                                                       14160, 14161, 14162, 14163, 14164, 14165, 14166, 14167, 14168,\
                                                       14169, 14170, 14171, 14172, 14173, 14174, 14175, 14176, 14177,\
                                                       14178, 14179, 14180, 14182, 14183, 14184, 14185, 14186, 14187,\
                                                       14188, 14189, 14190, 14191, 14192, 14193, 14194, 14195, 14196,\
                                                       14197, 14198, 14199, 14200, 14201, 14202, 14203, 14204, 14205,\
                                                       14206, 14207, 14209, 14210, 14211, 14213, 14214, 14215, 14216,\
                                                       14217, 14218, 14219, 14220, 14221, 14222, 14223, 14224, 14225,\
                                                       14226, 14227, 14228, 14229, 14230, 14231, 14232, 14233, 14234,\
                                                       14235, 14237, 14238, 14239, 14240, 14241, 14242, 14243, 14244,\
                                                       14245, 14246, 14247, 14248, 14249, 14250, 14251, 14252, 14253,\
                                                       14254, 14255, 14256, 14257, 14258, 14259, 14260, 14261, 14262,\
                                                       14263, 14265, 14266, 14267, 14268, 14269, 14270, 14271, 14272,\
                                                       14273, 14274, 14275, 14276, 14277, 14278, 14279, 14280, 14281,\
                                                       14282, 14283, 14284, 14285, 14286, 14287, 14288, 14289, 14290,\
                                                       14291, 14292, 14293, 14294, 14295, 14296, 14297, 14298, 14299,\
                                                       14300, 14301, 14302, 14303, 14304, 14305, 14306, 14307, 14308,\
                                                       14309, 14310, 14311, 14312, 14313, 14314, 14315, 14316, 14317,\
                                                       14318, 14320, 14321, 14322, 14323, 14324, 14325, 14326, 14327,\
                                                       14328, 14329, 14330, 14331, 14332, 14333, 14334, 14335, 14336,\
                                                       14337, 14338, 14339, 14340, 14341, 14342, 14343, 14344, 14345,\
                                                       14346, 14347, 14349, 14350, 14351, 14352, 14353, 14354, 14355,\
                                                       14356, 14357, 14358, 14359, 14360, 14361, 14362, 14363, 14364,\
                                                       14365, 14366, 14367, 14368, 14369, 14370, 14371, 14372, 14373,\
                                                       14374, 14375, 14376, 14377, 14378, 14379, 14380, 14381, 14382,\
                                                       14383, 14384, 14385, 14386, 14387, 14388, 14389, 14390, 14391,\
                                                       14392, 14393, 14394, 14395, 14396, 14397, 14398, 14399, 14400,\
                                                       14401, 14402, 14404, 14405, 14406, 14407, 14408, 14409, 14410,\
                                                       14411, 14412, 14413, 14414, 14415, 14416, 14417, 14418, 14419,\
                                                       14420, 14421, 14422, 14423, 14424, 14425, 14426, 14427, 14428,\
                                                       14429, 14430, 14431, 14432, 14433, 14434, 14435, 14436, 14437,\
                                                       14438, 14439, 14440, 14441, 14442, 14443, 14444, 14445, 14446,\
                                                       14447, 14448, 14449, 14450, 14451, 14452, 14453, 14454, 14455,\
                                                       14456, 14457, 14458, 14460, 14461, 14462, 14463, 14464, 14465,\
                                                       14466, 14467, 14468, 14469, 14470, 14471, 14472, 14473, 14474,\
                                                       14475, 14476, 14477, 14478, 14479, 14480, 14481, 14482, 14483,\
                                                       14484, 14485, 14487, 14488, 14489, 14490, 14491, 14492, 14493,\
                                                       14494, 14495, 14496, 14497, 14498, 14499, 14500, 14501, 14502,\
                                                       14503, 14504, 14505, 14506, 14507, 14508, 14509, 14510, 14511,\
                                                       14512, 14513, 14514, 14516, 14517, 14518, 14519, 14520, 14521,\
                                                       14522, 14523, 14524, 14525, 14526, 14527, 14528, 14529, 14530,\
                                                       14531, 14532, 14533, 14534, 14535, 14536, 14538, 14539, 14540,\
                                                       14541, 14542, 14543, 14544, 14545, 14546, 14547, 14548, 14549,\
                                                       14550, 14551, 14552, 14553, 14554, 14555, 14556, 14557, 14558,\
                                                       14559, 14560, 14561, 14562, 14563, 14564, 14565, 14566, 14567,\
                                                       14568, 14570, 14571, 14572, 14573, 14574, 14575, 14576, 14577,\
                                                       14578, 14579, 14580, 14581, 14582, 14583, 14584, 14585, 14586,\
                                                       14587, 14588, 14589, 14590, 14591, 14592, 14593, 14594, 14595,\
                                                       14596, 14597, 14599, 14600, 14601, 14602, 14603, 14604, 14605,\
                                                       14606, 14607, 14608, 14609, 14610, 14611, 14612, 14613, 14614,\
                                                       14615, 14616, 14617, 14618, 14619, 14620, 14621, 14622, 14623,\
                                                       14624, 14625, 14626, 14627, 14628, 14629, 14630, 14631, 14632,\
                                                       14633, 14634, 14635, 14636, 14637, 14638, 14639, 14640, 14641,\
                                                       14642, 14643, 14644, 14645, 14646, 14647, 14648, 14649, 14650,\
                                                       14651, 14652, 14653, 14655, 14656, 14657, 14658, 14659, 14660,\
                                                       14661, 14662, 14663, 14664, 14665, 14666, 14667, 14668, 14669,\
                                                       14670, 14671, 14672, 14673, 14674, 14675, 14676, 14677, 14678,\
                                                       14679, 14680, 14682, 14683, 14684, 14685, 14686, 14687, 14688,\
                                                       14689, 14690, 14691, 14692, 14693, 14694, 14695, 14696, 14697,\
                                                       14698, 14699, 14700, 14701, 14702, 14703, 14704, 14705, 14706,\
                                                       14707, 14709, 14710, 14711, 14712, 14713, 14714, 14715, 14716,\
                                                       14718, 14719, 14720, 14721, 14722, 14723, 14724, 14725, 14726,\
                                                       14727, 14728, 14729, 14730, 14731, 14732, 14733, 14734, 14735,\
                                                       14736, 14737, 14738, 14739, 14740, 14741, 14742, 14743, 14744,\
                                                       14745, 14746, 14747, 14748, 14749, 14750, 14751, 14752, 14753,\
                                                       14754, 14755, 14756, 14757, 14758, 14759, 14760, 14761, 14762,\
                                                       14763, 14764, 14766, 14767, 14768, 14769, 14770, 14771, 14772,\
                                                       14773, 14774, 14775, 14776, 14777, 14778, 14779, 14780, 14781,\
                                                       14782, 14783, 14784, 14785, 14786, 14787, 14788, 14789, 14790,\
                                                       14791, 14792, 14793, 14794, 14795, 14796, 14797, 14798, 14799,\
                                                       14800, 14801, 14802, 14803, 14804, 14805, 14806, 14807, 14808,\
                                                       14809, 14810, 14811, 14812, 14813, 14814, 14815, 14816, 14817,\
                                                       14818, 14819, 14820, 14821, 14822, 14823, 14824, 14825, 14826,\
                                                       14827, 14828, 14829, 14830, 14831, 14832, 14833, 14834, 14835,\
                                                       14836, 14837, 14838, 14839, 14840, 14841, 14842, 14843, 14844,\
                                                       14845, 14846, 14847, 14848, 14850, 14851, 14852, 14853, 14854,\
                                                       14855, 14856, 14857, 14858, 14859, 14860, 14861, 14862, 14863,\
                                                       14864, 14865, 14866, 14867, 14868, 14869, 14870, 14871, 14872,\
                                                       14873, 14874, 14875, 14876, 14877, 14878, 14879, 14880, 14881,\
                                                       14882, 14883, 14884, 14885, 14886, 14887, 14888, 14889, 14890,\
                                                       14891, 14892, 14893, 14894, 14895, 14896, 14897, 14898, 14899,\
                                                       14900, 14901, 14902, 14903, 14904, 14905, 14906, 14907, 14908,\
                                                       14909, 14910, 14911, 14912, 14913, 14914, 14915, 14916, 14917,\
                                                       14918, 14919, 14920, 14921, 14922, 14923, 14924, 14925, 14926,\
                                                       14927, 14928, 14929, 14930, 14931, 14932, 14933, 14934, 14935,\
                                                       14936, 14937, 14938, 14939, 14940, 14941, 14942, 14943, 14944,\
                                                       14945, 14946, 14947, 14948, 14949, 14950, 14951, 14952, 14953,\
                                                       14954, 14955, 14956, 14957, 14958, 14959, 14960, 14961, 14962,\
                                                       14963, 14964, 14965, 14966, 14967, 14968, 14969, 14970, 14971,\
                                                       14972, 14973, 14974, 14975, 14976, 14977, 14978, 14979, 14980,\
                                                       14981, 14982, 14983, 14984, 14985, 14986, 14987, 14989, 14990,\
                                                       14991, 14992, 14993, 14994, 14995, 14996, 14997, 14998, 14999,\
                                                       15000, 15001, 15002, 15003, 15004, 15005, 15006, 15007, 15008,\
                                                       15009, 15010, 15011, 15012, 15013, 15016, 15017, 15018, 15019,\
                                                       15020, 15021, 15022, 15023, 15024, 15025, 15026, 15027, 15028,\
                                                       15029, 15030, 15031, 15032, 15033, 15034, 15035, 15036, 15037,\
                                                       15038, 15039, 15040, 15041, 15042, 15043, 15044, 15045, 15046,\
                                                       15047, 15048, 15049, 15050, 15051, 15052, 15053, 15054, 15055,\
                                                       15056, 15057, 15058, 15059, 15060, 15061, 15062, 15063, 15064,\
                                                       15065, 15066, 15067, 15068, 15069, 15070, 15071, 15072, 15073,\
                                                       15074, 15075, 15076, 15077, 15078, 15079, 15080, 15081, 15082,\
                                                       15083, 15084, 15085, 15086, 15087, 15088, 15089, 15090, 15091,\
                                                       15092, 15093, 15094, 15095, 15096, 15097, 15098, 15099, 15100,\
                                                       15101, 15102, 15103, 15104, 15105, 15106, 15107, 15108, 15109,\
                                                       15110, 15111, 15112, 15113, 15114, 15115, 15116, 15117, 15118,\
                                                       15119, 15120, 15121, 15122, 15123, 15124, 15125, 15126, 15127,\
                                                       15128, 15129, 15130, 15131, 15132, 15133, 15134, 15135, 15136,\
                                                       15137, 15138, 15139, 15140, 15141, 15142, 15143, 15144, 15145,\
                                                       15146, 15147, 15148, 15149, 15150, 15151, 15152, 15153, 15154,\
                                                       15155, 15156, 15157, 15158, 15159, 15160, 15161, 15162, 15163,\
                                                       15164, 15165, 15166, 15167, 15168, 15169, 15170, 15171, 15172,\
                                                       15173, 15174, 15175, 15176, 15177, 15178, 15179, 15180, 15181,\
                                                       15182, 15184, 15185, 15186, 15187, 15188, 15189, 15190, 15191,\
                                                       15192, 15193, 15194, 15195, 15196, 15197, 15198, 15199, 15200,\
                                                       15201, 15202, 15203, 15204, 15205, 15206, 15207, 15208, 15209,\
                                                       15211, 15212, 15213, 15214, 15215, 15216, 15217, 15218, 15219,\
                                                       15220, 15221, 15222, 15223, 15224, 15225, 15226, 15227, 15228,\
                                                       15229, 15230, 15231, 15232, 15233, 15234, 15235, 15236, 15237,\
                                                       15238, 15239, 15240, 15241, 15242, 15243, 15244, 15245, 15246,\
                                                       15247, 15248, 15249, 15250, 15251, 15252, 15253, 15254, 15255,\
                                                       15256, 15257, 15258, 15259, 15260, 15261, 15262, 15263, 15264,\
                                                       15265, 15266, 15267, 15268, 15269, 15270, 15271, 15272, 15273,\
                                                       15274, 15275, 15276, 15277, 15278, 15279, 15280, 15281, 15282,\
                                                       15283, 15284, 15285, 15286, 15287, 15288, 15289, 15290, 15291,\
                                                       15292, 15293, 15294, 15295, 15296, 15297, 15298, 15299, 15300,\
                                                       15301, 15302, 15303, 15304, 15305, 15306, 15307, 15308, 15309,\
                                                       15310, 15311, 15312, 15313, 15314, 15315, 15316, 15317, 15318,\
                                                       15319, 15320, 15321, 15323, 15324, 15325, 15326, 15327, 15328,\
                                                       15329, 15330, 15331, 15332, 15333, 15334, 15335, 15336, 15337,\
                                                       15338, 15339, 15340, 15341, 15342, 15343, 15344, 15345, 15346,\
                                                       15347, 15348, 15349, 15351, 15352, 15353, 15354, 15355, 15356,\
                                                       15357, 15358, 15359, 15360, 15361, 15362, 15363, 15364, 15365,\
                                                       15366, 15367, 15368, 15370, 15371, 15372, 15373, 15374, 15375,\
                                                       15377, 15378, 15379, 15380, 15381, 15382, 15383, 15384, 15385,\
                                                       15386, 15387, 15388, 15389, 15390, 15391, 15392, 15393, 15394,\
                                                       15395, 15396, 15397, 15398, 15399, 15400, 15401, 15402, 15403,\
                                                       15404, 15405, 15406, 15407, 15408, 15409, 15410, 15411, 15412,\
                                                       15413, 15414, 15415, 15416, 15417, 15418, 15419, 15420, 15421,\
                                                       15422, 15423, 15425, 15426, 15427, 15429, 15430, 15431, 15432,\
                                                       15433, 15434, 15435, 15436, 15437, 15438, 15439, 15440, 15442,\
                                                       15443, 15444, 15445, 15446, 15447, 15448, 15449, 15450, 15451,\
                                                       15452, 15453, 15454, 15455, 15456, 15458, 15459, 15460, 15461,\
                                                       15462, 15463, 15464, 15465, 15466, 15467, 15468, 15469, 15470,\
                                                       15471, 15474, 15475, 15476, 15477, 15478, 15479, 15480, 15481,\
                                                       15482, 15483, 15484, 15486, 15487, 15488, 15489, 15490, 15491,\
                                                       15492, 15493, 15494, 15495, 15496, 15497, 15498, 15499, 15500,\
                                                       15501, 15502, 15503, 15504, 15505, 15506, 15507, 15508, 15509,\
                                                       15510, 15511, 15512, 15514, 15515, 15516, 15517, 15518, 15519,\
                                                       15520, 15521, 15523, 15524, 15526, 15527, 15528, 15529, 15530,\
                                                       15531, 15532, 15533, 15534, 15535, 15537, 15538, 15539, 15540,\
                                                       15541, 15542, 15543, 15544, 15545, 15546, 15547, 15548, 15549,\
                                                       15550, 15551, 15552, 15553, 15554, 15555, 15556, 15557, 15558,\
                                                       15559, 15560, 15561, 15562, 15563, 15564, 15565, 15566, 15567,\
                                                       15568, 15569, 15571, 15572, 15573, 15575, 15576, 15577, 15578,\
                                                       15579, 15580, 15581, 15582, 15583, 15584, 15585, 15586, 15587,\
                                                       15588, 15589, 15591, 15592, 15593, 15594, 15595, 15596, 15597,\
                                                       15598, 15599, 15600, 15601, 15602, 15603, 15605, 15606, 15607,\
                                                       15608, 15609, 15611, 15612, 15613, 15614, 15615, 15616, 15617,\
                                                       15618, 15619, 15620, 15621, 15622, 15623, 15624, 15625, 15626,\
                                                       15628, 15629, 15630, 15631, 15632, 15633, 15635, 15636, 15637,\
                                                       15638, 15639, 15640, 15641, 15642, 15643, 15644, 15645, 15646,\
                                                       15647, 15648, 15649, 15650, 15652, 15653, 15654, 15656, 15657,\
                                                       15658, 15659, 15660, 15661, 15662, 15663, 15664, 15665, 15666,\
                                                       15667, 15669, 15670, 15671, 15672, 15673, 15674, 15676, 15677,\
                                                       15678, 15679, 15680, 15681, 15682, 15683, 15684, 15685, 15686,\
                                                       15687, 15688, 15689, 15690, 15691, 15692, 15693, 15694, 15695,\
                                                       15696, 15698, 15699, 15700, 15701, 15702, 15703, 15704, 15705,\
                                                       15706, 15707, 15708, 15709, 15710, 15711, 15712, 15713, 15714,\
                                                       15715, 15716, 15717, 15718, 15719, 15720, 15721, 15722, 15723,\
                                                       15724, 15725, 15726, 15727, 15728, 15729, 15730, 15731, 15732,\
                                                       15733, 15734, 15735, 15736, 15737, 15739, 15740, 15741, 15742,\
                                                       15743, 15744, 15745, 15746, 15747, 15748, 15749, 15750, 15751,\
                                                       15752, 15753, 15755, 15756, 15757, 15758, 15759, 15760, 15762,\
                                                       15763, 15764, 15765, 15766, 15767, 15768, 15769, 15770, 15772,\
                                                       15773, 15774, 15775, 15777, 15778, 15779, 15780, 15781, 15782,\
                                                       15783, 15784, 15785, 15786, 15787, 15788, 15789, 15790, 15791,\
                                                       15792, 15793, 15794, 15795, 15796, 15797, 15798, 15799, 15800,\
                                                       15801, 15802, 15803, 15804, 15805, 15806, 15807, 15808, 15809,\
                                                       15810, 15811, 15812, 15813, 15814, 15815, 15816, 15817, 15818,\
                                                       15819, 15820, 15822, 15823, 15824, 15825, 15826, 15827, 15828,\
                                                       15829, 15830, 15831, 15832, 15833, 15834, 15835, 15837, 15838,\
                                                       15839, 15840, 15841, 15842, 15844, 15845, 15846, 15847, 15848,\
                                                       15849, 15850, 15851, 15852, 15853, 15854, 15855, 15856, 15857,\
                                                       15858, 15859, 15860, 15861, 15862, 15863, 15864, 15865, 15866,\
                                                       15867, 15868, 15869, 15870, 15871, 15872, 15873, 15874, 15875,\
                                                       15876, 15877, 15878, 15879, 15880, 15881, 15882, 15883, 15884,\
                                                       15886, 15888, 15889, 15890, 15891, 15892, 15893, 15894, 15895,\
                                                       15896, 15897, 15898, 15899, 15900, 15901, 15902, 15903, 15905,\
                                                       15907, 15908, 15909, 15910, 15911, 15912, 15913, 15914, 15915,\
                                                       15916, 15917, 15918, 15919, 15920, 15921, 15922, 15923, 15924,\
                                                       15925, 15926, 15927, 15928, 15930, 15932, 15933, 15934, 15935,\
                                                       15936, 15937, 15938, 15939, 15940, 15941, 15942, 15943, 15944,\
                                                       15945, 15946, 15947, 15950, 15951, 15952, 15953, 15954, 15955,\
                                                       15956, 15957, 15958, 15959, 15960, 15961, 15962, 15963, 15964,\
                                                       15965, 15966, 15967, 15968, 15969, 15970, 15972, 15973, 15974,\
                                                       15975, 15976, 15977, 15978, 15979, 15980, 15981, 15982, 15983,\
                                                       15984, 15985, 15986, 15987, 15988, 15990, 15991, 15992, 15993,\
                                                       15994, 15995, 15996, 15997, 15998, 15999, 16000, 16001, 16002,\
                                                       16003, 16004, 16006, 16007, 16008, 16009, 16010, 16011, 16013,\
                                                       16014, 16015, 16016, 16017, 16018, 16019, 16020, 16021, 16022,\
                                                       16023, 16024, 16025, 16026, 16027, 16028, 16029, 16031, 16032,\
                                                       16033, 16034, 16035, 16037, 16038, 16039, 16040, 16041, 16042,\
                                                       16043, 16044, 16045, 16046, 16047, 16048, 16049, 16050, 16051,\
                                                       16052, 16053, 16054, 16055, 16056, 16058, 16059, 16060, 16061,\
                                                       16062, 16063, 16064, 16065, 16066, 16067, 16068, 16070, 16071,\
                                                       16072, 16073, 16074, 16075, 16076, 16077, 16078, 16079, 16081,\
                                                       16082, 16083, 16084, 16085, 16086, 16087, 16088, 16089, 16090,\
                                                       16091, 16092, 16094, 16095, 16096, 16097, 16098, 16099, 16100,\
                                                       16101, 16102, 16104, 16105, 16106, 16107, 16108, 16109, 16110,\
                                                       16111, 16113, 16114, 16115, 16116, 16117, 16118, 16119, 16120,\
                                                       16121, 16122, 16123, 16125, 16126, 16127, 16128, 16129, 16130,\
                                                       16131, 16132, 16133, 16134, 16136, 16137, 16138, 16139, 16140,\
                                                       16141, 16142, 16143, 16144, 16145, 16146, 16147, 16148, 16149,\
                                                       16150, 16151, 16152, 16153, 16154, 16155, 16156, 16158, 16159,\
                                                       16160, 16161, 16162, 16163, 16164, 16165, 16166, 16167, 16168,\
                                                       16169, 16171, 16172, 16173, 16174, 16175, 16177, 16178, 16179,\
                                                       16180, 16181, 16182, 16183, 16184, 16185, 16186, 16187, 16188,\
                                                       16190, 16191, 16192, 16193, 16194, 16195, 16197, 16198, 16199,\
                                                       16200, 16201, 16202, 16203, 16204, 16205, 16206, 16207, 16208,\
                                                       16210, 16211, 16212, 16213, 16214, 16215, 16216, 16217, 16218,\
                                                       16219, 16220, 16221, 16222, 16223, 16225, 16226, 16227, 16228,\
                                                       16229, 16230, 16231, 16232, 16233, 16234, 16235, 16236, 16237,\
                                                       16238, 16239, 16240, 16241, 16242, 16244, 16245, 16246, 16247,\
                                                       16248, 16249, 16251, 16252, 16253, 16254, 16255, 16256, 16257,\
                                                       16258, 16259, 16260, 16261, 16262, 16263, 16264, 16265, 16266,\
                                                       16267, 16268, 16269, 16270, 16272, 16273, 16274, 16276, 16277,\
                                                       16278, 16279, 16280, 16281, 16282, 16283, 16284, 16285, 16286,\
                                                       16287, 16289, 16290, 16291, 16292, 16294, 16295, 16296, 16297,\
                                                       16298, 16299, 16300, 16301, 16302, 16303, 16304, 16305, 16306,\
                                                       16307, 16308, 16309, 16310, 16312, 16314, 16315, 16316, 16317,\
                                                       16318, 16319, 16320, 16321, 16322, 16323, 16324, 16325, 16326,\
                                                       16327, 16328, 16329, 16330, 16331, 16332, 16333, 16334, 16337,\
                                                       16338, 16339, 16340, 16341, 16342, 16343, 16344, 16345, 16346,\
                                                       16347, 16348, 16349, 16350, 16351, 16352, 16354, 16355, 16356,\
                                                       16358, 16359, 16360, 16361, 16362, 16363, 16364, 16365, 16366,\
                                                       16367, 16368, 16369, 16370, 16371, 16372, 16373, 16375, 16377,\
                                                       16378, 16379, 16380, 16381, 16382, 16383, 16384, 16385, 16386,\
                                                       16387, 16388, 16389, 16390, 16391, 16392, 16393, 16394, 16395,\
                                                       16396, 16397, 16400, 16401, 16402, 16403, 16404, 16405, 16406,\
                                                       16407, 16408, 16409, 16410, 16411, 16412, 16413, 16414, 16415,\
                                                       16416, 16417, 16418, 16419, 16420, 16422, 16423, 16424, 16425,\
                                                       16426, 16427, 16428, 16429, 16430, 16431, 16432, 16433, 16434,\
                                                       16435, 16437, 16438, 16439, 16440, 16441, 16442, 16443, 16444,\
                                                       16445, 16446, 16447, 16448, 16449, 16450, 16451, 16452, 16453,\
                                                       16454, 16455, 16456, 16457, 16458, 16460, 16461, 16463, 16464,\
                                                       16465, 16466, 16467, 16468, 16469, 16470, 16471, 16472, 16473,\
                                                       16474, 16475, 16476, 16477, 16478, 16479, 16480, 16482, 16483,\
                                                       16485, 16486, 16487, 16488, 16489, 16490, 16491, 16492, 16493,\
                                                       16494, 16495, 16496, 16497, 16498, 16499, 16500, 16501, 16502,\
                                                       16503, 16504, 16505, 16507, 16508, 16509, 16510, 16511, 16512,\
                                                       16513, 16514, 16515, 16516, 16517, 16518, 16519, 16521, 16522,\
                                                       16523, 16524, 16525, 16527, 16528, 16529, 16530, 16531, 16532,\
                                                       16533, 16534, 16535, 16536, 16537, 16538, 16539, 16540, 16541,\
                                                       16543, 16544, 16545, 16546, 16548, 16549, 16550, 16551, 16552,\
                                                       16553, 16554, 16555, 16556, 16557, 16558, 16559, 16560, 16561,\
                                                       16562, 16563, 16565, 16566, 16567, 16568, 16569, 16570, 16571,\
                                                       16573, 16574, 16575, 16576, 16577, 16578, 16579, 16580, 16581,\
                                                       16583, 16584, 16585, 16586, 16587, 16588, 16589, 16590, 16592,\
                                                       16593, 16594, 16595, 16596, 16597, 16598, 16599, 16600, 16601,\
                                                       16602, 16603, 16604, 16605, 16606, 16607, 16608, 16609, 16610,\
                                                       16611, 16612, 16613, 16614, 16615, 16616, 16617, 16618, 16619,\
                                                       16620, 16621, 16622, 16623, 16624, 16625, 16626, 16627, 16628,\
                                                       16629, 16630, 16631, 16632, 16633, 16635, 16636, 16637, 16638,\
                                                       16639, 16640, 16641, 16642, 16643, 16644, 16645, 16646, 16647,\
                                                       16648, 16649, 16650, 16651, 16653, 16654, 16655, 16656, 16657,\
                                                       16658, 16659, 16660, 16661, 16662, 16663, 16664, 16665, 16666,\
                                                       16667, 16668, 16669, 16671, 16672, 16673, 16674, 16675, 16676,\
                                                       16677, 16678, 16679, 16680, 16681, 16682, 16683, 16684, 16685,\
                                                       16686, 16687, 16688, 16689, 16690, 16691, 16692, 16693, 16694,\
                                                       16695, 16696, 16697, 16698, 16699, 16700, 16701, 16702, 16703,\
                                                       16704, 16705, 16706, 16707, 16708, 16710, 16711, 16712, 16713,\
                                                       16714, 16715, 16716, 16717, 16718, 16720, 16721, 16722, 16723,\
                                                       16724, 16725, 16726, 16727, 16728, 16729, 16730, 16732, 16733,\
                                                       16734, 16735, 16736, 16737, 16738, 16739, 16740, 16741, 16743,\
                                                       16744, 16745, 16746, 16747, 16748, 16749, 16750, 16751, 16752,\
                                                       16753, 16754, 16756, 16757, 16758, 16759, 16760, 16761, 16762,\
                                                       16763, 16765, 16766, 16767, 16768, 16769, 16770, 16771, 16772,\
                                                       16773, 16774, 16775, 16776, 16777, 16778, 16779, 16780, 16781,\
                                                       16782, 16784, 16785, 16786, 16787, 16788, 16789, 16790, 16791,\
                                                       16792, 16793, 16794, 16795, 16796, 16797, 16798, 16799, 16800,\
                                                       16801, 16802, 16803, 16804, 16805, 16806, 16807, 16808, 16809,\
                                                       16810, 16811, 16812, 16813, 16815, 16816, 16817, 16818, 16819,\
                                                       16820, 16821, 16822, 16823, 16824, 16825, 16826, 16827, 16828,\
                                                       16829, 16830, 16831, 16833, 16834, 16835, 16836, 16837, 16838,\
                                                       16840, 16841, 16842, 16843, 16844, 16845, 16846, 16847, 16848,\
                                                       16849, 16850, 16852, 16853, 16854, 16855, 16856, 16857, 16858,\
                                                       16859, 16860, 16861, 16862, 16863, 16864, 16865, 16866, 16867,\
                                                       16868, 16870, 16871, 16872, 16873, 16874, 16875, 16876, 16877,\
                                                       16878, 16879, 16881, 16882, 16883, 16884, 16885, 16886, 16887,\
                                                       16888, 16889, 16890, 16891, 16892, 16893, 16894, 16895, 16896,\
                                                       16897, 16898, 16900, 16901, 16902, 16903, 16904, 16905, 16906,\
                                                       16907, 16908, 16909, 16910, 16911, 16912, 16913, 16915, 16916,\
                                                       16917, 16918, 16920, 16921, 16922, 16923, 16924, 16925, 16926,\
                                                       16927, 16928, 16929, 16930, 16931, 16932, 16933, 16934, 16935,\
                                                       16936, 16937, 16939, 16940, 16941, 16943, 16944, 16945, 16946,\
                                                       16947, 16948, 16949, 16950, 16951, 16952, 16953, 16954, 16955,\
                                                       16956, 16957, 16958, 16959, 16961, 16962, 16963, 16964, 16965,\
                                                       16966, 16967, 16968, 16969, 16970, 16971, 16972, 16974, 16975,\
                                                       16976, 16977, 16979, 16980, 16981, 16982, 16983, 16984, 16985,\
                                                       16986, 16987, 16988, 16989, 16990, 16991, 16992, 16993, 16994,\
                                                       16995, 16998, 16999, 17000, 17001, 17002, 17003, 17004, 17005,\
                                                       17006, 17007, 17008, 17009, 17010, 17011, 17012, 17013, 17014,\
                                                       17015, 17017, 17018, 17019, 17020, 17021, 17022, 17023, 17024,\
                                                       17025, 17026, 17027, 17028, 17029, 17030, 17031, 17032, 17033,\
                                                       17034, 17036, 17037, 17038, 17039, 17040, 17041, 17042, 17043,\
                                                       17044, 17045, 17046, 17047, 17048, 17050, 17051, 17052, 17053,\
                                                       17054, 17055, 17056, 17057, 17058, 17059, 17060, 17061, 17062,\
                                                       17063, 17064, 17065, 17066, 17068, 17069, 17070, 17071, 17072,\
                                                       17073, 17074, 17075, 17076, 17077, 17078, 17079, 17080, 17081,\
                                                       17082, 17084, 17085, 17087, 17088, 17089, 17090, 17091, 17092,\
                                                       17093, 17094, 17095, 17096, 17097, 17098, 17099, 17100, 17101,\
                                                       17102, 17104, 17105, 17106, 17107, 17108, 17109, 17110, 17111,\
                                                       17112, 17113, 17114, 17115, 17116, 17117, 17119, 17120, 17121,\
                                                       17123, 17124, 17125, 17126, 17127, 17128, 17129, 17130, 17131,\
                                                       17132, 17133, 17134, 17135, 17136, 17137, 17138, 17140, 17141,\
                                                       17143, 17144, 17145, 17146, 17147, 17148, 17149, 17150, 17151,\
                                                       17152, 17153, 17154, 17155, 17156, 17157, 17158, 17159, 17160,\
                                                       17161, 17162, 17163, 17165, 17166, 17167, 17168, 17169, 17170,\
                                                       17171, 17172, 17173, 17174, 17175, 17176, 17177, 17178, 17179,\
                                                       17180, 17181, 17182, 17183, 17184, 17186, 17187, 17188, 17189,\
                                                       17190, 17191, 17192, 17193, 17194, 17195, 17196, 17197, 17198,\
                                                       17199, 17200, 17201, 17202, 17203, 17204, 17205, 17206, 17207,\
                                                       17208, 17209, 17210, 17211, 17212, 17213, 17214, 17215, 17216,\
                                                       17217, 17218, 17219, 17220, 17221, 17222, 17223, 17224, 17225,\
                                                       17226, 17227, 17228, 17229, 17230, 17231, 17232, 17233, 17234,\
                                                       17235, 17236, 17237, 17238, 17239, 17240, 17241, 17242, 17243,\
                                                       17244, 17246, 17247, 17248, 17249, 17250, 17251, 17252, 17254,\
                                                       17255, 17256, 17257, 17258, 17259, 17260, 17261, 17262, 17263,\
                                                       17264, 17265, 17266, 17267, 17268, 17269, 17270, 17271, 17272,\
                                                       17273, 17275, 17276, 17277, 17278, 17279, 17280, 17281, 17282,\
                                                       17283, 17284, 17285, 17286, 17287, 17289, 17290, 17291, 17292,\
                                                       17293, 17294, 17295, 17296, 17297, 17298, 17299, 17300, 17301,\
                                                       17302, 17303, 17304, 17305, 17307, 17308, 17309, 17310, 17311,\
                                                       17312, 17313, 17314, 17315, 17316, 17317, 17318, 17319, 17320,\
                                                       17321, 17322, 17323, 17324, 17325, 17326, 17327, 17328, 17329,\
                                                       17330, 17331, 17332, 17333, 17334, 17336, 17337, 17338, 17339,\
                                                       17340, 17342, 17343, 17344, 17345, 17346, 17347, 17348, 17349,\
                                                       17350, 17351, 17352, 17353, 17354, 17356, 17357, 17358, 17359,\
                                                       17360, 17362, 17363, 17364, 17365, 17366, 17367, 17368, 17369,\
                                                       17370, 17371, 17372, 17373, 17374, 17375, 17376, 17377, 17378,\
                                                       17379, 17381, 17382, 17383, 17384, 17385, 17386, 17387, 17388,\
                                                       17389, 17390, 17391, 17392, 17393, 17394, 17396, 17397, 17398,\
                                                       17399, 17400, 17401, 17402, 17403, 17404, 17405, 17406, 17407,\
                                                       17408, 17409, 17410, 17411, 17412, 17413, 17414, 17416, 17417,\
                                                       17418, 17419, 17420, 17421, 17422, 17423, 17424, 17425, 17426,\
                                                       17427, 17428, 17429, 17430, 17431, 17432, 17433, 17434, 17435,\
                                                       17437, 17438, 17439, 17440, 17441, 17442, 17443, 17444, 17445,\
                                                       17447, 17448, 17449, 17450, 17451, 17452, 17453, 17454, 17455,\
                                                       17456, 17457, 17458, 17459, 17460, 17461, 17462, 17463, 17465,\
                                                       17466, 17467, 17468, 17469, 17470, 17471, 17472, 17473, 17474,\
                                                       17475, 17476, 17477, 17478, 17479, 17481, 17482, 17484, 17485,\
                                                       17486, 17487, 17488, 17489, 17490, 17491, 17492, 17493, 17494,\
                                                       17495, 17496, 17497, 17498, 17499, 17500, 17501, 17502, 17503,\
                                                       17505, 17506, 17507, 17508, 17509, 17510, 17511, 17512, 17513,\
                                                       17514, 17515, 17516, 17517, 17518, 17520, 17521, 17522, 17523,\
                                                       17524, 17525, 17526, 17527, 17528, 17529, 17530, 17531, 17532,\
                                                       17533, 17534, 17535, 17536, 17537, 17538, 17539, 17540, 17541,\
                                                       17542, 17543, 17545, 17546, 17547, 17548, 17549, 17550, 17551,\
                                                       17552, 17553, 17554, 17555, 17556, 17557, 17558, 17559, 17560,\
                                                       17561, 17562, 17563, 17565, 17566, 17567, 17568, 17569, 17570,\
                                                       17571, 17572, 17573, 17574, 17575, 17576, 17577, 17580, 17581,\
                                                       17582, 17583, 17584, 17585, 17586, 17587, 17588, 17589, 17590,\
                                                       17591, 17592, 17593, 17594, 17595, 17597, 17598, 17599, 17600,\
                                                       17601, 17602, 17603, 17604, 17605, 17606, 17607, 17608, 17609,\
                                                       17610, 17611, 17612, 17613, 17614, 17615, 17617, 17618, 17620,\
                                                       17621, 17622, 17623, 17624, 17625, 17626, 17627, 17628, 17629,\
                                                       17631, 17632, 17633, 17634, 17635, 17636, 17637, 17638, 17639,\
                                                       17640, 17641, 17642, 17643, 17644, 17645, 17646, 17647, 17648,\
                                                       17649, 17650, 17651, 17652, 17653, 17654, 17655, 17656, 17657,\
                                                       17658, 17660, 17661, 17662, 17663, 17664, 17665, 17666, 17667,\
                                                       17668, 17669, 17670, 17671, 17672, 17673, 17674, 17675, 17676,\
                                                       17677, 17679, 17680, 17681, 17682, 17683, 17685, 17686, 17687,\
                                                       17688, 17689, 17690, 17691, 17692, 17693, 17694, 17695, 17696,\
                                                       17697, 17699, 17700, 17701, 17702, 17703, 17705, 17706, 17707,\
                                                       17708, 17709, 17710, 17711, 17712, 17713, 17714, 17715, 17716,\
                                                       17717, 17718, 17720, 17721, 17722, 17724, 17725, 17726, 17727,\
                                                       17728, 17729, 17730, 17731, 17732, 17733, 17734, 17735, 17736,\
                                                       17737, 17738, 17739, 17740, 17741, 17742, 17743, 17744, 17745,\
                                                       17747, 17748, 17749, 17750, 17751, 17752, 17753, 17754, 17755,\
                                                       17756, 17757, 17759, 17760, 17761, 17762, 17763, 17764, 17765,\
                                                       17766, 17767, 17769, 17770, 17771, 17772, 17773, 17774, 17775,\
                                                       17776, 17777, 17778, 17779, 17781, 17782, 17783, 17784, 17785,\
                                                       17786, 17787, 17788, 17789, 17790, 17792, 17793, 17794, 17795,\
                                                       17796, 17797, 17798, 17799, 17800, 17802, 17803, 17804, 17805,\
                                                       17806, 17807, 17808, 17809, 17810, 17812, 17813, 17814, 17815,\
                                                       17816, 17817, 17818, 17819, 17820, 17821, 17822, 17823, 17824,\
                                                       17825, 17826, 17827, 17828, 17830, 17831, 17832, 17833, 17834,\
                                                       17835, 17836, 17837, 17838, 17839, 17841, 17842, 17843, 17844,\
                                                       17845, 17846, 17847, 17848, 17849, 17850, 17851, 17853, 17854,\
                                                       17855, 17856, 17857, 17858, 17859, 17860, 17862, 17863, 17864,\
                                                       17865, 17866, 17867, 17868, 17869, 17870, 17871, 17873, 17874,\
                                                       17875, 17876, 17877, 17878, 17879, 17880, 17881, 17882, 17883,\
                                                       17884, 17885, 17886, 17887, 17888, 17889, 17890, 17891, 17892,\
                                                       17893, 17895, 17896, 17897, 17898, 17900, 17901, 17902, 17903,\
                                                       17904, 17905, 17906, 17907, 17908, 17909, 17910, 17911, 17912,\
                                                       17913, 17914, 17915, 17916, 17917, 17918, 17919, 17920, 17922,\
                                                       17923, 17924, 17925, 17926, 17927, 17928, 17929, 17930, 17931,\
                                                       17932, 17933, 17934, 17936, 17937, 17938, 17939, 17940, 17941,\
                                                       17942, 17943, 17944, 17945, 17946, 17947, 17948, 17949, 17951,\
                                                       17952, 17953, 17954, 17955, 17956, 17958, 17959, 17960, 17961,\
                                                       17962, 17963, 17964, 17965, 17966, 17967, 17968, 17969, 17970,\
                                                       17972, 17973, 17974, 17975, 17977, 17978, 17979, 17980, 17981,\
                                                       17982, 17983, 17984, 17985, 17986, 17989, 17990, 17991, 17992,\
                                                       17993, 17994, 17995, 17996, 17997, 17998, 17999, 18000, 18001,\
                                                       18003, 18004, 18005, 18006, 18007, 18008, 18009, 18010, 18011,\
                                                       18012, 18013, 18014, 18015, 18016, 18017, 18018, 18019, 18020,\
                                                       18021, 18022, 18023, 18024, 18025, 18026, 18027, 18028, 18029,\
                                                       18030, 18031, 18032, 18033, 18034, 18037, 18038, 18039, 18040,\
                                                       18041, 18042, 18043, 18044, 18045, 18046, 18047, 18048, 18049,\
                                                       18050, 18051, 18052, 18053, 18054, 18055, 18056, 18057, 18058,\
                                                       18059, 18060, 18061, 18063, 18064, 18065, 18066, 18067, 18068,\
                                                       18069, 18070, 18071, 18073, 18074, 18075, 18076, 18077, 18078,\
                                                       18079, 18080, 18081, 18082, 18083, 18084, 18085, 18086, 18087,\
                                                       18088, 18090, 18091, 18093, 18094, 18095, 18096, 18097, 18098,\
                                                       18099, 18101, 18102, 18103, 18104, 18106, 18107, 18108, 18109,\
                                                       18110, 18111, 18112, 18113, 18114, 18116, 18117, 18118, 18119,\
                                                       18120, 18122, 18123, 18124, 18125, 18126, 18127, 18128, 18129,\
                                                       18130, 18131, 18132, 18133, 18134, 18135, 18136, 18138, 18139,\
                                                       18141, 18142, 18143, 18144, 18145, 18146, 18147, 18148, 18149,\
                                                       18150, 18151, 18152, 18153, 18155, 18156, 18157, 18158, 18160,\
                                                       18161, 18162, 18163, 18164, 18165, 18166, 18167, 18168, 18169,\
                                                       18170, 18171, 18172, 18174, 18175, 18176, 18177, 18178, 18179,\
                                                       18180, 18181, 18182, 18183, 18184, 18185, 18187, 18188, 18189,\
                                                       18190, 18191, 18192, 18193, 18194, 18195, 18196, 18197, 18199,\
                                                       18200, 18201, 18202, 18203, 18204, 18205, 18206, 18207, 18208,\
                                                       18209, 18210, 18211, 18212, 18214, 18215, 18216, 18218, 18219,\
                                                       18220, 18221, 18222, 18223, 18224, 18225, 18226, 18227, 18228,\
                                                       18229, 18230, 18231, 18233, 18234, 18235, 18236, 18237, 18238,\
                                                       18239, 18241, 18242, 18243, 18244, 18245, 18246, 18247, 18248,\
                                                       18249, 18250, 18251, 18252, 18253, 18254, 18255, 18256, 18257,\
                                                       18258, 18259, 18260, 18261, 18262, 18263, 18264, 18265, 18266,\
                                                       18267, 18268, 18269, 18270, 18271, 18273, 18274, 18275, 18276,\
                                                       18277, 18278, 18279, 18280, 18282, 18283, 18284, 18285, 18286,\
                                                       18287, 18288, 18289, 18290, 18291, 18292, 18293, 18294, 18295,\
                                                       18296, 18297, 18298, 18300, 18301, 18302, 18303, 18304, 18305,\
                                                       18306, 18307, 18308, 18310, 18311, 18312, 18313, 18314, 18315,\
                                                       18316, 18317, 18318, 18319, 18320, 18322, 18324, 18325, 18326,\
                                                       18327, 18328, 18329, 18330, 18331, 18332, 18333, 18334, 18335,\
                                                       18336, 18337, 18338, 18339, 18340, 18341, 18342, 18344, 18345,\
                                                       18346, 18347, 18348, 18349, 18350, 18351, 18352, 18353, 18354,\
                                                       18355, 18357, 18358, 18359, 18360, 18361, 18362, 18363, 18364,\
                                                       18365, 18366, 18367, 18368, 18369, 18370, 18371, 18372, 18373,\
                                                       18374, 18375, 18376, 18377, 18378, 18379, 18380, 18381, 18382,\
                                                       18383, 18384, 18385, 18386, 18387, 18388, 18389, 18390, 18391,\
                                                       18392, 18393, 18394, 18395, 18397, 18398, 18400, 18401, 18402,\
                                                       18403, 18404, 18406, 18407, 18408, 18410, 18411, 18412, 18413,\
                                                       18414, 18415, 18416, 18418, 18419, 18420, 18421, 18423, 18424,\
                                                       18425, 18426, 18427, 18428, 18430, 18432, 18433, 18434, 18435,\
                                                       18436, 18437, 18438, 18439, 18440, 18442, 18443, 18444, 18445,\
                                                       18446, 18448, 18449, 18450, 18451, 18452, 18454, 18455, 18456,\
                                                       18457, 18458, 18460, 18461, 18462, 18463, 18464, 18465, 18466,\
                                                       18467, 18468, 18469, 18470, 18471, 18472, 18473, 18474, 18476,\
                                                       18477, 18478, 18480, 18481, 18482, 18483, 18484, 18485, 18486,\
                                                       18487, 18489, 18490, 18491, 18492, 18494, 18495, 18496, 18497,\
                                                       18498, 18499, 18500, 18501, 18502, 18503, 18504, 18505, 18506,\
                                                       18508, 18510, 18511, 18512, 18513, 18516, 18517, 18518, 18519,\
                                                       18520, 18521, 18523, 18524, 18525, 18527, 18528, 18529, 18530,\
                                                       18531, 18532, 18533, 18534, 18535, 18536, 18538, 18539, 18541,\
                                                       18542, 18543, 18544, 18545, 18546, 18547, 18548, 18549, 18551,\
                                                       18552, 18553, 18554, 18556, 18557, 18558, 18559, 18560, 18561,\
                                                       18563, 18564, 18565, 18566, 18567, 18568, 18569, 18571, 18572,\
                                                       18573, 18574, 18575, 18577, 18578, 18579, 18580, 18582, 18583,\
                                                       18584, 18585, 18586, 18587, 18588, 18589, 18590, 18592, 18593,\
                                                       18594, 18596, 18597, 18598, 18599, 18600, 18601, 18602, 18603,\
                                                       18605, 18606, 18607, 18608, 18609, 18610, 18612, 18613, 18614,\
                                                       18615, 18616, 18617, 18619, 18620, 18621, 18622, 18624, 18625,\
                                                       18626, 18627, 18628, 18629, 18630, 18631, 18633, 18634, 18635,\
                                                       18637, 18638, 18639, 18640, 18641, 18642, 18643, 18645, 18646,\
                                                       18647, 18648, 18649, 18650, 18651, 18653, 18654, 18655, 18656,\
                                                       18657, 18658, 18659, 18661, 18662, 18663, 18665, 18666, 18667,\
                                                       18668, 18669, 18670, 18671, 18673, 18674, 18675, 18676, 18677,\
                                                       18678, 18679, 18680, 18681, 18682, 18683, 18684, 18685, 18686,\
                                                       18688, 18689, 18690, 18691, 18692, 18694, 18695, 18696, 18697,\
                                                       18698, 18699, 18700, 18701, 18703, 18704, 18705, 18706, 18707,\
                                                       18708, 18710, 18711, 18712, 18713, 18714, 18715, 18716, 18717,\
                                                       18718, 18720, 18721, 18722, 18723, 18725, 18726, 18727, 18728,\
                                                       18729, 18731, 18732, 18734, 18735, 18736, 18738, 18739, 18740,\
                                                       18741, 18742, 18743, 18744, 18746, 18747, 18748, 18749, 18751,\
                                                       18752, 18753, 18754, 18756, 18757, 18758, 18759, 18760, 18761,\
                                                       18763, 18765, 18766, 18767, 18768, 18769, 18770, 18771, 18773,\
                                                       18774, 18775, 18776, 18777, 18778, 18779, 18780, 18781, 18782,\
                                                       18783, 18784, 18785, 18786, 18787, 18788, 18789, 18790, 18791,\
                                                       18793, 18795, 18796, 18797, 18798, 18799, 18800, 18801, 18802,\
                                                       18803, 18804, 18805, 18806, 18807, 18810, 18811, 18812, 18813,\
                                                       18814, 18815, 18816, 18817, 18819, 18820, 18822, 18823, 18824,\
                                                       18825, 18826, 18827, 18828, 18831, 18832, 18833, 18834, 18835,\
                                                       18837, 18838, 18839, 18841, 18842, 18843, 18844, 18845, 18846,\
                                                       18847, 18848, 18849, 18850, 18851, 18852, 18853, 18855, 18857,\
                                                       18858, 18859, 18860, 18861, 18862, 18863, 18864, 18865, 18866,\
                                                       18867, 18868, 18870, 18872, 18873, 18874, 18875, 18876, 18877,\
                                                       18878, 18881, 18882, 18883, 18884, 18885, 18886, 18887, 18888,\
                                                       18891, 18892, 18893, 18894, 18895, 18896, 18897, 18898, 18899,\
                                                       18902, 18903, 18904, 18905, 18906, 18907, 18908, 18909, 18910,\
                                                       18911, 18912, 18913, 18914, 18915, 18916, 18919, 18920, 18921,\
                                                       18922, 18923, 18924, 18925, 18926, 18927, 18928, 18929, 18930,\
                                                       18931, 18932, 18935, 18937, 18939, 18940, 18941, 18942, 18943,\
                                                       18944, 18945, 18946, 18947, 18948, 18949, 18952, 18953, 18954,\
                                                       18955, 18956, 18957, 18958, 18959, 18960, 18961, 18962, 18963,\
                                                       18964, 18965, 18966, 18968, 18969, 18970, 18972, 18973, 18974,\
                                                       18975, 18976, 18977, 18978, 18979, 18980, 18982, 18983, 18984,\
                                                       18986, 18987, 18988, 18989, 18990, 18991, 18992, 18994, 18995,\
                                                       18996, 18997, 18998, 18999, 19001, 19002, 19004, 19005, 19006,\
                                                       19008, 19009, 19010, 19011, 19012, 19013, 19015, 19016, 19017,\
                                                       19018, 19020, 19021, 19022, 19023, 19024, 19025, 19026, 19027,\
                                                       19028, 19029, 19030, 19032, 19033, 19034, 19035, 19036, 19037,\
                                                       19038, 19039, 19040, 19041, 19042, 19043, 19044, 19045, 19047,\
                                                       19048, 19049, 19050, 19051, 19053, 19054, 19055, 19056, 19057,\
                                                       19058, 19059, 19060, 19061, 19062, 19064, 19065, 19066, 19068,\
                                                       19069, 19070, 19071, 19072, 19073, 19074, 19075, 19077, 19078,\
                                                       19080, 19081, 19082, 19083, 19085, 19086, 19087, 19088, 19089,\
                                                       19091, 19092, 19093, 19094, 19095, 19096, 19098, 19100, 19101,\
                                                       19102, 19103, 19104, 19105, 19106, 19107, 19109, 19110, 19111,\
                                                       19112, 19113, 19115, 19116, 19117, 19118, 19119, 19120, 19121,\
                                                       19122, 19123, 19125, 19126, 19127, 19128, 19129, 19130, 19131,\
                                                       19132, 19134, 19135, 19136, 19137, 19138, 19139, 19141, 19142,\
                                                       19144, 19145, 19146, 19147, 19148, 19150, 19151, 19152, 19153,\
                                                       19154, 19155, 19156, 19158, 19159, 19160, 19161, 19162, 19163,\
                                                       19164, 19165, 19166, 19168, 19169, 19170, 19171, 19172, 19174,\
                                                       19175, 19176, 19177, 19178, 19179, 19181, 19182, 19183, 19184,\
                                                       19185, 19187, 19188, 19189, 19190, 19191, 19192, 19194, 19196,\
                                                       19197, 19198, 19199, 19200, 19201, 19202, 19203, 19205, 19206,\
                                                       19207, 19208, 19209, 19211, 19212, 19213, 19214, 19215, 19216,\
                                                       19217, 19218, 19219, 19220, 19221, 19222, 19223, 19225, 19227,\
                                                       19228, 19229, 19230, 19231, 19232, 19233, 19234, 19235, 19236,\
                                                       19237, 19238, 19241, 19242, 19243, 19244, 19245, 19246, 19248,\
                                                       19249, 19250, 19251, 19252, 19253, 19254, 19255, 19256, 19258,\
                                                       19260, 19261, 19262, 19263, 19264, 19265, 19266, 19267, 19268,\
                                                       19269, 19272, 19273, 19274, 19275, 19276, 19277, 19278, 19279,\
                                                       19280, 19282, 19284, 19285, 19286, 19287, 19288, 19289, 19290,\
                                                       19291, 19292, 19293, 19294, 19295, 19297, 19298, 19300, 19301,\
                                                       19302, 19303, 19304, 19305, 19306, 19307, 19308, 19309, 19310,\
                                                       19311, 19312, 19313, 19314, 19315, 19316, 19317, 19318, 19321,\
                                                       19322, 19323, 19324, 19325, 19326, 19327, 19328, 19329, 19330,\
                                                       19333, 19334, 19335, 19336, 19337, 19338, 19339, 19340, 19341,\
                                                       19342, 19343, 19344, 19345, 19347, 19349, 19350, 19351, 19352,\
                                                       19353, 19354, 19355, 19356, 19357, 19358, 19359, 19362, 19363,\
                                                       19364, 19365, 19366, 19367, 19368, 19371, 19372, 19373, 19374,\
                                                       19375, 19376, 19377, 19378, 19379, 19380, 19381, 19382, 19383,\
                                                       19385, 19386, 19387, 19389, 19390, 19391, 19392, 19393, 19394,\
                                                       19395, 19396, 19397, 19398, 19399, 19401, 19402, 19403, 19404,\
                                                       19405, 19406, 19407, 19408, 19410, 19411, 19413, 19414, 19415,\
                                                       19416, 19417, 19418, 19419, 19420, 19421, 19422, 19424, 19425,\
                                                       19427, 19428, 19429, 19430, 19431, 19432, 19434, 19435, 19436,\
                                                       19437, 19438, 19440, 19441, 19442, 19443, 19444, 19445, 19446,\
                                                       19447, 19448, 19449, 19450, 19451, 19452, 19453, 19454, 19455,\
                                                       19458, 19459, 19460, 19461, 19462, 19463, 19464, 19465, 19466,\
                                                       19467, 19468, 19469, 19470, 19472, 19473, 19475, 19476, 19477,\
                                                       19478, 19479, 19480, 19481, 19482, 19483, 19484, 19485, 19486,\
                                                       19487, 19488, 19490, 19491, 19492, 19493, 19494, 19495, 19496,\
                                                       19498, 19499, 19501, 19502, 19503, 19504, 19505, 19506, 19507,\
                                                       19508, 19509, 19510, 19511, 19513, 19514, 19515, 19516, 19518,\
                                                       19519, 19520, 19521, 19522, 19523, 19524, 19525, 19526, 19528,\
                                                       19529, 19531, 19532, 19533, 19534, 19535, 19536, 19537, 19538,\
                                                       19539, 19540, 19542, 19543, 19544, 19545, 19547, 19548, 19549,\
                                                       19550, 19551, 19552, 19553, 19554, 19556, 19557, 19558, 19559,\
                                                       19560, 19561, 19562, 19564, 19565, 19566, 19567, 19568, 19570,\
                                                       19571, 19572, 19573, 19574, 19575, 19576, 19577, 19578, 19579,\
                                                       19581, 19582, 19583, 19585, 19586, 19587, 19588, 19589, 19590,\
                                                       19591, 19592, 19593, 19594, 19595, 19596, 19598, 19599, 19600,\
                                                       19601, 19602, 19604, 19605, 19606, 19607, 19608, 19609, 19610,\
                                                       19611, 19612, 19613, 19614, 19616, 19617, 19618, 19619, 19621,\
                                                       19622, 19623, 19624, 19625, 19626, 19627, 19628, 19629, 19631,\
                                                       19632, 19633, 19634, 19636, 19637, 19638, 19639, 19640, 19641,\
                                                       19642, 19643, 19644, 19645, 19647, 19648, 19649, 19650, 19651,\
                                                       19653, 19654, 19655, 19656, 19657, 19658, 19659, 19660, 19662,\
                                                       19663, 19664, 20109, 20224])
    known_pulser_ids['run5176']['vpol'] = numpy.copy(known_pulser_ids['run5176']['hpol'])

    #These ones are trigger type 3
    known_pulser_ids['run5179'] = {}
    known_pulser_ids['run5179']['hpol'] = numpy.array([   0,    2,    4,    6,    8,   10,   12,   14,   16,   18,   20,\
                                                         22,   24,   26,   28,   30,   32,   34,   36,   38,   40,   49,\
                                                         57,   62,   71,   83,   90,   96,  109,  125,  130,  135,  143,\
                                                        161,  176,  182,  197,  211,  216,  223,  238,  245,  252,  266,\
                                                        273,  279,  286,  292,  299,  303,  309,  316,  321,  331,  337,\
                                                        345,  364,  372,  378,  386,  406,  421,  424,  446,  455,  462,\
                                                        469,  474,  483,  490,  497,  503,  508,  518,  532,  536,  545,\
                                                        550,  558,  563,  569,  575,  581,  590,  595,  601,  609,  624,\
                                                        629,  643,  649,  670,  678,  684,  690,  697,  700,  707,  713,\
                                                        720,  726,  731,  738,  742,  749,  757,  763,  771,  779,  786,\
                                                        797,  805,  820,  833,  839,  855,  861,  867,  873,  879,  901,\
                                                        914,  922,  928,  935,  940,  947,  953,  958,  963,  973,  977,\
                                                        984,  988,  998, 1004, 1010, 1018, 1024, 1032, 1039, 1045, 1059,\
                                                       1063, 1067, 1076, 1082, 1090, 1095, 1103, 1109, 1115, 1123, 1125,\
                                                       1133, 1139, 1145, 1154, 1159, 1162, 1165, 1172, 1185, 1190, 1199,\
                                                       1204, 1211, 1215, 1221, 1229, 1237, 1240, 1247, 1253, 1268, 1275,\
                                                       1282, 1289, 1296, 1303, 1308, 1314, 1321, 1328, 1340, 1346, 1351,\
                                                       1360, 1367, 1373, 1381, 1387, 1393, 1398, 1408, 1414, 1419, 1424,\
                                                       1441, 1446, 1451, 1458, 1472, 1479, 1485, 1489, 1493, 1498, 1501,\
                                                       1505, 1508, 1522, 1529, 1536, 1540, 1546, 1551, 1557, 1564, 1571,\
                                                       1577, 1585, 1592, 1603, 1612, 1616, 1622, 1625, 1630, 1634, 1642,\
                                                       1648, 1653, 1656, 1669, 1712, 1720, 1725, 1729, 1735, 1739, 1745,\
                                                       1751, 1758, 1762, 1768, 1771, 1777, 1786, 1791, 1796, 1799, 1806,\
                                                       1821, 1826, 1838, 1843, 1852, 1868, 1871, 1875, 1880, 1888, 1894,\
                                                       1900, 1919, 1925, 1935, 1940, 1944, 1955, 1961, 1965, 1973, 1978,\
                                                       1982, 1990, 2000, 2006, 2012, 2017, 2020, 2026, 2034, 2039, 2043,\
                                                       2047, 2052, 2059, 2063, 2069, 2073, 2079, 2084, 2094, 2101, 2107,\
                                                       2112, 2117, 2119, 2123, 2128, 2134, 2137, 2148, 2160, 2161, 2164,\
                                                       2168, 2187, 2195, 2201, 2211, 2216, 2221, 2226, 2231, 2235, 2240,\
                                                       2243, 2249, 2265, 2281, 2286, 2298, 2322, 2327, 2338, 2352, 2358,\
                                                       2363, 2368, 2372, 2377, 2388, 2395, 2405, 2410, 2417, 2421, 2438,\
                                                       2448, 2455, 2462, 2472, 2478, 2483, 2507, 2513, 2517, 2526, 2550,\
                                                       2554, 2557, 2563, 2567, 2574, 2579, 2591, 2601, 2605, 2610, 2617,\
                                                       2623, 2641, 2646, 2651, 2703, 2713, 2783, 2795, 2825, 2830, 2834,\
                                                       2841, 2850, 2854, 2861, 2867, 2870, 2880, 2881, 2886, 2892, 2897,\
                                                       2901, 2907, 2913, 2922, 2932, 2934, 2939, 2955, 2959, 2966, 2976,\
                                                       2985, 2995, 2999, 3016, 3042, 3045, 3051, 3055, 3061, 3069, 3075,\
                                                       3080, 3088, 3093, 3099, 3102, 3106, 3111, 3116, 3120, 3125, 3130,\
                                                       3135, 3138, 3148, 3157, 3167, 3173, 3178, 3184, 3188, 3192, 3211,\
                                                       3226, 3229, 3233, 3240, 3245, 3249, 3263, 3274, 3280, 3286, 3290,\
                                                       3303, 3309, 3313, 3329, 3344, 3358, 3375, 3378, 3386, 3390, 3395,\
                                                       3401, 3406, 3411, 3424, 3445, 3450, 3455, 3460, 3462, 3467, 3485,\
                                                       3489, 3493, 3499, 3502, 3507, 3514, 3523, 3538, 3548, 3551, 3555,\
                                                       3572, 3577, 3582, 3601, 3605, 3610, 3614, 3622, 3627, 3633, 3634,\
                                                       3638, 3644, 3658, 3667, 3675, 3680, 3689, 3695, 3707, 3717, 3729,\
                                                       3734, 3739, 3751, 3757, 3760, 3773, 3777, 3787, 3792, 3797, 3804,\
                                                       3824, 3830, 3837, 3855, 3859, 3870, 3875, 3880, 3904, 3910, 3914,\
                                                       3925, 3931, 3936, 3941, 3968, 3973, 3980, 4009, 4019, 4023, 4030,\
                                                       4034, 4038, 4062, 4067, 4072, 4084, 4092, 4110, 4130, 4134, 4137,\
                                                       4148, 4153, 4157, 4163, 4169, 4191, 4196, 4201, 4207, 4212, 4232,\
                                                       4247, 4259, 4263, 4272, 4276, 4287, 4291, 4306, 4311, 4318, 4322,\
                                                       4327, 4337, 4353, 4365, 4384, 4399, 4410, 4415, 4434, 4444, 4471,\
                                                       4483, 4492, 4504, 4510, 4516, 4521, 4526, 4544, 4556, 4562, 4568,\
                                                       4574, 4579, 4589, 4614, 4619, 4624, 4652, 4667, 4678, 4696, 4758,\
                                                       4763, 4768, 4772, 4778, 4784, 4798, 4803, 4809, 4820, 4825, 4853,\
                                                       4888, 4914, 4938, 4949, 4961, 4983, 4990, 4996])
    known_pulser_ids['run5179']['vpol'] = numpy.copy(known_pulser_ids['run5179']['hpol'])

    #These ones are probably 60 Hz. 
    # known_pulser_ids['run5179'] = {}
    # known_pulser_ids['run5179']['hpol'] = numpy.array([  42,   43,   44,   45,   46,   47,   48,   50,   51,   53,   54,\
    #                                                      55,   56,   58,   59,   60,   61,   64,   65,   66,   67,   68,\
    #                                                      69,   70,   72,   74,   75,   76,   77,   78,   79,   80,   81,\
    #                                                      82,   84,   85,   86,   87,   88,   92,   93,   94,   95,   97,\
    #                                                      98,   99,  100,  101,  102,  103,  104,  105,  106,  108,  110,\
    #                                                     111,  113,  114,  115,  116,  117,  118,  119,  120,  121,  122,\
    #                                                     123,  124,  126,  127,  129,  131,  133,  134,  136,  138,  139,\
    #                                                     140,  141,  142,  144,  145,  146,  147,  148,  149,  150,  151,\
    #                                                     152,  153,  154,  155,  156,  157,  159,  162,  163,  164,  165,\
    #                                                     166,  167,  168,  169,  170,  171,  172,  173,  174,  175,  177,\
    #                                                     178,  179,  180,  181,  183,  184,  185,  186,  187,  188,  189,\
    #                                                     190,  191,  192,  193,  194,  195,  196,  198,  199,  200,  201,\
    #                                                     202,  203,  204,  205,  206,  207,  208,  209,  210,  212,  213,\
    #                                                     214,  215,  219,  220,  221,  222,  224,  225,  226,  227,  228,\
    #                                                     229,  230,  231,  232,  233,  234,  235,  236,  237,  239,  241,\
    #                                                     242,  243,  244,  246,  248,  249,  250,  251,  253,  254,  255,\
    #                                                     256,  257,  258,  259,  260,  261,  262,  264,  265,  267,  268,\
    #                                                     269,  270,  271,  272,  274,  276,  277,  278,  280,  281,  282,\
    #                                                     284,  285,  287,  289,  290,  291,  293,  295,  296,  297,  298,\
    #                                                     300,  302,  304,  305,  307,  308,  310,  311,  312,  314,  315,\
    #                                                     317,  318,  320,  322,  323,  324,  325,  326,  327,  328,  329,\
    #                                                     330,  332,  333,  334,  335,  336,  338,  339,  340,  341,  342,\
    #                                                     343,  344,  346,  347,  348,  349,  350,  351,  352,  353,  354,\
    #                                                     355,  356,  357,  358,  359,  360,  361,  362,  363,  365,  367,\
    #                                                     368,  369,  370,  371,  373,  374,  375,  376,  379,  380,  382,\
    #                                                     383,  384,  385,  387,  388,  389,  390,  391,  392,  393,  394,\
    #                                                     395,  396,  397,  398,  399,  400,  401,  402,  404,  405,  407,\
    #                                                     408,  409,  410,  411,  412,  413,  414,  416,  417,  418,  419,\
    #                                                     420,  423,  425,  426,  427,  428,  429,  430,  431,  432,  433,\
    #                                                     434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,\
    #                                                     445,  447,  448,  449,  450,  451,  452,  453,  454,  456,  457,\
    #                                                     458,  459,  460,  461,  463,  464,  465,  466,  467,  468,  470,\
    #                                                     471,  472,  475,  476,  477,  478,  479,  480,  481,  482,  484,\
    #                                                     485,  486,  487,  488,  489,  491,  492,  493,  494,  495,  496,\
    #                                                     498,  499,  500,  501,  502,  504,  505,  506,  509,  510,  511,\
    #                                                     512,  513,  514,  515,  516,  517,  519,  520,  521,  522,  523,\
    #                                                     524,  525,  526,  527,  528,  529,  530,  531,  533,  534,  537,\
    #                                                     538,  539,  540,  541,  542,  543,  544,  546,  547,  548,  549,\
    #                                                     552,  553,  555,  556,  557,  559,  560,  561,  562,  565,  566,\
    #                                                     567,  568,  571,  572,  573,  574,  576,  578,  579,  580,  582,\
    #                                                     584,  585,  586,  587,  588,  589,  591,  593,  594,  596,  598,\
    #                                                     599,  600,  602,  603,  604,  605,  607,  608,  610,  611,  612,\
    #                                                     613,  614,  615,  616,  617,  618,  619,  620,  621,  622,  623,\
    #                                                     625,  628,  630,  631,  632,  633,  634,  635,  636,  637,  638,\
    #                                                     639,  640,  641,  642,  644,  645,  646,  647,  648,  650,  651,\
    #                                                     652,  653,  654,  655,  656,  657,  658,  659,  660,  661,  662,\
    #                                                     663,  664,  665,  666,  667,  668,  669,  671,  674,  675,  676,\
    #                                                     677,  679,  680,  681,  682,  683,  685,  687,  688,  689,  691,\
    #                                                     692,  693,  695,  696,  699,  701,  702,  703,  704,  705,  706,\
    #                                                     708,  710,  711,  712,  714,  715,  716,  717,  718,  719,  721,\
    #                                                     722,  724,  725,  727,  728,  729,  732,  733,  734,  735,  737,\
    #                                                     739,  740,  741,  743,  744,  745,  746,  748,  750,  751,  752,\
    #                                                     753,  754,  755,  756,  758,  759,  760,  761,  762,  764,  765,\
    #                                                     766,  767,  768,  769,  770,  772,  773,  774,  775,  776,  777,\
    #                                                     778,  780,  781,  782,  783,  784,  785,  787,  788,  789,  790,\
    #                                                     791,  792,  793,  794,  795,  796,  798,  800,  801,  802,  803,\
    #                                                     804,  806,  807,  808,  809,  810,  811,  812,  813,  814,  815,\
    #                                                     816,  817,  818,  819,  821,  822,  823,  824,  825,  826,  827,\
    #                                                     828,  829,  830,  831,  832,  834,  835,  836,  837,  838,  841,\
    #                                                     842,  843,  844,  845,  846,  847,  848,  849,  850,  851,  852,\
    #                                                     853,  854,  856,  857,  858,  859,  860,  862,  863,  864,  866,\
    #                                                     868,  870,  871,  872,  875,  876,  877,  878,  881,  882,  883,\
    #                                                     884,  885,  886,  887,  888,  889,  890,  891,  892,  893,  894,\
    #                                                     895,  896,  897,  899,  900,  902,  903,  904,  905,  906,  907,\
    #                                                     908,  909,  910,  913,  915,  916,  917,  918,  919,  920,  921,\
    #                                                     923,  924,  925,  926,  927,  929,  930,  933,  934,  936,  937,\
    #                                                     938,  939,  941,  942,  944,  945,  946,  948,  949,  951,  952,\
    #                                                     954,  955,  957,  959,  960,  961,  964,  965,  966,  967,  968,\
    #                                                     970,  971,  972,  974,  976,  978,  979,  980,  981,  982,  983,\
    #                                                     985,  987,  989,  990,  991,  992,  993,  994,  995,  996,  997,\
    #                                                     999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1011,\
    #                                                    1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023,\
    #                                                    1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036,\
    #                                                    1037, 1038, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050,\
    #                                                    1051, 1052, 1053, 1054, 1055, 1056, 1057, 1060, 1062, 1064, 1066,\
    #                                                    1068, 1070, 1071, 1072, 1073, 1074, 1075, 1077, 1078, 1079, 1080,\
    #                                                    1081, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1093, 1094, 1096,\
    #                                                    1097, 1098, 1099, 1100, 1101, 1102, 1105, 1106, 1107, 1108, 1111,\
    #                                                    1112, 1113, 1114, 1116, 1118, 1119, 1120, 1121, 1122, 1126, 1127,\
    #                                                    1128, 1129, 1130, 1131, 1132, 1134, 1135, 1136, 1137, 1138, 1141,\
    #                                                    1142, 1144, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1155,\
    #                                                    1157, 1158, 1160, 1164, 1166, 1167, 1169, 1170, 1171, 1173, 1174,\
    #                                                    1176, 1177, 1178, 1179, 1180, 1181, 1182, 1184, 1186, 1187, 1188,\
    #                                                    1189, 1191, 1192, 1193, 1195, 1196, 1197, 1198, 1200, 1202, 1203,\
    #                                                    1205, 1206, 1207, 1208, 1209, 1210, 1213, 1214, 1216, 1217, 1218,\
    #                                                    1220, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1230, 1231, 1232,\
    #                                                    1234, 1235, 1236, 1238, 1241, 1242, 1243, 1245, 1246, 1249, 1250,\
    #                                                    1251, 1252, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262,\
    #                                                    1263, 1264, 1265, 1266, 1267, 1269, 1270, 1271, 1272, 1273, 1274,\
    #                                                    1276, 1277, 1278, 1279, 1280, 1281, 1283, 1284, 1285, 1286, 1287,\
    #                                                    1288, 1291, 1292, 1293, 1294, 1295, 1297, 1298, 1299, 1300, 1301,\
    #                                                    1302, 1304, 1305, 1306, 1307, 1309, 1311, 1313, 1315, 1316, 1317,\
    #                                                    1318, 1319, 1322, 1323, 1324, 1325, 1326, 1327, 1330, 1331, 1332,\
    #                                                    1333, 1334, 1335, 1336, 1338, 1339, 1341, 1342, 1343, 1344, 1345,\
    #                                                    1347, 1349, 1350, 1352, 1354, 1355, 1356, 1357, 1358, 1359, 1361,\
    #                                                    1362, 1363, 1364, 1365, 1366, 1368, 1371, 1372, 1374, 1375, 1376,\
    #                                                    1377, 1378, 1379, 1380, 1383, 1384, 1385, 1386, 1389, 1390, 1391,\
    #                                                    1392, 1394, 1395, 1396, 1399, 1400, 1401, 1402, 1403, 1404, 1405,\
    #                                                    1406, 1407, 1409, 1410, 1411, 1412, 1413, 1415, 1416, 1420, 1421,\
    #                                                    1422, 1423, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433,\
    #                                                    1434, 1435, 1436, 1437, 1438, 1439, 1440, 1442, 1443, 1444, 1447,\
    #                                                    1448, 1449, 1452, 1453, 1454, 1455, 1456, 1459, 1460, 1461, 1462,\
    #                                                    1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1473, 1475,\
    #                                                    1476, 1477, 1478, 1480, 1482, 1484, 1486, 1487, 1488, 1491, 1492,\
    #                                                    1494, 1496, 1497, 1500, 1503, 1504, 1506, 1509, 1510, 1511, 1512,\
    #                                                    1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1523, 1524,\
    #                                                    1526, 1527, 1528, 1530, 1531, 1533, 1534, 1535, 1537, 1539, 1541,\
    #                                                    1542, 1544, 1545, 1547, 1548, 1550, 1552, 1553, 1554, 1555, 1556,\
    #                                                    1558, 1559, 1560, 1561, 1562, 1563, 1567, 1568, 1569, 1570, 1572,\
    #                                                    1573, 1575, 1576, 1579, 1580, 1581, 1582, 1583, 1584, 1586, 1587,\
    #                                                    1588, 1589, 1590, 1591, 1593, 1594, 1595, 1596, 1597, 1598, 1599,\
    #                                                    1600, 1601, 1602, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611,\
    #                                                    1615, 1617, 1618, 1620, 1621, 1623, 1626, 1627, 1629, 1631, 1632,\
    #                                                    1635, 1636, 1637, 1638, 1639, 1640, 1641, 1643, 1644, 1646, 1647,\
    #                                                    1649, 1651, 1652, 1655, 1657, 1658, 1659, 1660, 1661, 1662, 1663,\
    #                                                    1664, 1665, 1666, 1667, 1670, 1671, 1672, 1673, 1674, 1675, 1676,\
    #                                                    1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687,\
    #                                                    1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698,\
    #                                                    1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709,\
    #                                                    1710, 1711, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1722, 1724,\
    #                                                    1726, 1728, 1730, 1731, 1733, 1734, 1736, 1737, 1740, 1741, 1742,\
    #                                                    1744, 1746, 1747, 1748, 1750, 1752, 1753, 1754, 1755, 1756, 1757,\
    #                                                    1760, 1761, 1763, 1764, 1766, 1767, 1770, 1772, 1773, 1775, 1776,\
    #                                                    1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1787, 1789, 1790,\
    #                                                    1792, 1793, 1795, 1797, 1800, 1802, 1803, 1804, 1805, 1807, 1808,\
    #                                                    1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819,\
    #                                                    1820, 1822, 1823, 1824, 1827, 1829, 1830, 1831, 1832, 1833, 1834,\
    #                                                    1836, 1837, 1839, 1840, 1841, 1844, 1845, 1846, 1847, 1848, 1850,\
    #                                                    1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863,\
    #                                                    1864, 1866, 1867, 1870, 1873, 1874, 1877, 1878, 1879, 1881, 1882,\
    #                                                    1883, 1884, 1886, 1887, 1889, 1890, 1892, 1893, 1895, 1896, 1897,\
    #                                                    1898, 1901, 1902, 1903, 1904, 1905, 1907, 1908, 1909, 1910, 1911,\
    #                                                    1912, 1914, 1915, 1916, 1917, 1920, 1921, 1922, 1923, 1924, 1926,\
    #                                                    1927, 1928, 1929, 1930, 1931, 1932, 1933, 1936, 1937, 1938, 1941,\
    #                                                    1942, 1945, 1946, 1947, 1948, 1949, 1950, 1952, 1953, 1956, 1957,\
    #                                                    1958, 1959, 1962, 1963, 1964, 1967, 1968, 1969, 1970, 1971, 1972,\
    #                                                    1975, 1976, 1977, 1980, 1981, 1983, 1985, 1986, 1987, 1988, 1989,\
    #                                                    1992, 1993, 1994, 1995, 1996, 1998, 1999, 2001, 2002, 2003, 2005,\
    #                                                    2007, 2008, 2009, 2010, 2013, 2014, 2015, 2016, 2019, 2022, 2023,\
    #                                                    2024, 2025, 2027, 2028, 2029, 2031, 2032, 2035, 2036, 2038, 2040,\
    #                                                    2041, 2044, 2045, 2049, 2050, 2051, 2053, 2054, 2055, 2056, 2057,\
    #                                                    2060, 2061, 2064, 2065, 2066, 2067, 2068, 2071, 2072, 2074, 2075,\
    #                                                    2077, 2078, 2081, 2082, 2083, 2085, 2086, 2087, 2089, 2090, 2091,\
    #                                                    2092, 2093, 2095, 2096, 2097, 2099, 2102, 2103, 2104, 2105, 2108,\
    #                                                    2109, 2110, 2111, 2113, 2115, 2116, 2120, 2121, 2124, 2125, 2127,\
    #                                                    2129, 2130, 2131, 2133, 2135, 2138, 2139, 2140, 2141, 2142, 2143,\
    #                                                    2144, 2145, 2147, 2149, 2150, 2151, 2152, 2153, 2154, 2155, 2157,\
    #                                                    2158, 2159, 2162, 2166, 2167, 2169, 2170, 2171, 2172, 2173, 2174,\
    #                                                    2175, 2176, 2177, 2178, 2179, 2180, 2181, 2183, 2184, 2185, 2188,\
    #                                                    2189, 2190, 2191, 2192, 2193, 2196, 2198, 2199, 2200, 2202, 2203,\
    #                                                    2204, 2206, 2207, 2209, 2210, 2212, 2213, 2214, 2217, 2219, 2220,\
    #                                                    2222, 2223, 2224, 2225, 2228, 2229, 2230, 2232, 2233, 2234, 2236,\
    #                                                    2237, 2239, 2241, 2242, 2244, 2245, 2246, 2247, 2248, 2251, 2252,\
    #                                                    2253, 2254, 2255, 2257, 2258, 2259, 2260, 2261, 2263, 2264, 2266,\
    #                                                    2267, 2268, 2269, 2271, 2272, 2273, 2274, 2275, 2276, 2277, 2278,\
    #                                                    2279, 2282, 2283, 2284, 2285, 2288, 2289, 2290, 2291, 2292, 2293,\
    #                                                    2294, 2296, 2297, 2299, 2300, 2301, 2302, 2304, 2305, 2306, 2308,\
    #                                                    2309, 2310, 2311, 2312, 2313, 2314, 2315, 2316, 2317, 2318, 2320,\
    #                                                    2321, 2323, 2324, 2326, 2329, 2330, 2331, 2332, 2333, 2334, 2335,\
    #                                                    2337, 2339, 2340, 2341, 2342, 2343, 2345, 2346, 2347, 2349, 2350,\
    #                                                    2353, 2354, 2355, 2356, 2357, 2359, 2361, 2362, 2365, 2366, 2367,\
    #                                                    2369, 2371, 2373, 2375, 2376, 2378, 2379, 2380, 2381, 2382, 2384,\
    #                                                    2385, 2386, 2387, 2389, 2390, 2391, 2392, 2394, 2396, 2397, 2398,\
    #                                                    2400, 2401, 2402, 2403, 2406, 2407, 2408, 2409, 2412, 2413, 2414,\
    #                                                    2415, 2416, 2418, 2419, 2420, 2423, 2424, 2425, 2426, 2427, 2428,\
    #                                                    2429, 2430, 2431, 2432, 2433, 2434, 2435, 2436, 2439, 2440, 2441,\
    #                                                    2442, 2443, 2444, 2446, 2447, 2450, 2451, 2452, 2453, 2454, 2456,\
    #                                                    2457, 2458, 2459, 2461, 2463, 2464, 2465, 2466, 2467, 2468, 2469,\
    #                                                    2471, 2473, 2474, 2475, 2476, 2479, 2481, 2482, 2485, 2486, 2487,\
    #                                                    2488, 2489, 2490, 2491, 2492, 2493, 2494, 2496, 2497, 2498, 2499,\
    #                                                    2500, 2502, 2503, 2504, 2505, 2506, 2509, 2510, 2511, 2512, 2514,\
    #                                                    2515, 2516, 2519, 2520, 2521, 2522, 2523, 2524, 2527, 2528, 2529,\
    #                                                    2531, 2532, 2533, 2535, 2536, 2537, 2538, 2539, 2540, 2541, 2542,\
    #                                                    2543, 2544, 2545, 2546, 2547, 2548, 2549, 2551, 2552, 2553, 2555,\
    #                                                    2556, 2558, 2560, 2561, 2562, 2565, 2566, 2568, 2569, 2571, 2572,\
    #                                                    2573, 2575, 2577, 2578, 2580, 2581, 2582, 2584, 2585, 2586, 2587,\
    #                                                    2588, 2589, 2590, 2592, 2593, 2594, 2595, 2596, 2597, 2599, 2600,\
    #                                                    2602, 2603, 2604, 2606, 2608, 2609, 2611, 2613, 2614, 2615, 2616,\
    #                                                    2618, 2619, 2621, 2622, 2624, 2625, 2626, 2628, 2629, 2630, 2631,\
    #                                                    2632, 2633, 2634, 2635, 2637, 2638, 2639, 2640, 2642, 2643, 2645,\
    #                                                    2647, 2649, 2650, 2652, 2653, 2654, 2655, 2657, 2658, 2659, 2660,\
    #                                                    2661, 2663, 2664, 2665, 2666, 2667, 2668, 2670, 2671, 2672, 2673,\
    #                                                    2674, 2675, 2676, 2678, 2679, 2680, 2681, 2682, 2683, 2684, 2685,\
    #                                                    2686, 2687, 2688, 2689, 2690, 2692, 2693, 2694, 2695, 2696, 2697,\
    #                                                    2698, 2700, 2701, 2702, 2704, 2705, 2706, 2707, 2709, 2710, 2711,\
    #                                                    2712, 2714, 2715, 2717, 2718, 2719, 2721, 2722, 2723, 2724, 2725,\
    #                                                    2726, 2727, 2729, 2730, 2731, 2732, 2733, 2734, 2735, 2736, 2737,\
    #                                                    2738, 2739, 2740, 2741, 2742, 2743, 2745, 2746, 2747, 2748, 2749,\
    #                                                    2750, 2751, 2753, 2754, 2755, 2756, 2757, 2758, 2759, 2761, 2762,\
    #                                                    2763, 2764, 2765, 2766, 2767, 2768, 2769, 2770, 2771, 2772, 2773,\
    #                                                    2774, 2775, 2777, 2778, 2779, 2780, 2781, 2782, 2784, 2785, 2786,\
    #                                                    2788, 2789, 2790, 2791, 2792, 2793, 2794, 2797, 2798, 2799, 2800,\
    #                                                    2801, 2802, 2804, 2805, 2806, 2807, 2808, 2809, 2810, 2812, 2813,\
    #                                                    2814, 2815, 2816, 2817, 2818, 2819, 2820, 2821, 2822, 2823, 2826,\
    #                                                    2827, 2828, 2829, 2831, 2832, 2835, 2836, 2837, 2838, 2839, 2840,\
    #                                                    2842, 2843, 2844, 2845, 2846, 2847, 2848, 2849, 2852, 2853, 2855,\
    #                                                    2856, 2858, 2859, 2860, 2862, 2863, 2864, 2866, 2868, 2869, 2872,\
    #                                                    2873, 2874, 2875, 2876, 2877, 2878, 2879, 2882, 2884, 2885, 2887,\
    #                                                    2888, 2889, 2890, 2893, 2894, 2895, 2896, 2899, 2900, 2902, 2904,\
    #                                                    2905, 2906, 2908, 2909, 2911, 2912, 2914, 2915, 2917, 2918, 2919,\
    #                                                    2921, 2923, 2924, 2925, 2926, 2927, 2928, 2930, 2931, 2935, 2936,\
    #                                                    2938, 2941, 2942, 2943, 2944, 2945, 2946, 2947, 2948, 2949, 2950,\
    #                                                    2951, 2952, 2954, 2956, 2957, 2958, 2961, 2962, 2963, 2964, 2965,\
    #                                                    2967, 2968, 2969, 2970, 2971, 2973, 2974, 2975, 2977, 2978, 2979,\
    #                                                    2980, 2981, 2982, 2983, 2984, 2987, 2988, 2989, 2990, 2991, 2993,\
    #                                                    2994, 2996, 2998, 3000, 3001, 3002, 3003, 3004, 3005, 3007, 3008,\
    #                                                    3009, 3010, 3011, 3013, 3014, 3015, 3017, 3018, 3019, 3020, 3021,\
    #                                                    3023, 3024, 3025, 3027, 3028, 3029, 3030, 3032, 3033, 3034, 3035,\
    #                                                    3036, 3038, 3039, 3040, 3041, 3043, 3044, 3047, 3048, 3049, 3050,\
    #                                                    3052, 3054, 3056, 3057, 3058, 3060, 3062, 3064, 3065, 3066, 3067,\
    #                                                    3068, 3071, 3072, 3073, 3074, 3076, 3077, 3079, 3081, 3082, 3083,\
    #                                                    3084, 3086, 3089, 3090, 3091, 3092, 3095, 3096, 3097, 3098, 3100,\
    #                                                    3101, 3104, 3105, 3107, 3109, 3110, 3112, 3113, 3114, 3115, 3117,\
    #                                                    3118, 3119, 3121, 3122, 3123, 3124, 3126, 3127, 3129, 3131, 3132,\
    #                                                    3133, 3134, 3137, 3140, 3141, 3142, 3143, 3144, 3145, 3147, 3149,\
    #                                                    3150, 3151, 3152, 3154, 3155, 3158, 3159, 3160, 3161, 3162, 3164,\
    #                                                    3166, 3168, 3169, 3170, 3171, 3174, 3175, 3176, 3179, 3180, 3181,\
    #                                                    3182, 3185, 3186, 3187, 3190, 3193, 3194, 3195, 3197, 3198, 3199,\
    #                                                    3200, 3201, 3202, 3203, 3205, 3206, 3207, 3209, 3210, 3212, 3214,\
    #                                                    3215, 3216, 3217, 3218, 3219, 3220, 3221, 3223, 3224, 3225, 3227,\
    #                                                    3228, 3231, 3232, 3234, 3236, 3237, 3238, 3239, 3241, 3242, 3244,\
    #                                                    3246, 3247, 3248, 3250, 3251, 3252, 3253, 3254, 3256, 3257, 3258,\
    #                                                    3259, 3260, 3262, 3264, 3265, 3266, 3267, 3268, 3269, 3270, 3271,\
    #                                                    3272, 3273, 3276, 3277, 3278, 3279, 3281, 3283, 3284, 3285, 3288,\
    #                                                    3289, 3291, 3292, 3293, 3294, 3295, 3296, 3298, 3299, 3300, 3301,\
    #                                                    3304, 3305, 3307, 3308, 3311, 3312, 3314, 3316, 3317, 3318, 3319,\
    #                                                    3321, 3322, 3323, 3324, 3325, 3326, 3328, 3330, 3331, 3333, 3334,\
    #                                                    3335, 3336, 3337, 3338, 3339, 3341, 3342, 3345, 3346, 3347, 3348,\
    #                                                    3350, 3351, 3352, 3353, 3355, 3356, 3359, 3360, 3361, 3362, 3363,\
    #                                                    3364, 3366, 3367, 3368, 3369, 3370, 3371, 3372, 3374, 3376, 3379,\
    #                                                    3380, 3381, 3382, 3383, 3384, 3385, 3388, 3389, 3392, 3393, 3394,\
    #                                                    3396, 3398, 3399, 3400, 3402, 3404, 3405, 3407, 3408, 3409, 3410,\
    #                                                    3412, 3413, 3415, 3416, 3417, 3418, 3420, 3421, 3422, 3425, 3426,\
    #                                                    3427, 3428, 3429, 3431, 3432, 3433, 3434, 3435, 3436, 3437, 3439,\
    #                                                    3440, 3441, 3443, 3444, 3446, 3447, 3448, 3451, 3452, 3453, 3454,\
    #                                                    3457, 3458, 3459, 3464, 3465, 3466, 3468, 3469, 3470, 3471, 3472,\
    #                                                    3473, 3474, 3475, 3477, 3478, 3479, 3481, 3482, 3483, 3484, 3486,\
    #                                                    3488, 3490, 3492, 3494, 3496, 3497, 3498, 3500, 3503, 3504, 3505,\
    #                                                    3506, 3509, 3510, 3511, 3512, 3513, 3515, 3517, 3518, 3519, 3520,\
    #                                                    3521, 3522, 3524, 3525, 3526, 3527, 3528, 3529, 3530, 3531, 3532,\
    #                                                    3534, 3535, 3536, 3537, 3539, 3541, 3542, 3543, 3544, 3545, 3546,\
    #                                                    3547, 3550, 3552, 3554, 3557, 3558, 3559, 3560, 3561, 3562, 3563,\
    #                                                    3564, 3565, 3566, 3567, 3568, 3569, 3570, 3571, 3573, 3575, 3576,\
    #                                                    3579, 3580, 3581, 3583, 3584, 3585, 3587, 3588, 3589, 3591, 3592,\
    #                                                    3593, 3595, 3596, 3598, 3599, 3600, 3603, 3604, 3607, 3608, 3609,\
    #                                                    3611, 3613, 3615, 3616, 3618, 3619, 3621, 3623, 3624, 3625, 3628,\
    #                                                    3629, 3630, 3631, 3636, 3637, 3639, 3640, 3642, 3643, 3645, 3646,\
    #                                                    3648, 3649, 3650, 3652, 3653, 3655, 3656, 3657, 3659, 3660, 3662,\
    #                                                    3663, 3664, 3665, 3666, 3668, 3669, 3670, 3671, 3673, 3674, 3676,\
    #                                                    3677, 3679, 3681, 3682, 3683, 3684, 3685, 3686, 3688, 3691, 3692,\
    #                                                    3693, 3694, 3696, 3698, 3699, 3700, 3701, 3702, 3703, 3704, 3705,\
    #                                                    3706, 3708, 3709, 3711, 3712, 3713, 3714, 3715, 3718, 3719, 3720,\
    #                                                    3721, 3722, 3724, 3725, 3726, 3727, 3728, 3731, 3732, 3733, 3735,\
    #                                                    3737, 3738, 3740, 3742, 3743, 3744, 3745, 3746, 3747, 3749, 3750,\
    #                                                    3752, 3753, 3754, 3755, 3756, 3759, 3761, 3762, 3763, 3764, 3766,\
    #                                                    3767, 3768, 3769, 3770, 3771, 3774, 3775, 3778, 3779, 3780, 3781,\
    #                                                    3782, 3783, 3784, 3785, 3786, 3789, 3790, 3791, 3793, 3794, 3795,\
    #                                                    3798, 3799, 3800, 3802, 3803, 3805, 3806, 3807, 3809, 3810, 3811,\
    #                                                    3812, 3813, 3814, 3816, 3817, 3818, 3819, 3820, 3822, 3823, 3826,\
    #                                                    3827, 3828, 3829, 3831, 3833, 3834, 3835, 3836, 3839, 3840, 3841,\
    #                                                    3842, 3843, 3844, 3846, 3847, 3848, 3849, 3850, 3852, 3853, 3854,\
    #                                                    3857, 3858, 3860, 3861, 3862, 3863, 3864, 3865, 3866, 3868, 3869,\
    #                                                    3872, 3873, 3874, 3876, 3877, 3879, 3881, 3882, 3884, 3885, 3886,\
    #                                                    3887, 3889, 3890, 3891, 3893, 3894, 3895, 3896, 3897, 3898, 3900,\
    #                                                    3901, 3902, 3903, 3905, 3907, 3908, 3909, 3911, 3913, 3916, 3917,\
    #                                                    3918, 3919, 3920, 3922, 3923, 3924, 3926, 3927, 3929, 3930, 3932,\
    #                                                    3933, 3934, 3937, 3938, 3939, 3940, 3942, 3943, 3944, 3946, 3947,\
    #                                                    3948, 3949, 3951, 3952, 3953, 3954, 3955, 3956, 3958, 3959, 3960,\
    #                                                    3961, 3962, 3963, 3965, 3966, 3967, 3969, 3970, 3971, 3974, 3975,\
    #                                                    3976, 3978, 3981, 3982, 3983, 3984, 3985, 3986, 3987, 3988, 3989,\
    #                                                    3990, 3991, 3992, 3993, 3994, 3995, 3996, 3997, 3998, 4000, 4001,\
    #                                                    4002, 4003, 4004, 4005, 4007, 4008, 4010, 4011, 4012, 4013, 4015,\
    #                                                    4016, 4017, 4018, 4021, 4022, 4024, 4026, 4027, 4028, 4029, 4032,\
    #                                                    4033, 4035, 4036, 4037, 4039, 4040, 4042, 4043, 4044, 4045, 4046,\
    #                                                    4047, 4048, 4050, 4051, 4052, 4054, 4055, 4056, 4058, 4059, 4061,\
    #                                                    4063, 4064, 4065, 4068, 4069, 4070, 4071, 4074, 4075, 4076, 4077,\
    #                                                    4078, 4079, 4081, 4082, 4083, 4085, 4086, 4087, 4089, 4090, 4093,\
    #                                                    4094, 4095, 4096, 4097, 4098, 4099, 4100, 4101, 4102, 4103, 4104,\
    #                                                    4105, 4106, 4107, 4108, 4111, 4112, 4113, 4115, 4116, 4117, 4118,\
    #                                                    4119, 4120, 4122, 4123, 4124, 4125, 4126, 4127, 4128, 4129, 4132,\
    #                                                    4133, 4136, 4139, 4140, 4141, 4142, 4143, 4144, 4145, 4146, 4147,\
    #                                                    4150, 4151, 4152, 4154, 4155, 4158, 4159, 4161, 4162, 4164, 4165,\
    #                                                    4166, 4167, 4170, 4171, 4172, 4173, 4174, 4175, 4176, 4177, 4178,\
    #                                                    4179, 4180, 4181, 4182, 4183, 4184, 4186, 4187, 4188, 4189, 4190,\
    #                                                    4192, 4193, 4194, 4195, 4197, 4198, 4200, 4202, 4203, 4204, 4206,\
    #                                                    4208, 4209, 4210, 4211, 4214, 4215, 4216, 4217, 4218, 4219, 4220,\
    #                                                    4221, 4222, 4223, 4224, 4225, 4226, 4227, 4228, 4230, 4231, 4233,\
    #                                                    4234, 4235, 4236, 4238, 4239, 4240, 4241, 4242, 4243, 4245, 4246,\
    #                                                    4249, 4250, 4251, 4252, 4253, 4254, 4255, 4257, 4258, 4260, 4261,\
    #                                                    4262, 4264, 4265, 4266, 4267, 4268, 4270, 4271, 4274, 4275, 4278,\
    #                                                    4279, 4280, 4281, 4282, 4283, 4285, 4286, 4288, 4289, 4290, 4292,\
    #                                                    4293, 4294, 4295, 4296, 4298, 4299, 4300, 4301, 4302, 4303, 4304,\
    #                                                    4305, 4307, 4308, 4309, 4310, 4312, 4313, 4315, 4316, 4317, 4319,\
    #                                                    4321, 4323, 4324, 4325, 4328, 4329, 4330, 4332, 4333, 4334, 4336,\
    #                                                    4338, 4339, 4340, 4341, 4342, 4343, 4344, 4345, 4346, 4347, 4348,\
    #                                                    4349, 4351, 4352, 4354, 4355, 4356, 4357, 4358, 4359, 4360, 4361,\
    #                                                    4362, 4364, 4366, 4367, 4368, 4369, 4371, 4372, 4374, 4375, 4376,\
    #                                                    4377, 4378, 4379, 4380, 4381, 4382, 4383, 4386, 4387, 4388, 4389,\
    #                                                    4390, 4391, 4392, 4394, 4395, 4396, 4397, 4398, 4400, 4401, 4402,\
    #                                                    4403, 4405, 4406, 4407, 4408, 4409, 4411, 4412, 4413, 4414, 4416,\
    #                                                    4417, 4418, 4420, 4421, 4422, 4423, 4424, 4425, 4426, 4427, 4428,\
    #                                                    4430, 4431, 4432, 4433, 4436, 4437, 4438, 4439, 4440, 4441, 4442,\
    #                                                    4445, 4446, 4447, 4448, 4449, 4450, 4451, 4453, 4454, 4455, 4456,\
    #                                                    4457, 4458, 4459, 4460, 4461, 4462, 4463, 4464, 4465, 4466, 4467,\
    #                                                    4468, 4469, 4470, 4472, 4473, 4474, 4475, 4476, 4477, 4478, 4479,\
    #                                                    4480, 4481, 4482, 4484, 4485, 4486, 4487, 4489, 4491, 4493, 4494,\
    #                                                    4495, 4496, 4497, 4498, 4500, 4501, 4502, 4503, 4505, 4507, 4508,\
    #                                                    4509, 4511, 4512, 4513, 4515, 4517, 4518, 4519, 4520, 4522, 4523,\
    #                                                    4524, 4525, 4527, 4529, 4530, 4531, 4532, 4533, 4534, 4535, 4537,\
    #                                                    4538, 4539, 4540, 4541, 4542, 4545, 4546, 4547, 4548, 4550, 4551,\
    #                                                    4552, 4553, 4554, 4555, 4557, 4558, 4559, 4560, 4561, 4564, 4565,\
    #                                                    4566, 4567, 4569, 4571, 4572, 4573, 4575, 4576, 4577, 4580, 4581,\
    #                                                    4582, 4583, 4584, 4585, 4586, 4588, 4590, 4591, 4592, 4593, 4594,\
    #                                                    4596, 4597, 4598, 4600, 4601, 4602, 4603, 4604, 4606, 4607, 4608,\
    #                                                    4609, 4610, 4611, 4613, 4615, 4616, 4618, 4620, 4622, 4623, 4625,\
    #                                                    4626, 4628, 4629, 4630, 4631, 4632, 4633, 4634, 4635, 4637, 4638,\
    #                                                    4639, 4640, 4641, 4643, 4644, 4645, 4646, 4647, 4648, 4650, 4651,\
    #                                                    4653, 4654, 4655, 4656, 4657, 4658, 4659, 4661, 4662, 4663, 4664,\
    #                                                    4665, 4666, 4669, 4670, 4671, 4672, 4673, 4674, 4675, 4676, 4677,\
    #                                                    4680, 4681, 4682, 4683, 4684, 4685, 4687, 4688, 4689, 4690, 4691,\
    #                                                    4692, 4693, 4695, 4697, 4698, 4699, 4700, 4702, 4703, 4704, 4705,\
    #                                                    4706, 4707, 4708, 4709, 4710, 4711, 4712, 4713, 4714, 4715, 4716,\
    #                                                    4717, 4718, 4719, 4720, 4721, 4722, 4723, 4724, 4725, 4726, 4727,\
    #                                                    4729, 4730, 4731, 4732, 4733, 4735, 4736, 4737, 4738, 4739, 4740,\
    #                                                    4741, 4742, 4743, 4744, 4745, 4746, 4747, 4748, 4749, 4750, 4751,\
    #                                                    4752, 4753, 4755, 4756, 4757, 4759, 4761, 4762, 4764, 4765, 4766,\
    #                                                    4767, 4770, 4771, 4774, 4775, 4776, 4777, 4779, 4781, 4782, 4783,\
    #                                                    4785, 4786, 4787, 4788, 4789, 4790, 4791, 4792, 4793, 4795, 4796,\
    #                                                    4797, 4799, 4800, 4801, 4804, 4806, 4807, 4808, 4810, 4811, 4813,\
    #                                                    4814, 4815, 4816, 4817, 4818, 4821, 4822, 4823, 4824, 4826, 4828,\
    #                                                    4829, 4830, 4831, 4832, 4833, 4834, 4835, 4836, 4837, 4839, 4840,\
    #                                                    4841, 4842, 4844, 4845, 4846, 4847, 4848, 4849, 4850, 4851, 4854,\
    #                                                    4855, 4856, 4857, 4858, 4859, 4861, 4862, 4863, 4864, 4865, 4866,\
    #                                                    4867, 4869, 4870, 4871, 4872, 4873, 4874, 4875, 4876, 4877, 4878,\
    #                                                    4879, 4880, 4881, 4883, 4884, 4885, 4886, 4887, 4890, 4891, 4892,\
    #                                                    4893, 4894, 4895, 4896, 4898, 4899, 4901, 4902, 4903, 4904, 4905,\
    #                                                    4906, 4907, 4909, 4910, 4911, 4912, 4913, 4915, 4916, 4917, 4918,\
    #                                                    4919, 4921, 4922, 4923, 4924, 4925, 4927, 4928, 4929, 4930, 4931,\
    #                                                    4933, 4934, 4935, 4936, 4937, 4940, 4941, 4942, 4943, 4944, 4945,\
    #                                                    4947, 4948, 4950, 4951, 4952, 4953, 4954, 4955, 4956, 4958, 4959,\
    #                                                    4960, 4962, 4963, 4964, 4966, 4967, 4968, 4969, 4970, 4971, 4972,\
    #                                                    4973, 4974, 4975, 4976, 4977, 4978, 4979, 4981, 4982, 4985, 4988])
    # known_pulser_ids['run5179']['vpol'] = numpy.copy(known_pulser_ids['run5179']['hpol'])

    known_pulser_ids['run5180'] = {}
    known_pulser_ids['run5180']['hpol'] = numpy.array([   1,    3,    5,    7,    9,   11,   13,   15,   17,   19,   21,\
                                                         23,   25,   27,   29,   31,   33,   35,   37,   39,   62,   81,\
                                                         91,  109,  122,  140,  157,  173,  188,  211,  221,  236,  255,\
                                                        278,  301,  325,  340,  363,  374,  398,  422,  437,  460,  477,\
                                                        490,  498,  508,  515,  527,  538,  553,  577,  592,  607,  620,\
                                                        640,  665,  684,  698,  714,  720,  735,  744,  756,  766,  772,\
                                                        786,  800,  818,  834,  853,  882,  906,  925,  941,  958, 1000,\
                                                       1033, 1051, 1063, 1074, 1082, 1131, 1142, 1152, 1167, 1181, 1214,\
                                                       1223, 1237, 1245, 1255, 1267, 1286, 1295, 1306, 1320, 1330, 1339,\
                                                       1347, 1359, 1369, 1378, 1395, 1407, 1420, 1435, 1446, 1463, 1472,\
                                                       1484, 1492, 1506, 1517, 1526, 1535, 1550, 1556, 1568, 1584, 1595,\
                                                       1609, 1633, 1649, 1659, 1670, 1678, 1689, 1697, 1707, 1715, 1727,\
                                                       1737, 1748, 1756, 1763, 1767, 1774, 1798, 1808, 1821, 1832, 1841,\
                                                       1850, 1865, 1873, 1882, 1889, 1899, 1910, 1923, 1937, 1951, 1964,\
                                                       1973, 1981, 1990, 2010, 2029, 2034, 2045, 2061, 2073, 2090, 2104,\
                                                       2110, 2124, 2139, 2160, 2177, 2190, 2195, 2205, 2223, 2240, 2247,\
                                                       2258, 2265, 2279, 2287, 2296, 2305, 2320, 2326, 2336, 2346, 2354,\
                                                       2370, 2382, 2389, 2399, 2409, 2424, 2441, 2461, 2476, 2489, 2499,\
                                                       2508, 2549, 2565, 2581, 2611, 2627, 2666, 2682, 2694, 2702, 2709,\
                                                       2718, 2731, 2747, 2763, 2777, 2792, 2803, 2816, 2824, 2839, 2855,\
                                                       2870, 2882, 2894, 2906, 2920, 2936, 2958, 2971, 2985, 3003, 3025,\
                                                       3038, 3046, 3060, 3074, 3091, 3100, 3119, 3135, 3143, 3153, 3165,\
                                                       3175, 3195, 3211, 3232, 3244, 3253, 3261, 3271, 3279, 3291, 3300,\
                                                       3311, 3318, 3326, 3345, 3355, 3364, 3385, 3399, 3406, 3414, 3435,\
                                                       3454, 3481, 3509, 3536, 3544, 3560, 3565, 3586, 3593, 3607, 3613,\
                                                       3624, 3632, 3637, 3646, 3657, 3667, 3682, 3692, 3705, 3718, 3730,\
                                                       3739, 3749, 3754, 3765, 3784, 3795, 3803, 3813, 3823, 3832, 3847,\
                                                       3857, 3872, 3883, 3900, 3912, 3922, 3931, 3952, 3962, 3977, 3997,\
                                                       4009, 4019, 4032, 4048, 4060, 4068, 4080, 4092, 4096, 4105, 4117,\
                                                       4128, 4142, 4151, 4165, 4212, 4226, 4242, 4252, 4270, 4278, 4295,\
                                                       4304, 4323, 4338, 4358, 4371, 4381, 4390, 4402, 4415, 4433, 4442,\
                                                       4451, 4464, 4481, 4495, 4504, 4515, 4534, 4548, 4561, 4570, 4580,\
                                                       4590, 4596, 4612, 4622, 4627, 4640, 4661, 4668, 4679, 4695, 4711,\
                                                       4721, 4736, 4756, 4771, 4782, 4792, 4804, 4816, 4835, 4848, 4858,\
                                                       4873, 4887, 4897, 4908, 4918, 4933, 4952, 4963, 4980, 4987, 4997,\
                                                       5007, 5016, 5028, 5039, 5051, 5059, 5071, 5080, 5155, 5165, 5169,\
                                                       5175, 5187, 5210, 5216, 5235, 5248, 5257, 5269, 5277, 5287, 5297,\
                                                       5303, 5320, 5326, 5337, 5343, 5355, 5376, 5385, 5389, 5402, 5408,\
                                                       5417, 5428, 5453, 5465, 5472, 5481, 5499, 5505, 5518, 5526, 5534,\
                                                       5548, 5557, 5566, 5578, 5585, 5593, 5605, 5615, 5623, 5641, 5652,\
                                                       5662, 5675, 5689, 5702, 5708, 5714, 5723, 5733, 5743, 5746, 5756,\
                                                       5761, 5770, 5788, 5794, 5802, 5812, 5824, 5839, 5847, 5857, 5864,\
                                                       5877, 5883, 5891, 5897, 5907, 5915, 5923, 5930, 5942, 5951, 5958,\
                                                       5967, 5974, 5986, 5994, 5999, 6009, 6015, 6027, 6044, 6052, 6059,\
                                                       6066, 6082, 6096, 6107, 6121, 6132, 6141, 6149, 6156, 6163, 6175,\
                                                       6181, 6192, 6214, 6226, 6237, 6250, 6260, 6269, 6282, 6296, 6312,\
                                                       6328, 6334, 6345, 6364, 6379, 6394, 6404, 6413, 6429, 6437, 6449,\
                                                       6476, 6487, 6494, 6505, 6512, 6515, 6521, 6536, 6543, 6557, 6571,\
                                                       6581, 6590, 6600, 6606, 6620, 6635, 6650, 6662, 6676, 6684, 6696,\
                                                       6711, 6722, 6731, 6737, 6752, 6757, 6769, 6782, 6805, 6811, 6818,\
                                                       6824, 6834, 6846, 6858, 6870, 6879, 6898, 6915, 6923, 6930, 6945,\
                                                       6961, 6970, 6982, 6995, 7009, 7023, 7032, 7039, 7049, 7057, 7066,\
                                                       7081, 7087, 7094, 7114, 7124, 7131, 7141, 7145, 7155, 7162, 7174,\
                                                       7178, 7187, 7193, 7207, 7222, 7236, 7244, 7254, 7264, 7296, 7305,\
                                                       7317, 7328, 7341, 7349, 7359, 7367, 7375, 7386, 7395, 7405, 7410,\
                                                       7423, 7433, 7444, 7457, 7464, 7472, 7481, 7490, 7512, 7526, 7537,\
                                                       7548, 7557, 7576, 7583, 7590, 7596, 7605, 7612, 7620, 7633, 7643,\
                                                       7650, 7659, 7673, 7681, 7689, 7699, 7705, 7709, 7719, 7732, 7742,\
                                                       7750, 7768, 7774, 7782, 7790, 7798, 7802, 7811, 7821, 7833, 7842,\
                                                       7855, 7867, 7878, 7890, 7901, 7909, 7914, 7924, 7947, 7955, 7961,\
                                                       7984, 7990, 7994, 8003, 8009, 8024, 8033, 8048, 8053, 8060, 8071,\
                                                       8077, 8087, 8092, 8100, 8123, 8131, 8145, 8150, 8157, 8164, 8172,\
                                                       8177, 8184, 8189, 8195, 8205, 8212, 8217, 8222, 8226, 8233, 8272,\
                                                       8279, 8286, 8304, 8315, 8328, 8333, 8338, 8344, 8352, 8361, 8367,\
                                                       8376, 8384, 8397, 8409, 8429, 8444, 8456, 8462, 8475, 8479, 8489,\
                                                       8500, 8507, 8517, 8521, 8533, 8541, 8548, 8565, 8572, 8749, 8755,\
                                                       8766, 8773, 8780, 8787, 8795, 8801, 8810, 8822, 8829, 8837, 8851,\
                                                       8861, 8878, 8886, 8889, 8898, 8907, 8917, 8928, 8936, 8942, 8951,\
                                                       8957, 8971, 8979, 8987, 8999, 9007, 9016, 9036, 9049, 9056, 9073,\
                                                       9084, 9092, 9098, 9108, 9114, 9118, 9129, 9142, 9150, 9157, 9170,\
                                                       9181, 9188, 9201, 9207, 9212, 9220, 9227, 9229, 9234, 9241, 9253,\
                                                       9258, 9267, 9273, 9281, 9291, 9299, 9308, 9312, 9321])
    known_pulser_ids['run5180']['vpol'] = numpy.copy(known_pulser_ids['run5180']['hpol'])

    known_pulser_ids['run5183'] = {}
    known_pulser_ids['run5183']['hpol'] = numpy.array([ 41,  46,  71,  74,  77,  89,  99, 102, 105, 120, 139, 146, 155,\
                                                       205, 208, 211, 230, 237, 241, 248, 253, 270, 277, 285, 295, 298,\
                                                       311, 345, 366, 375, 379, 392, 402, 416, 420, 436, 439, 468, 481,\
                                                       484, 487, 493, 535, 544, 547, 550, 553, 570, 575, 589, 613, 618,\
                                                       637, 646, 675, 689, 699, 723, 733, 736, 739, 742, 747, 760, 768,\
                                                       775, 790, 810, 827, 838, 856, 930, 940, 949])
    known_pulser_ids['run5183']['vpol'] = numpy.copy(known_pulser_ids['run5183']['hpol'])

    known_pulser_ids['run5190'] = {}
    known_pulser_ids['run5190']['hpol'] = numpy.array([3144, 3183, 3249, 3358, 3433, 3467, 3476, 3800, 4036, 4044, 4076,\
                                                       4323, 4337, 4573, 4601, 4758, 4883, 4898, 4910, 5027, 5067, 5237,\
                                                       5336, 5374, 5448, 5603, 5611, 5736, 5771, 5994, 6281, 6314])
    known_pulser_ids['run5190']['vpol'] = numpy.copy(known_pulser_ids['run5190']['hpol'])

    known_pulser_ids['run5196'] = {}
    known_pulser_ids['run5196']['hpol'] = numpy.array([  834,   891,  1274,  2111,  3380,  4139,  5793,  7800,  8463,\
                                                       10321, 10335, 10406, 10878, 11028, 11054, 11713, 12417, 12766,\
                                                       12883, 13173, 13498, 13893, 14215, 14686, 15533, 16291, 16832,\
                                                       17130, 17243, 17793, 18145, 18379])
    known_pulser_ids['run5196']['vpol'] = numpy.copy(known_pulser_ids['run5196']['hpol'])

    # known_pulser_ids['run5170'] = {}
    # known_pulser_ids['run5170']['hpol'] = numpy.array([])
    # known_pulser_ids['run5170']['vpol'] = numpy.copy(known_pulser_ids['run5170']['hpol'])

    # known_pulser_ids['run5170'] = {}
    # known_pulser_ids['run5170']['hpol'] = numpy.array([])
    # known_pulser_ids['run5170']['vpol'] = numpy.copy(known_pulser_ids['run5170']['hpol'])




    if remove_ignored == True:
        ignore_events = loadIgnorableEventids()
        for key in numpy.array(list(known_pulser_ids.keys()))[numpy.isin(numpy.array(list(known_pulser_ids.keys())),numpy.array(list(ignore_events.keys())))]:
            if type(known_pulser_ids[key]) is dict:
                for kkey,val in known_pulser_ids[key].items():
                    known_pulser_ids[key][kkey] = known_pulser_ids[key][kkey][~numpy.isin(known_pulser_ids[key][kkey],ignore_events[key])]
            else:
                known_pulser_ids[key] = known_pulser_ids[key][~numpy.isin(known_pulser_ids[key],ignore_events[key])]
    #import pdb; pdb.set_trace()
    return known_pulser_ids
    known_pulser_ids['run5180']['vpol'] = numpy.copy(known_pulser_ids['run5180']['hpol'])






def loadBeamDelays(finame_hpol_delays=None, finame_vpol_delays=None, reset_rel_to_ant0=False):
    '''
    This will load the beams and beam delays that are currently selected as the best selction.
    These were determined using the define_beams.py script.  The delays are given in integer
    values of how many samples to delay each antenna's signal by for that beam.  The values
    are all positive such that the antenna that has 0 delay is the antenna that you expect
    the signal to arrive at last (all others are delayed until it's arrival).
    '''
    if finame_hpol_delays == None:
        hpol_delays_file = os.environ['BEACON_ANALYSIS_DIR'] + 'tools/beam_definitions/hpol_beam_delays.csv'
    else:
        hpol_delays_file = finame_hpol_delays
    if finame_hpol_delays == None:
        vpol_delays_file = os.environ['BEACON_ANALYSIS_DIR'] + 'tools/beam_definitions/vpol_beam_delays.csv'
    else:
        vpol_delays_file = finame_vpol_delays
        
    header = 1
    hpol_vals = numpy.loadtxt(hpol_delays_file,delimiter=',')
    vpol_vals = numpy.loadtxt(hpol_delays_file,delimiter=',')
    
    #print( numpy.shape(hpol_vals), numpy.shape(hpol_vals) )
    nbeams = numpy.shape(hpol_vals)[0]
    ncols = numpy.shape(hpol_vals)[1]
    
    if reset_rel_to_ant0 == True:
        for i in range(nbeams):
            # antenna 0
            hpol_ant0_delay = hpol_vals[i][3]
            hpol_vals[i][3] = 0
            # antenna 1
            hpol_vals[i][4] = hpol_vals[i][4]-hpol_ant0_delay
            # antenna 2
            hpol_vals[i][5] = hpol_vals[i][5]-hpol_ant0_delay
            # antenna 3
            hpol_vals[i][6] = hpol_vals[i][6]-hpol_ant0_delay
            
    return hpol_vals, vpol_vals

def printBaselines(deploy_index=default_deploy, calculate_phase=False, verbose=False, attempt_residual=False):
    '''
    Currently only intended to plot the most recent station with the three pulsers that we used for it.
    '''
    try:
        antennas_physical, antennas_phase_hpol, antennas_phase_vpol = loadAntennaLocationsENU(deploy_index=deploy_index,check=False)

        print(loadAntennaLocationsENU(deploy_index=deploy_index,check=False))

        colors = ['b','g','r','c']


        if calculate_phase:
            modes = ['physical','hpol', 'vpol']
        else:
            modes = ['physical']

        for mode in modes:
            if mode == 'hpol':
                enu = antennas_phase_hpol
            elif mode == 'vpol':
                enu = antennas_phase_vpol
            else:
                enu = antennas_physical

            print('%s baselines:'%mode)
            for pair_index, pair in enumerate([[0,1],[0,2],[0,3],[1,2],[1,3],[2,3]]):
                try:
                    if attempt_residual and 'day3' in deploy_index:
                        baselines_2021 = [36.30442813493905,48.26056193162632,49.77493409688374,40.73270820884672,23.883751506682128,24.267904281450853] #from theodolite measurements.
                        baseline = numpy.sqrt((enu[pair[0]][0] - enu[pair[1]][0])**2 + (enu[pair[0]][1] - enu[pair[1]][1])**2 + (enu[pair[0]][2] - enu[pair[1]][2])**2) - baselines_2021[pair_index]
                    elif attempt_residual and 'day1' in deploy_index:
                        baselines_2019 = [37.66621036587292,49.35422199796859,51.328014180051625,40.99761587693306,24.65026253006104,23.78813961956573] #from theodolite measurements.
                        baseline = numpy.sqrt((enu[pair[0]][0] - enu[pair[1]][0])**2 + (enu[pair[0]][1] - enu[pair[1]][1])**2 + (enu[pair[0]][2] - enu[pair[1]][2])**2) - baselines_2019[pair_index]
                    else:
                        baseline = numpy.sqrt((enu[pair[0]][0] - enu[pair[1]][0])**2 + (enu[pair[0]][1] - enu[pair[1]][1])**2 + (enu[pair[0]][2] - enu[pair[1]][2])**2)
                    print('\t%s : %0.3f m'%(str(pair),baseline))
                except:
                    if verbose:
                        print('%s failed or not present.'%mode)



    except Exception as e:
        print('\nError in %s'%inspect.stack()[0][3])
        print(e)
        exc_type, exc_obj, exc_tb = sys.exc_info()
        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
        print(exc_type, fname, exc_tb.tb_lineno)

'''
MAKE AN EXPECTED PULSER TIME DELAY FUNCTION
'''

if __name__ == '__main__':
    try:
        from pprint import pprint
        
        print('Loaded run info dictionaries.')
        #plt.ion()
        #loadBeamDelays()
        antennas_physical, antennas_phase_hpol, antennas_phase_vpol = loadAntennaLocationsENU(deploy_index=default_deploy)



        print('antenna_physical = ')
        pprint(antennas_physical)

        print('antenna_phase_hpol = ')
        pprint(antennas_phase_hpol)

        print('antenna_phase_vpol = ')
        pprint(antennas_phase_vpol)
        #known_planes, calibrated_trigtime, output_tracks = getKnownPlaneTracks()

        print('\n\n\n\n')

        for deploy_index in ['rtk-gps-day3-june22-2021.json', 'theodolite-day3-june22-2021_only_enu.json']:
            plotStationAndPulsers(deploy_index=deploy_index,plot_phase=False)

        if False:
            for deploy_index in [1,2,3]:
                pulser_locations_ENU = loadPulserLocationsENU(deploy_index=deploy_index)
                print('deploy_index = %i'%deploy_index)

                #Pulser Location 1
                p1_enu = pulser_locations_ENU['run1507']        
                p1_phi = numpy.arctan2(p1_enu[1],p1_enu[0])
                if p1_phi < 0:
                    print('Pulser location 1 phi is: %0.2f degrees South of East'%abs(numpy.rad2deg(p1_phi)))
                else:
                    print('Pulser location 1 phi is: %0.2f degrees North of East'%abs(numpy.rad2deg(p1_phi)))

                #Pulser Location 2
                p2_enu = pulser_locations_ENU['run1509']        
                p2_phi = numpy.arctan2(p2_enu[1],p2_enu[0])
                if p2_phi < 0:
                    print('Pulser location 2 phi is: %0.2f degrees South of East'%abs(numpy.rad2deg(p2_phi)))
                else:
                    print('Pulser location 2 phi is: %0.2f degrees North of East'%abs(numpy.rad2deg(p2_phi)))

                #Pulser Location 3
                p3_enu = pulser_locations_ENU['run1511']        
                p3_phi = numpy.arctan2(p3_enu[1],p3_enu[0])
                if p3_phi < 0:
                    print('Pulser location 3 phi is: %0.2f degrees South of East'%abs(numpy.rad2deg(p3_phi)))
                else:
                    print('Pulser location 3 phi is: %0.2f degrees North of East'%abs(numpy.rad2deg(p3_phi)))

        if False:
            fig = plt.figure()
            fig.canvas.set_window_title('Antenna Positions In Various Calibrations')
            ax = fig.add_subplot(111, projection='3d')

            ant0 = []
            ant1 = []
            ant2 = []
            ant3 = []


            for deploy_index in [6,7,9]:
                antennas_physical, antennas_phase_hpol, antennas_phase_vpol = loadAntennaLocationsENU(deploy_index=deploy_index)
                ant0.append(antennas_phase_hpol[0])
                ant1.append(antennas_phase_hpol[1])
                ant2.append(antennas_phase_hpol[2])
                ant3.append(antennas_phase_hpol[3])

            ax.scatter(numpy.array(ant0)[:,0], numpy.array(ant0)[:,1], numpy.array(ant0)[:,2],c='r',alpha=0.5,label='Initial Ant0')
            ax.scatter(numpy.array(ant1)[:,0], numpy.array(ant1)[:,1], numpy.array(ant1)[:,2],c='g',alpha=0.5,label='Initial Ant1')
            ax.scatter(numpy.array(ant2)[:,0], numpy.array(ant2)[:,1], numpy.array(ant2)[:,2],c='b',alpha=0.5,label='Initial Ant2')
            ax.scatter(numpy.array(ant3)[:,0], numpy.array(ant3)[:,1], numpy.array(ant3)[:,2],c='m',alpha=0.5,label='Initial Ant3')

            ax.set_xlabel('East (m)',linespacing=10)
            ax.set_ylabel('North (m)',linespacing=10)
            ax.set_zlabel('Up (m)',linespacing=10)


            fig = plt.figure()
            fig.canvas.set_window_title('Antenna Positions In Various Calibrations')
            ax = fig.add_subplot(111, projection='3d')

            labels = {6:'Southern',7:'Northern',8:'Eastern',9:'Western'}

            for deploy_index in [8,7,9,6]:
                antennas_physical, antennas_phase_hpol, antennas_phase_vpol = loadAntennaLocationsENU(deploy_index=deploy_index)
                x = [antennas_phase_hpol[0][0],antennas_phase_hpol[1][0],antennas_phase_hpol[2][0],antennas_phase_hpol[3][0]]
                y = [antennas_phase_hpol[0][1],antennas_phase_hpol[1][1],antennas_phase_hpol[2][1],antennas_phase_hpol[3][1]]
                z = [antennas_phase_hpol[0][2],antennas_phase_hpol[1][2],antennas_phase_hpol[2][2],antennas_phase_hpol[3][2]]
                ax.scatter(x, y, z,alpha=0.5,label=labels[deploy_index])

            plt.legend()
            ax.set_xlabel('East (m)',linespacing=10)
            ax.set_ylabel('North (m)',linespacing=10)
            ax.set_zlabel('Up (m)',linespacing=10)


    except Exception as e:
        print('Error in main loop.')
        print(e)
        exc_type, exc_obj, exc_tb = sys.exc_info()
        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
        print(exc_type, fname, exc_tb.tb_lineno)
