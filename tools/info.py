'''
This file is intended to hold any organizational information to centralize it to be imported by other scripts.

This file itself may not be the most organized by hopefully it allows others to stay moreso. 

A 'deploy_index' is used for many locations to denote the specific configuration of antennas and pulsers depending
upon which deployment you are in.

You can set what you want the default deployment to be by changing default_deploy at the top of this file.

The produced ENU coordinates were double checked 3 ways: the method presented (pymap3d), an additional method
using astropy EarthLocation to go from GPS to ECEF, and then using pyuvdata to go from ECEF to ENU, and finally it was 
checked GeograpihcLib/CartConvert.  All agreed, so pymap3d stays.  This was done on 3/30/2021.


deploy_index = 0:
    Before Oct 2019
deploy_index = 1:
    After Oct 2019
'''
import sys
import os
import inspect

import numpy
import csv

sys.path.append(os.environ['BEACON_ANALYSIS_DIR'])
sys.path.append(os.environ['BEACON_INSTALL_DIR'])
from examples.beacon_data_reader import Reader #Must be imported before matplotlib or else plots don't load.
from tools.data_handler import getEventTimes, createFile
import tools.field_fox as ff

import h5py
import pymap3d as pm
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import scipy.interpolate

default_deploy = 26#2#13#19#15#The deployment calibration to use as the default.


def returnDefaultDeploy():
    return default_deploy

def loadKnownPlaneDict(ignore_planes=[]):
    '''
    Loads a list of known planes, and the event ids associated with them.

    Good baselines indicate baselines that are worth using for calibration.

    I.e. if an antenna is down, the baselines with that antenna won't be useful.
    Or if an event is clearly only hpol the vpol might not be worth trying to
    calibrate.  

    If reasonable, the time delays may be stored here as well.  This is helpful
    if time delays were done by eye and not easily reproduced with cross correlation.

    ignore_planes is a list of strings.  Any string in this matching a key below will not be added to the known_planes dict.
    
    Signal classificationw as added to see if there are frequency dependances.  
    PLF :   Pure Low Frequency  - Significant gain between 35 and ?? Mhz
    LF :    Low Frequency       - Significant gain between 35 and 65 Mhz
    HF :    High Frequency      - Significant gain between 45 and 80 MHz
    PHF :   Pure High Frequency - Significant gain between 65 and 85 MHz
    BB :    Broadband           - Significant gain between 30 and 80 MHz
    '''

    known_planes = {}
    '''
    #Only 2 events and are so hard to get to calibrate/
    if ~numpy.isin('1705-55163',ignore_planes):
        known_planes['1705-55163'] = {  'eventids':numpy.array([[1705,55163],[1705,55643]]),\
                        'dir':'E',\
                        'known_flight':'a405d9',\
                        'signal_classification':'LF',\
                        'baselines':{'hpol':[[0,1],[0,2],[0,3],[1,2],[1,3],[2,3]],'vpol':[[0,1],[0,2],[0,3],[1,2],[1,3],[2,3]]},\
                        'time_delays':{\
                            'hpol':numpy.array([[ -94.1068089 ,   79.02970008,  -13.60693431,  172.85498621, 79.79606765,  -92.93379733],\
                                                [-126.5757694 ,   13.05952891,  -84.62887535,  139.32249522, 42.29097744,  -97.57892318]]),\
                            'vpol':numpy.array([[ -91.0569788 ,   75.46374488,   -8.44568337,  166.63020476, 82.45489389,  -83.9250684 ],\
                                               [-123.02545435,    9.91585788,  -77.45004449,  133.5356381 , 45.27824693,  -88.10098962]]) },\
                        'max_corrs':{\
                            'hpol':numpy.array([[0.84648652, 0.89595556, 0.8819821 , 0.90708408, 0.85060955, 0.89920087], \
                                                [0.83137908, 0.88864107, 0.92457404, 0.79697424, 0.8847366 , 0.86657071]]),\
                            'vpol':numpy.array([[0.73876297, 0.67328208, 0.69787771, 0.71509814, 0.72462139, 0.73146428], \
                                                [0.55098112, 0.60001861, 0.57542028, 0.57280908, 0.65593796, 0.62172523]])}}

    '''
    '''
    #2 events essentially overlapping in info, ignoring

    if ~numpy.isin('1720-71316',ignore_planes):
        known_planes['1720-71316'] = {  'eventids':numpy.array([[1720,71316],[1720,71324]]),\
                        'dir':'E',\
                        'known_flight':'a678ef',\
                        'signal_classification':'HF',\
                        'baselines':{'hpol':[[0,1],[0,2],[0,3],[1,2],[1,3],[2,3]],'vpol':[[0,1],[0,2],[0,3],[1,2],[1,3],[2,3]]},\
                        'time_delays':{\
                            'hpol':numpy.array([[-117.927, -116.26890766, -175.07588813,   14.2951011 , -49.72005077,  -59.71410942],\
                                                [-117.786, -116.33146828, -175.71713446,   14.20126018, -48.93804305,  -59.94871174]]),\
                            'vpol':numpy.array([[-115.51818025, -135.72525971, -170.36820166,    2.36166331, -53.7552106 ,  -52.94192258],\
                                                [-115.409, -135.31861569, -170.5246032 ,    1.62657606, -54.75618048,  -52.94192258]]) },\
                        'max_corrs':{\
                            'hpol':numpy.array([[0.06691282, 0.508, 0.56791161, 0.25925511, 0.3155459 ,  0.6817223 ],\
                                                [0.464, 0.62073659, 0.5687022 , 0.39966083, 0.38362624,  0.68305019]]),\
                            'vpol':numpy.array([[0.59041077, 0.74848408, 0.71214989, 0.38628673, 0.30179605,  0.89634879],\
                                                [0.677, 0.73595921, 0.65665583, 0.30596724, 0.28455063,  0.89698474]])}}
    '''


    if ~numpy.isin('1728-62026',ignore_planes):
        known_planes['1728-62026'] = {  'eventids':numpy.array([[1728,62026],[1728,62182],[1728,62370],[1728,62382],[1728,62552],[1728,62577]]),\
                        'dir':'W',\
                        'known_flight':'a44585',\
                        'signal_classification':'BB',\
                        'baselines':{'hpol':[[0,1],[0,2],[0,3],[1,2],[1,3],[2,3]],'vpol':[[0,1],[0,2],[0,3],[1,2],[1,3],[2,3]]},\
                        'time_delays':{\
                            'hpol':numpy.array([[  99.36190078,   25.44653118,   96.07746836,  -73.43052481,   -2.83086794,     70.61529703],\
                                                 [  91.29158112,    8.25800151,   78.10693097,  -82.84589775,  -13.15336983,     70.09917193],\
                                                 [  69.94277039,  -26.74466399,   37.41124928,  -96.76563515,  -32.45332034,     64.24975419],\
                                                 [  68.09723217,  -29.07504699,   34.68986241,  -97.21919963,  -33.14148713,     63.68670863],\
                                                 [  37.28612804,  -65.26636423,  -13.93537755, -102.66197335,  -50.20489556,     51.69071023],\
                                                 [  31.93719524,  -69.58304684,  -20.25399992, -101.70792393,  -51.92531254,     49.12572491]]),\
                            'vpol':numpy.array([[ 102.52121196,   23.36639064,  102.63069304,  -79.07662054,    0.12512124,     79.32686301],\
                                                 [  94.66985446,    5.77121697,   84.08146995,  -88.88299734,  -10.61966482,     78.31025298],\
                                                 [  73.3992445,   -29.96653579,   43.11990563, -103.28757952,  -30.27933888,     73.03952095],\
                                                 [  71.64754721,  -32.15615741,   40.3515983,  -103.80370462,  -31.45235046,     72.44519509],\
                                                 [  38.80322302,  -67.95647078,   -9.36845247, -106.74405364,  -48.10911487,     58.556738  ],\
                                                 [  33.72017284,  -72.27315339,  -16.18755978, -105.99332623,  -49.84517201,     56.03867314]])},\
                        'max_corrs':{\
                            'hpol':numpy.array([[0.54296347, 0.66401425, 0.5290622,  0.46341469, 0.57353087, 0.68803661],\
                                                 [0.72755695, 0.73327106, 0.67828298, 0.71050678, 0.740176,   0.7255736 ],\
                                                 [0.78951981, 0.87576484, 0.91596379, 0.79068938, 0.80368587, 0.8066493 ],\
                                                 [0.73420813, 0.86623596, 0.79277576, 0.75192662, 0.77947303, 0.72376367],\
                                                 [0.55723343, 0.85686536, 0.74134153, 0.63097564, 0.71972242, 0.70229345],\
                                                 [0.62062809, 0.83165972, 0.74880425, 0.61628435, 0.74726736, 0.75501151]]),\
                            'vpol':numpy.array([[0.74859039, 0.72094946, 0.68496901, 0.77969161, 0.85019343, 0.77799921],\
                                                 [0.8244373,  0.83915634, 0.8180681,  0.84242355, 0.89382184, 0.83890872],\
                                                 [0.88868985, 0.90940108, 0.89158618, 0.88425718, 0.87083196, 0.89345349],\
                                                 [0.88184143, 0.92427453, 0.87074308, 0.89623232, 0.86348606, 0.88157825],\
                                                 [0.91547578, 0.93912025, 0.90280934, 0.91923303, 0.92003877, 0.89160619],\
                                             [0.9403921,  0.94107688, 0.90800336, 0.93372543, 0.91330014, 0.90518039]])}}
    '''
    #Only 1 event, ignoring
    if ~numpy.isin('1759-510',ignore_planes):
        known_planes['1759-510'] = {  'eventids':numpy.array([[1759,510]]),\
                        'dir':'N',\
                        'known_flight':'a04abd',\
                        'signal_classification':'HF',\
                        'baselines':{'hpol':[[0,1],[0,2],[0,3],[1,2],[1,3],[2,3]],'vpol':[]},\
                        'time_delays':{\
                            'hpol':numpy.array([[-117.78600263, -116.26890766, -172.51090281,    1.14173127,-55.56946851,  -56.69555963]]),\
                            'vpol':numpy.array([[ 100.48799189, -179.83049506,   48.04655425,   -4.95792894,  -53.25472566,  -47.04558437]])},\
                        'max_corrs':{\
                            'hpol':numpy.array([[0.66419262, 0.62868594, 0.74188733, 0.73069807, 0.44745382,  0.51406763]]),\
                            'vpol':numpy.array([[0.09560191, 0.12838598, 0.1206995 , 0.45108116, 0.43043947, 0.48871716]])}}
    '''
    '''
    #Only 1 event, could ignore, but extremely close to tracks as calibrated.
    if ~numpy.isin('1772-71053',ignore_planes):
        known_planes['1772-71053'] = {  'eventids':numpy.array([[1772,71053]]),\
                        'dir':'S',\
                        'known_flight':'ab81b5',\
                        'signal_classification':'LF',\
                        'baselines':{'hpol':[[0,1],[0,2],[0,3],[1,2],[1,3],[2,3]],'vpol':[[1,2],[1,3],[2,3]]},\
                        'time_delays':{\
                            'hpol':numpy.array([[ 52.94192258, 117.64524125, 118.47416943,  65.09432253, 66.34553488,   0.64124633]]),\
                            'vpol':numpy.array([[  22.58438292, -276.42408851, -268.24428777,   57.22732488, 67.34650476,   10.51018374]])},\
                        'max_corrs':{\
                            'hpol':numpy.array([[0.6059348 , 0.6232186 , 0.71354217, 0.56044293, 0.53887173, 0.53529074]]),\
                            'vpol':numpy.array([[0.04067666, 0.05722032, 0.06773252, 0.58594276, 0.5188047 , 0.73712303]])}}
    '''

    if ~numpy.isin('1773-14413',ignore_planes):
        known_planes['1773-14413'] = {  'eventids':numpy.array([[1773,14413],[1773,14540],[1773,14590]]),\
                        'dir':'W',\
                        'known_flight':'aa8c39',\
                        'signal_classification':'BB',\
                        'baselines':{'hpol':[[0,1],[0,2],[0,3],[1,2],[1,3],[2,3]],'vpol':[[1,2],[1,3],[2,3]]},\
                        'time_delays':{\
                            'hpol':numpy.array([[ 91.08825911, 109.19955788, 144.42118554,  18.90894665,  53.00448319,    33.67325238],\
                                                 [108.0265463,   99.76854479, 150.20804266,  -8.05467951,  42.29097744,    50.34565695],\
                                                 [111.38917949,  97.04715793, 149.94216004, -14.2951011,   38.70938209,    52.69168011]]),\
                            'vpol':numpy.array([[ -14.06049879, -254.52787238,   40.21083691,   10.44762313, 55.74151021,   45.15312569],\
                                                   [-212.42457679,  -50.09541448, -132.1280242 ,  -13.68513508, 44.94980369,   59.1041434 ],\
                                                   [  12.76236597,  222.55939683,   77.87232866,  -21.06728795, 43.18246624,   63.23314416]])},\
                        'max_corrs':{\
                            'hpol':numpy.array([[0.90272377, 0.60064537, 0.87741312, 0.67375529, 0.89613162, 0.59279454],\
                                                [0.9031536,  0.88038772, 0.93706705, 0.88307895, 0.94245707, 0.896344  ],\
                                                [0.71921489, 0.74597444, 0.79102785, 0.7537876,  0.63843518, 0.79467544]]),\
                            'vpol':numpy.array([[0.10380397, 0.06419393, 0.0760841 , 0.43932523, 0.47531169, 0.19803388],\
                                                [0.06753853, 0.08494523, 0.06685715, 0.50694484, 0.47081591, 0.42630021],\
                                                [0.06910693, 0.09430286, 0.0840499 , 0.24675524, 0.27775983, 0.17633311]])}}

    if ~numpy.isin('1773-63659',ignore_planes):
        known_planes['1773-63659'] = {  'eventids':numpy.array([[1773,62999],[1773,63659],[1773,63707],[1773,63727],[1773,63752],[1773,63757]]),\
                        'dir':'W',\
                        'known_flight':'a28392',\
                        'signal_classification':'HF',\
                        'baselines':{'hpol':[[0,1],[0,2],[0,3],[1,2],[1,3],[2,3]],'vpol':[[1,2],[1,3],[2,3]]},\
                        'time_delays':{\
                            'hpol':numpy.array([ [-37.45816974,  17.53261306, -18.23642001,  54.85002141, 18.90894665, -34.87754427],\
                                                 [ 93.40300196,  12.60596443,  77.8566885,  -80.84395799, -15.5306733,    65.28200438],\
                                                 [ 94.54473323,  12.88748721,  79.01405993, -81.71980663, -15.59323392,    66.14221287],\
                                                 [ 95.07649848,  13.09080922,  79.54582518, -82.03260972, -15.54631345,    66.51757658],\
                                                 [ 95.8897865,   13.24721076,  80.07759042, -82.61129543, -15.85911654,    67.00242136],\
                                                 [ 95.82722589,  13.16900999,  80.09323058, -82.67385605, -15.71835515,    67.00242136]]),\
                            'vpol':numpy.array([[ 14.0917791 , 114.29824821, 260.50241135,  49.78261139, 22.42798138, -27.35463001],\
                                                [ 442.74149019,  355.8291523 ,  429.71324159,  -87.74126607,  -13.51309338,   74.16561207],\
                                                [  10.02533896,  596.48420774,  672.37023679,  -88.60147456,  -13.38797215,   75.08838118],\
                                                [ 297.75725908,  590.44710815,  284.30672632,  -88.85171703,  -13.38797215,   75.44810473],\
                                                [  12.96568798,   71.71010783, -156.35462334,  -89.2740012 ,  -12.82492659,   75.74526766],\
                                                [  -5.94325866,  198.31715754,  232.099891  ,  -89.33656182,  -13.30977138,   75.91730936]])},\
                        'max_corrs':{\
                            'hpol':numpy.array([ [0.79906143, 0.75620148, 0.68557483, 0.68992428, 0.73112767,  0.66364866],\
                                                 [0.95098351, 0.95833601, 0.94619827, 0.93922142, 0.93210956, 0.90940208],\
                                                 [0.92373364, 0.9104255,  0.94496063, 0.91447291, 0.93351235, 0.90544071],\
                                                 [0.95289233, 0.94974068, 0.93237005, 0.94604289, 0.92418265, 0.90493278],\
                                                 [0.83174037, 0.7827824,  0.88097779, 0.79032702, 0.86531262, 0.80427036],\
                                                 [0.87302171, 0.88326716, 0.8874286,  0.88267858, 0.91460527, 0.89029115]]),\
                            'vpol':numpy.array([[0.09318948, 0.06409845, 0.08831963, 0.47949827, 0.50572828,  0.50409728],\
                                                [0.06289992, 0.05902408, 0.06221534, 0.94319635, 0.89536839, 0.89388475],\
                                                [0.09225186, 0.08122064, 0.08065197, 0.86999957, 0.85958327, 0.84102569],\
                                                [0.06772418, 0.07353492, 0.08277247, 0.92582262, 0.89727331, 0.88631299],\
                                                [0.07894339, 0.06906414, 0.09807917, 0.45253002, 0.52531616, 0.30207441],\
                                                [0.06454302, 0.05635923, 0.07649677, 0.82547947, 0.82546989, 0.76452701]])}}

    if ~numpy.isin('1774-178',ignore_planes):
        known_planes['1774-178'] = {  'eventids':numpy.array([[1774,178],[1774,381],[1774,1348],[1774,1485]]),\
                        'dir':'E',\
                        'known_flight':'a1c2b3',\
                        'signal_classification':'BB',\
                        'baselines':{'hpol':[[0,1],[0,2],[0,3],[1,2],[1,3],[2,3]],'vpol':[[1,2],[1,3],[2,3]]},\
                        'time_delays':{\
                            'hpol':numpy.array([[-115.61202118,  -42.35353806, -119.02157483,   73.1959225 , -3.9413189 ,  -76.73059739],\
                                                [-112.36668914,  -26.19725859, -105.02363666,   86.05994948,    7.55419457,  -78.69343676],\
                                                [ -50.8774222 ,  103.05297721,   30.73290336,  153.80527817, 81.46956416,  -72.4764754 ],\
                                                [ -35.20598751,  122.25908679,   56.13251407,  157.37123337, 92.58971393,  -66.51757658]]),\
                            'vpol':numpy.array([[ -18.08001846, 1010.33833279,  116.19070689,   67.19010322, -1.18865173,  -68.5664368 ],\
                                                [-112.36668914,  -26.19725859, -105.02363666,   86.05994948,    7.55419457,  -72.11675185],\
                                                [ 218.61807792,  -68.06595186, -344.55260099,  149.22271294, 84.91039813,  -64.70331867],\
                                                [ -61.59092795,   36.00363538,  164.19034068,  153.30479323, 92.26127069,  -57.55576812]])},\
                        'max_corrs':{\
                            'hpol':numpy.array([[0.77470334, 0.80067311, 0.81435014, 0.73398618, 0.72465197,  0.8592991 ],\
                                                [0.93618182, 0.91795216, 0.92624708, 0.94539968, 0.93627973, 0.90362228],\
                                                [0.83302302, 0.78782138, 0.83980328, 0.79213547, 0.78805092,  0.72954879],\
                                                [0.72074622, 0.74032999, 0.61807304, 0.65139234, 0.49022699,  0.61575815]]),\
                            'vpol':numpy.array([[0.0753522 , 0.06178115, 0.10010959, 0.43601496, 0.37651565,  0.38387265],\
                                                [0.14081788, 0.09006753, 0.09994125, 0.72298839, 0.60235033, 0.45088415],\
                                                [0.06723202, 0.0789984 , 0.06892177, 0.58695738, 0.58971885,  0.66963238],\
                                                [0.05500526, 0.09650205, 0.08005356, 0.34545708, 0.50924905,  0.48500761]])}}

    if ~numpy.isin('1774-88800',ignore_planes):
        known_planes['1774-88800'] = {  'eventids':numpy.array([[1774,88800],[1774,88810],[1774,88815],[1774,88895],[1774,88913],[1774,88921],[1774,88925],[1774,88944],[1774,88955],[1774,88959],[1774,88988],[1774,88993],[1774,89029],[1774,89030],[1774,89032],[1774,89034],[1774,89041],[1774,89043],[1774,89052],[1774,89172],[1774,89175],[1774,89181],[1774,89203],[1774,89204],[1774,89213]]),\
                        'dir':'W',\
                        'known_flight':'ab5f43',\
                        'signal_classification':'PHF',\
                        'baselines':{'hpol':[[0,1],[0,2],[0,3],[1,2],[1,3],[2,3]],'vpol':[]},\
                        'time_delays':{\
                            'hpol':numpy.array([[-28.49636128,  17.06340843, -11.77703625,  45.54412955,  16.5942038, -28.99684622],\
                                                [-26.4318609,   15.78091577, -11.30783162,  41.99381451,  15.0145482, -26.932],\
                                                [-2.52432092e+01,  1.56401544e+01, -1.00253390e+01,  4.02421172e+01,  14.592, -2.55560123e+01],\
                                                [-6.56886484e-01,  1.36538548e+01,  6.64706561e+00,  1.42169003e+01,  7.67931580e+00, -6.95986870e+00],\
                                                [ 3.06547026e+00,  1.32002903e+01,  9.49357371e+00,  9.96277834e+00,  6.47502391e+00, -3.73799690e+00],\
                                                [ 5.78685712e+00,  1.33723320e+01,  1.13547521e+01,  7.05370963e+00,  5.78685712e+00, -1.73605714e+00],\
                                                [ 6.94422854e+00,  1.33879721e+01,  1.31377297e+01,  5.31765249e+00,  4.80152739e+00, -7.82007719e-02],\
                                                [ 1.51083891e+01,  1.26841652e+01,  1.89871474e+01, -3.34699304e+00,  2.89342856e+00,  6.92858839e+00],\
                                                [ 2.16459737e+01,  1.18865173e+01,  2.29441065e+01, -9.90021772e+00,  1.21993204e+00,  1.10575891e+01],\
                                                [ 2.21933791e+01,  1.23088015e+01,  2.32256293e+01, -9.99405865e+00,  1.11045096e+00,  1.09793884e+01],\
                                                [ 36.08183615,  11.21399069,  32.82868404, -25.07116747,  -2.94034902, 22.06825783],\
                                                [ 37.16100681,  11.05758915,  33.46993037, -26.21289874,  -3.23751196, 23.16306864],\
                                                [ 5.38959720e+01,  1.10575891e+01,  4.64043380e+01, -4.28383828e+01, -7.44471348e+00,  3.53467489e+01],\
                                                [ 5.31608847e+01,  1.09637482e+01,  4.60758948e+01, -4.26819813e+01, -7.35087256e+00,  3.51747072e+01],\
                                                [ 54.52157817,  10.86990729,  47.07686468, -44.16779597,  -7.72623626,   36.28515816],\
                                                [ 55.3348662,   10.82298683,  47.29582684, -44.66828091,  -7.96083858,   36.59796125],\
                                                [ 56.75812024,  10.88554745,  48.39063765, -45.76309172,  -8.14852043,   37.64585159],\
                                                [ 57.96241213,  10.99502853,  49.39160753, -47.10814499,  -8.50824398,   38.50606008],\
                                                [ 58.58801831,  10.85426714,  51.15894498, -48.60959981,  -8.78976676,   39.67907166],\
                                                [ 86.20853094,  10.51018374,  70.88117965, -75.01018041, -15.07710882,   59.9956322 ],\
                                                [ 85.48908384,  10.63530498,  71.39730474, -75.93294951, -15.34299145,   60.62123838],\
                                                [ 85.42652322,  10.74478606,  71.7883086,  -76.04243059, -15.28043083,   60.84020054],\
                                                [ 88.86735719,  11.574,  73.08644142, -77.41876418, -15.62451423,   61.68476887],\
                                                [ 88.36687225,  11.65191501,  73.55564605, -77.27800279, -15.42119222,   62.26345459],\
                                                [ 89.77448614,  11.93343779,  74.18125222, -77.88796881, -15.67143469,   61.65348857]]),\
                            'vpol':numpy.array([[-370.32757541,  620.86720842,  292.34576567,   38.83450333,   19.95683699,  -18.62742387],\
                                                [   0.        ,   35.87851415,   60.18331405,   36.25387785,   18.72126479,  -17.34493121],\
                                                [1219.462837  , -113.76648296,  -72.11675185,   34.53346087,   18.47102232,  -15.99987793],\
                                                [ -46.49817897,  -38.36529869, -280.5061688 ,   -5.48969419,   10.19738066,    2.23654208],\
                                                [ -17.93925707,  -31.84335432,  -52.09735424,  -13.4036123 ,   44.91852338,    2.11142084],\
                                                [   4.67640616,  327.8176358 ,  432.66923077,  -15.10838913,  -21.70853428,   10.57274436],\
                                                [ -36.66052187,    4.20720153,  604.80476987,  -14.13869956,    8.52388414,   22.13081845],\
                                                [ 1.40761389e-01,  3.56579880e+02, -2.08154815e+02, -1.52335104e+01,  3.97259921e+00,  1.90340679e+01],\
                                                [ 5.00015736e+01,  4.65138191e+01,  1.44202223e+02, -1.75169729e+01, -4.61697357e+01, -1.28249266e+00],\
                                                [-2.66586431e+02, -2.85511018e+02, -2.76517929e+02, -6.16222083e+00,  4.45744400e+00, -2.40858377e+00],\
                                                [ 1.42951011e+01,  3.94773137e+02,  3.28474522e+02, 2.69745743e+02,  1.35381176e+02, -1.85023026e+01],\
                                                [-6.06837990e+00, -2.19243684e+02,  2.56373411e+02, -4.71550655e+01, -4.37924323e-01, -4.33075875e+01],\
                                                [ 8.22202916e+01, -2.19306245e+02,  6.00566288e+02, -4.89849635e+01,  1.00253390e+01,  2.23341405e+01],\
                                                [ 1.04191580e+03,  8.04998746e+02,  6.44702804e+02, -4.89536832e+01, -4.80152739e+00,  4.38237126e+01],\
                                                [ 288.46700738,   82.76769698, -176.31146032,  -50.51769865,   -5.30201233,    45.04364461],\
                                                [ 484.37558114,  642.81034501,  204.29169651,  -50.68974035,    9.8063768,    45.65361063],\
                                                [ 352.13807586, 1051.0965751,  -344.36491914,  -52.75424072,   -5.53661465,    46.43561835],\
                                                [ 382.33921397,  344.34927898,  420.45427019,  -53.48932798,   -6.05273975,    47.24890638],\
                                                [   2.06450038,  640.55816278,  688.77675874,  -54.56849863,   -6.75654669,    48.24987626],\
                                                [   1.87681853,  -80.65627614,  396.52483399,  -80.39039351,  -12.27752119,    68.26927387],\
                                                [ -74.85377886, -182.39548038,  877.1780584,   -81.64160586,  -12.54340381,    69.09820205],\
                                                [  96.65615407, -404.20414979,  412.61855285,  -81.78236725,  -12.24624088,    69.44228545],\
                                                [ 654.52482064,  570.41207039,  832.93206165,  -83.90942825,  -12.87184705,    71.00630088],\
                                                [1035.7379435,   965.51365033, 1037.16119755,  -83.86250778,  -12.71544551,    71.17834258],\
                                                [ 614.81446867,  544.29301257,  544.9029786,   -84.92603828,  -13.04388875,    71.83522907]])},\
                        'max_corrs':{\
                            'hpol':numpy.array([[0.64059724, 0.77677675, 0.75236731, 0.76749577, 0.59979072, 0.64815502],\
                                                [0.62045939, 0.70644162, 0.63075541, 0.80233294, 0.71063221, 0.661  ],\
                                                [0.6726403 , 0.77406578, 0.79424238, 0.85345803, 0.768, 0.82948902],\
                                                [0.78873432, 0.8493454 , 0.8285548 , 0.83122342, 0.84323089, 0.8600067 ],\
                                                [0.84153738, 0.84077823, 0.88749982, 0.84966581, 0.84858517, 0.83303438],\
                                                [0.77161979, 0.77809199, 0.86298065, 0.80597524, 0.83063258, 0.77320236],\
                                                [0.63756443, 0.84007398, 0.86511378, 0.81531957, 0.66080911, 0.7957828 ],\
                                                [0.74811472, 0.76083647, 0.7468288 , 0.81857184, 0.83935535, 0.65600105],\
                                                [0.85156469, 0.81823081, 0.86343807, 0.86258245, 0.84924771, 0.84471723],\
                                                [0.81706908, 0.75767876, 0.86953568, 0.84000709, 0.87767818, 0.82014223],\
                                                [0.73175229, 0.77029831, 0.85653911, 0.85610337, 0.70158646, 0.74450727],\
                                                [0.76736686, 0.7699827,  0.78498619, 0.85000848, 0.69654943, 0.68416706],\
                                                [0.78847956, 0.8257755 , 0.66594422, 0.87503349, 0.84387349, 0.85493423],\
                                                [0.84624229, 0.84724204, 0.93289006, 0.93969099, 0.92829951, 0.89108326],\
                                                [0.85879361, 0.8511148 , 0.93432178, 0.93254486, 0.93313052, 0.89721675],\
                                                [0.84340874, 0.84170433, 0.92365669, 0.91877931, 0.91033016, 0.88505468],\
                                                [0.87844958, 0.86249058, 0.95011396, 0.92865062, 0.93632529, 0.8856151 ],\
                                                [0.9038838 , 0.88233514, 0.93607073, 0.95002208, 0.93720703, 0.90594311],\
                                                [0.8270224 , 0.87739643, 0.85520432, 0.93087253, 0.92047593, 0.89961645],\
                                                [0.54853226, 0.75981388, 0.6329627 , 0.66585003, 0.58271038, 0.65777595],\
                                                [0.6162375 , 0.89178027, 0.72180865, 0.82017094, 0.80124434, 0.78161604],\
                                                [0.54786448, 0.83198925, 0.72843138, 0.78335336, 0.72950841, 0.78732965],\
                                                [0.78751439, 0.843     , 0.73374321, 0.79957951, 0.62582142, 0.80829344],\
                                                [0.69112644, 0.84812847, 0.75834261, 0.78549372, 0.7385571 , 0.74197444],\
                                                [0.78201732, 0.88369476, 0.75535317, 0.82951779, 0.83410446, 0.73752075]]),\
                            'vpol':numpy.array([[0.09195445, 0.07515564, 0.07639771, 0.62868637, 0.68296663, 0.68418555],\
                                                [0.07507139, 0.06168901, 0.09490234, 0.79546801, 0.63611917, 0.62500897],\
                                                [0.07659796, 0.05946387, 0.08140472, 0.75432493, 0.63174937, 0.59081493],\
                                                [0.06232146, 0.07081852, 0.08302202, 0.15180844, 0.37989728, 0.23783292],\
                                                [0.102013  , 0.07851408, 0.09931923, 0.20611368, 0.24562063, 0.13994543],\
                                                [0.08199799, 0.05676422, 0.08551949, 0.15221236, 0.24075719, 0.15913865],\
                                                [0.05515905, 0.07398308, 0.08675301, 0.59165878, 0.62400296, 0.590796  ],\
                                                [0.07818258, 0.05442293, 0.08631925, 0.19321439, 0.19449608, 0.40349079],\
                                                [0.08497717, 0.06824892, 0.10771709, 0.12015399, 0.17862287, 0.22502987],\
                                                [0.1073537 , 0.06191909, 0.11381537, 0.2712538 , 0.19502656, 0.42513212],\
                                                [0.07641062, 0.07198609, 0.11753064, 0.07709421, 0.25403444, 0.12632135],\
                                                [0.07586185, 0.07300502, 0.12101883, 0.21995608, 0.27776301, 0.2785478 ],\
                                                [0.09672465, 0.08218999, 0.07177631, 0.34128779, 0.31072241, 0.27393056],\
                                                [0.04661366, 0.05603728, 0.07052959, 0.73419146, 0.68739327, 0.71882318],\
                                                [0.06374236, 0.06665853, 0.09883411, 0.7067953 , 0.64468391, 0.73509211],\
                                                [0.05717604, 0.06735745, 0.08034756, 0.42368594, 0.40780072, 0.31449616],\
                                                [0.06886223, 0.07458845, 0.08641286, 0.74389539, 0.78604399, 0.78936861],\
                                                [0.06727275, 0.0591851 , 0.07705009, 0.73627352, 0.71987617, 0.76038748],\
                                                [0.06342815, 0.06639673, 0.06819119, 0.76919342, 0.70656756, 0.78952973],\
                                                [0.09327135, 0.06787646, 0.08285837, 0.32722777, 0.41452416, 0.35887881],\
                                                [0.06860293, 0.08340955, 0.08617786, 0.76052345, 0.82473454, 0.73281971],\
                                                [0.07858032, 0.06649049, 0.08155051, 0.75495761, 0.75391884, 0.72652801],\
                                                [0.06814221, 0.05833277, 0.07026216, 0.92986665, 0.91561262, 0.90739401],\
                                                [0.09521795, 0.10702754, 0.12377197, 0.90834791, 0.89390763, 0.89032708],\
                                                [0.07720588, 0.06618241, 0.06720744, 0.94268425, 0.93906486, 0.92917063]])}}

    if ~numpy.isin('1783-28830',ignore_planes):
        known_planes['1783-28830'] = {  'eventids':numpy.array([[1783,28830],[1783,28832],[1783,28842],[1783,28843],[1783,28861],[1783,28886]]),\
                        'dir':'W',\
                        'known_flight':'a52e4f',\
                        'signal_classification':'LF',\
                        'baselines':{'hpol':[[0,1],[0,2],[0,3],[1,2],[1,3],[2,3]],'vpol':[[1,2],[1,3],[2,3]]},\
                        'time_delays':{\
                            'hpol':numpy.array([[  65.37584531,  -44.19907628,   17.53261306, -109.54364128,  -47.90579287,     61.62220826],\
                                                 [  66.48629627,  -42.96350408,   19.61275359, -109.4654405,   -47.38966777,     62.07577273],\
                                                 [  75.05710087,  -31.03006629,   33.67325238, -106.38433009,-41.14924617,   65.344565  ],\
                                                 [  75.63578658,  -29.76321378,   35.19034735, -105.63360268,-40.58620062,   65.31328469],\
                                                 [  87.78818653,  -11.38603239,   57.28988549,  -98.59553321,  -30.87366475,     67.87827001],\
                                                 [ 98.65809383,  13.66949493,  82.00132941, -86.9436182 ,-16.70368488,  69.70816807]]),\
                            'vpol':numpy.array([[ 951.54699247, -386.21797226, -224.26417365, -115.95610457,  -46.38869789,     69.75508853],\
                                                 [ 675.0759835,   562.57635304,  632.5973242,  -115.22101732,  -45.16876585,     70.13045224],\
                                                 [ 707.34162198,  575.32307886,  668.92940283, -111.96786521,-38.59990101,   72.53903601],\
                                                 [-154.0711608 , -266.35182909, -172.3075808 , -111.7645432 ,-38.42785931,   72.82055879],\
                                                 [1327.34862191, -206.32491658, 1297.6636089,  -104.44495095,  -28.7622439,     75.76090782],\
                                                 [768.71358777, 676.59307847, 753.07343339, -93.07455871,-15.15530959,  77.88796881]])},\
                        'max_corrs':{\
                            'hpol':numpy.array([[0.77510182, 0.76120413, 0.69953395, 0.85153975, 0.85410922, 0.8273125 ],\
                                                 [0.81609656, 0.83873214, 0.82409572, 0.85631712, 0.85515108, 0.86051845],\
                                                 [0.79317338, 0.7021032 , 0.75819653, 0.75594331, 0.90196112,  0.79827819],\
                                                 [0.81461075, 0.70995574, 0.7421784 , 0.79123073, 0.89169437,  0.84726351],\
                                                 [0.61147331, 0.518565,   0.68108793, 0.70349108, 0.80336612, 0.74497518],\
                                                 [0.37849395, 0.37336819, 0.58865502, 0.45827797, 0.66429776,  0.6156677 ]]),\
                            'vpol':numpy.array([[0.083143,   0.06820834, 0.08130717, 0.66499273, 0.77803667, 0.67031213],\
                                                 [0.08099163, 0.07719255, 0.08242499, 0.7171041,  0.84142522, 0.74202524],\
                                                 [0.08493632, 0.09063443, 0.10260527, 0.71636322, 0.77038414,  0.75479332],\
                                                 [0.06897787, 0.07526369, 0.08112675, 0.78794996, 0.83015625,  0.79313696],\
                                                 [0.06336892, 0.06530053, 0.07794064, 0.82957209, 0.88256237, 0.83269091],\
                                                 [0.06945627, 0.07351497, 0.07898279, 0.82936498, 0.91205648,  0.81912711]])}}

    if ~numpy.isin('1784-7166',ignore_planes):
        known_planes['1784-7166'] = {   'eventids':numpy.array([[1784,7166],[1784,7176],[1784,7179],[1784,7195],[1784,7203],[1784,7244],[1784,7255]]),\
                        'dir':'W',\
                        'known_flight':'acf975',\
                        'signal_classification':'HF',\
                        'baselines':{'hpol':[[0,1],[0,2],[0,3],[1,2],[1,3],[2,3]],'vpol':[[1,2],[1,3],[2,3]]},\
                        'time_delays':{\
                            'hpol':numpy.array([[  70.09917193,  -39.67907166,   24.4768416,  -109.73132313,  -45.71617125,     63.98387157],\
                                                 [  77.8566885,   -28.52764159,   38.05249561, -105.94640577,  -40.19519676,     66.22041364],\
                                                 [  78.85765838,  -26.51006167,   40.30467784, -104.94543589,  -38.85014348,     66.37681519],\
                                                 [  88.53891394,   -9.2902517,    58.69749939,  -97.92300657,  -29.95089564,     68.03467155],\
                                                 [ 93.49684288,  -0.18768185,  67.54982677, -93.65324443, -25.32140994,  68.30055418],\
                                                 [ 110.1536073,    39.19422688,  108.76163356,  -70.58401672,   -1.20429189,     69.2858839 ],\
                                                 [113.31291848,  47.8588724,  116.84759337, -63.68670863,   4.19156137,   68.53515649]]),\
                            'vpol':numpy.array([[-2.50430152e+02, -3.53842853e+02,  2.32803698e+02, -1.15768423e+02,  -4.45431597e+01,  7.14442252e+01],\
                                                 [ 8.00775904e+00, -1.04069587e+02,  1.22948818e+03, -1.12092986e+02,  -3.78960941e+01,  7.41186916e+01],\
                                                 [ 4.22190327e+02,  3.10754227e+02,  3.99340062e+02, -1.11092017e+02,  -3.67387226e+01,  7.42594530e+01],\
                                                 [ 8.87875924e+02,  7.83728136e+02,  9.45103249e+02, -1.03991386e+02,  -2.78394748e+01,  7.62301124e+01],\
                                                 [ 343.56727126, 1174.41919239,  537.41134465,  -99.90930618,  -22.58438292,   77.37184372],\
                                                 [ 8.00775904e+00, -4.42522528e+02,  1.03777116e+03, -7.62457526e+01,   1.17301158e+00,  7.75438854e+01],\
                                                 [-19.72223467, -38.05249561, 436.48542843, -70.23993332, 7.55419457,  78.35717344]])},\
                        'max_corrs':{\
                            'hpol':numpy.array([[0.82452304, 0.84237292, 0.86070192, 0.88783822, 0.89508353, 0.84408384],\
                                                 [0.69477446, 0.64290981, 0.70018481, 0.74739501, 0.89817133, 0.73033073],\
                                                 [0.67095742, 0.54535095, 0.70012358, 0.74522961, 0.82753476, 0.73537265],\
                                                 [0.71017735, 0.62077517, 0.68634733, 0.86860821, 0.88005062, 0.87374545],\
                                                 [0.5049515 , 0.42942912, 0.5382682 , 0.74989802, 0.84421557, 0.66331599],\
                                                 [0.65076326, 0.74020585, 0.66372195, 0.80522205, 0.87859943, 0.81493234],\
                                                 [0.39197714, 0.08332387, 0.39682659, 0.58704473, 0.74093629,0.58922157]]),\
                            'vpol':numpy.array([[0.07563383, 0.08511365, 0.09201061, 0.74565473, 0.81545159, 0.72463237],\
                                                 [0.08151722, 0.0958623,  0.08309501, 0.89035292, 0.93663151, 0.8665272 ],\
                                                 [0.06950143, 0.08449305, 0.06821813, 0.85802633, 0.91646282, 0.84926463],\
                                                 [0.09422863, 0.09829601, 0.08132951, 0.78374033, 0.84211843, 0.78580355],\
                                                 [0.07260065, 0.07050859, 0.07768207, 0.88681028, 0.9500332 , 0.86423731],\
                                                 [0.06832285, 0.06841074, 0.06360799, 0.75114916, 0.87657423, 0.74458405],\
                                                 [0.07721145, 0.0884296 , 0.05952351, 0.53772421, 0.81185286, 0.55579139]])}}
    return known_planes

def pulserRuns():
    '''
    Returns
    -------
    pulser_runs : numpy.ndarray of ints
        This is the list of known pulser runs as determined by the matching_times.py script.
    '''
    pulser_runs = numpy.array([734,735,736,737,739,740,746,747,757,757,762,763,764,766,767,768,769,770,781,782,783,784,785,786,787,788,789,790,792,793,1504,1506,1507,1508,1509,15011]) 
    
    return pulser_runs

def loadAntennaZeroLocation(deploy_index=default_deploy):
    '''
    Loads antenna 0's location (which use used as the station location).
    Loads both the latitude, longtidue, elevation
    '''
    if deploy_index == 0:
        A0Location = (37.5893,-118.2381,3894.12)#latitude,longtidue,elevation  #ELEVATION GIVEN FROM GOOGLE EARTH given in m
    elif deploy_index > 0 and deploy_index <= 9:
        A0Location = (37.589310, -118.237621, 3875.53)#latitude,longtidue,elevation #ELEVATION FROM GOOGLE EARTH given in m  
    elif deploy_index > 9 and deploy_index <= 11:
        #For these deploy indices I am attempting to be more sure of which elevation metric is being used, and ensuring it is properly handled.
        #These coordinates are coming from a picture taken near the base of antenna 0 on a OnePlus 6T, which uses MSL elevation.
        #The offset between MSL and WGS84 onsite according to pulsing data averages to MSL = WGS84 + 26.356m, so I am subtracting the offset such that datum is WGS84
        A0Location = (37.0 + 35.0/60.0 + 21.6528/3600, -(118. + 14.0/60.0 + 15.4715/3600.0),   3850.333 - 26.356) #6ft below antennas, ~3ft to the side (north east ish)
        # A1Location = (37.5892, -118.2380,                                                    3862.776 - 26.356) #No good photos for elevation.  Could be off on this one, this is from a picture taken at approximately the same height?  GPS come from pictures and google maps.  Likely too high.
        # A2Location = (37.0 + 35.0/60.0 + 19.9643/3600, -(118. + 14.0/60.0 + 15.9971/3600.0), 3857.583 - 26.356) #6ft below antennas, ~3ft to the side (north east ish)
        # A3Location = (37.0 + 35.0/60.0 + 20.1155/3600, -(118. + 14.0/60.0 + 16.7496/3600.0), 3859.079 - 26.356) #Slightly downhill south, closer to antenna

    elif deploy_index == 12:
        A0Location = (37.0 + 35.0/60.0 + 21.6528/3600, -(118. + 14.0/60.0 + 15.4715/3600.0),   3850.333) #Interpreting this as WGS84
    elif deploy_index >= 13 and deploy_index <= 22:
        #These positions from from photo_gps.py, which was used to make a plane model of the hillside based on GPS coordinates of
        #cell phone pictures.  The GPS coordinates are then input in this plane to calculate the altitudes.  
        # ENU calculated below relative to deploy_index == 1
        # Antenna 0
        # (E, N, U)       : (0.000000,0.000000,-22.687778)
        # (lat, lon, alt) : (37.589310,-118.237621,3852.842222)
        # Antenna 1
        # (E, N, U)       : (-33.493731,-12.216161,-2.989690)
        # (lat, lon, alt) : (37.589200,-118.238000,3872.540409)
        # Antenna 2
        # (E, N, U)       : (-8.660669,-44.533633,-26.183296)
        # (lat, lon, alt) : (37.588909,-118.237719,3849.346866)
        # Antenna 3
        # (E, N, U)       : (-32.168224,-43.200941,-10.301701)
        # (lat, lon, alt) : (37.588921,-118.237985,3865.228526)
        A0Location = (37.589310,-118.237621,3852.842222) #WGS84
    elif deploy_index >= 23:
        A0Location = (37.589310, -118.237621, 3852.842222)#latitude,longtidue,elevation 
    return A0Location

def loadValleySourcesENU(deploy_index=default_deploy):
    '''
    This returns a list of potential RFI sources in the valley.  These were identified using run 1650 as potential sources
    for the clusters of background events visible in that run.  Some clusters identified had ambigious origin and thus
    are beholden to multiple entries in the below dictionary.  These all use Google Earth elevations ( WGS84 ).
    '''
    if False:
        #ONLY WORKS FOR HPOL WITH MAP KEY 
        '''
        map_direction_dset_key = 'LPf_100.0-LPo_8-HPf_None-HPo_None-Phase_1-Hilb_0-upsample_32768-maxmethod_0-sinesubtract_1-deploy_calibration_22-scope_belowhorizon' # 'LPf_100.0-LPo_8-HPf_None-HPo_None-Phase_1-Hilb_0-upsample_32768-maxmethod_0-sinesubtract_1-deploy_calibration_22-scope_allsky'
        ds.addROI('-19',{'phi_best_h':[-21,-18],'elevation_best_h':[-0.5,0.5]})
        ds.addROI('-10h',{'phi_best_h':[-11,-9],'elevation_best_h':[-1,0.5]})
        ds.addROI('-10l',{'phi_best_h':[-11,-9],'elevation_best_h':[-6,-4]})
        ds.addROI('-2',{'phi_best_h':[-3,-1],'elevation_best_h':[-3.5,-1.5]})
        ds.addROI('8',{'phi_best_h':[7,9],'elevation_best_h':[-2,0]})
        ds.addROI('19',{'phi_best_h':[18,20],'elevation_best_h':[-3,-1.5]})
        ds.addROI('28h',{'phi_best_h':[27,29],'elevation_best_h':[-3,-1.5]})
        ds.addROI('28l',{'phi_best_h':[27,29],'elevation_best_h':[-4,-3]})
        ds.addROI('32',{'phi_best_h':[31,33],'elevation_best_h':[-2,0]})
        '''


        # 'Base Tower'                     :(37.310649, -116.804392, 5872 * 0.3048) #This or palmetto?
        # 'Cross Road Site'                :(37.500680, -117.185470, 4700 * 0.3048) #This or palmetto?
        # 'Complex Tower'                   :(37.711458, -116.447481, 5703 * 0.3048) #This or palmetto?

        source_dict = { 'Tokop'                     :(37.300047, -117.261011, 7097 * 0.3048),\
                        'Palmetto Cell Tower'       :(37.462089, -117.573584, 5943 * 0.3048),\
                        'East Dyer Substation'      :(37.494710, -117.860383, 5144 * 0.3048),\
                        'Cross Road Site'           :(37.500680, -117.185470, 4700 * 0.3048),\
                        'Jack Rabbit Knob'          :(37.685060, -116.543169, 6058 * 0.3048),\
                        'Tonopah Vortac'            :(38.030653, -117.033528, 5350 * 0.3048),\
                        'Tonopah Airport Antenna'   :(38.063273, -117.096715, 5426 * 0.3048),\
                        'Tonopah KTPH'              :(38.051701, -117.226212, 7104 * 0.3048),\
                        'Dyer Cell Tower'           :(37.665613, -118.065012, 4879 * 0.3048),\
                        'Tonopah AFS GATR Site'     :(38.1435,   -117.199212, 7140 * 0.3048)}


        # 'Tonopah KTPH'              :{'time_delay_0subtract1_h':[-135,-131],'time_delay_0subtract2_h':[-111,-105]},\
        # 'Dyer Cell Tower'           :{'time_delay_0subtract1_h':[-135,-131],'time_delay_0subtract2_h':[-111,-105]},\
        #Below are the cuts that were used in the data slicer class to isolate the above clusters.
        data_slicer_cut_dict = {    'Tokop'                 :   {'phi_best_h':[-21,-18],'elevation_best_h':[-0.5,0.5]},\
                                    'Palmetto Cell Tower'   :   {'phi_best_h':[-11,-9],'elevation_best_h':[-1,0.5]},\
                                    'East Dyer Substation'   :   {'phi_best_h':[-11,-9],'elevation_best_h':[-1,0.5]},\
                                    'Cross Road Site'       :   {'phi_best_h':[-3,-1],'elevation_best_h':[-3.5,-1.5]},\
                                    'Jack Rabbit Knob'      :   {'phi_best_h':[7,9],'elevation_best_h':[-2,0]},\
                                    'Tonopah Vortac'        :   {'phi_best_h':[18,20],'elevation_best_h':[-3,-1.5]},\
                                    'Tonopah Airport Antenna':   {'phi_best_h':[18,20],'elevation_best_h':[-3,-1.5]},\
                                    'Tonopah KTPH'          :   {'phi_best_h':[27,29],'elevation_best_h':[-3,-1.5]},\
                                    'Dyer Cell Tower'       :   {'phi_best_h':[27,29],'elevation_best_h':[-3,-1.5]},\
                                    'Tonopah AFS GATR Site' :   {'phi_best_h':[31,33],'elevation_best_h':[-2,0]}}

    elif False:
        source_dict = {}
        source_dict['A'] = (37.759052, -118.097173, 4920 * 0.3048) # North Dyer Substation
        source_dict['B'] = (38.238904, -117.363661, 4922 * 0.3048) # Solar
        source_dict['C'] = (38.094374, -117.186576, 6856 * 0.3048) # Booker
        source_dict['D'] = (37.754281, -117.632355, 4274 * 0.3048) # Silver Peak
        source_dict['E'] = (37.462089, -117.573584, 5943 * 0.3048) # Palmetto

        data_slicer_cut_dict = {}
        data_slicer_cut_dict['A'] = {'time_delay_0subtract1_h':[-127,-123],'time_delay_0subtract2_h':[-127,-123.5]} # North Dyer Substation
        data_slicer_cut_dict['B'] = {'time_delay_0subtract1_h':[-135,-131],'time_delay_0subtract2_h':[-111,-105]} # Solar
        data_slicer_cut_dict['C'] = {'time_delay_0subtract1_h':[-140.5,-137],'time_delay_0subtract2_h':[-90,-83.5],'time_delay_0subtract3_h':[-167,-161],'time_delay_1subtract2_h':[46,55]} # Booker
        data_slicer_cut_dict['D'] = {'time_delay_0subtract1_h':[-143,-140],'time_delay_0subtract2_h':[-60.1,-57.4]}  # Silver Peak
        data_slicer_cut_dict['E'] = {'time_delay_0subtract1_h':[-124.5,-121],'time_delay_0subtract2_h':[22.5,28.5]} # Palmetto
        

    else:
        source_dict = { 'Northern Cell Tower'       :(38.017045, -117.773122, 5525 * 0.3048),\
                        'Solar Plant'               :(38.238904, -117.363661, 4922 * 0.3048),\
                        'Quarry Substation'         :(38.323974, -117.335893, 5365 * 0.3048),\
                        'Tonopah KTPH'              :(38.051701, -117.226212, 7104 * 0.3048),\
                        'Booker Antenna'            :(38.094374, -117.186576, 6856 * 0.3048),\
                        'Nye County Sherriff'       :(38.084554, -117.251408, 5866 * 0.3048),\
                        'Tonopah AFS GATR Site'     :(38.1435,   -117.199212, 7140 * 0.3048),\
                        'KNKN223'                   :(38.017091, -117.773029, 4887 * 0.3048),\
                        'Dyer House Antenna A'      :(37.740821, -118.076144, 4855 * 0.3048),\
                        'Miller Substation'         :(38.131173, -117.459208, 4853 * 0.3048),\
                        'Tonopah Vortac'            :(38.030653, -117.033528, 5350 * 0.3048),\
                        'Tonopah Airport Antenna'   :(38.063273, -117.096715, 5426 * 0.3048),\
                        'Dyer Cell Tower'           :(37.665613, -118.065012, 4879 * 0.3048),\
                        'West Dyer Substation'      :(37.599110, -118.000846, 4942 * 0.3048),\
                        'East Dyer Substation'      :(37.494710, -117.860383, 5144 * 0.3048),\
                        'Beatty Mountain Cell Tower':(36.935220, -116.850985, 5782 * 0.3048),\
                        'Beatty Airport Vortac'     :(36.800590, -116.747633, 3928 * 0.3048),\
                        'Beatty Substation'         :(36.902775, -116.767806, 3378 * 0.3048),\
                        'Oasis'                     :(37.486695, -117.914865, 5057 * 0.3048),\
                        'Tokop'                     :(37.300047, -117.261011, 7097 * 0.3048),\
                        'Beatty Airport Antenna'    :(36.868032, -116.784008, 3166 * 0.3048),\
                        'Palmetto Cell Tower'       :(37.462089, -117.573584, 5943 * 0.3048),\
                        'South Dyer Town'           :(37.579375, -117.973822, 4928 * 0.3048),\
                        'Black Mountain'            :(37.283284, -116.646110, 7232 * 0.3048),\
                        'Cedar Peak'                :(37.706014, -116.335117, 8419 * 0.3048),\
                        'Test Site A'               :(37.886176, -116.779117, 5362 * 0.3048),\
                        'Concrete Substation'       :(37.709394, -117.720283, 5339 * 0.3048),\
                        'Dome Thing'                :(37.753476, -116.538488, 5666 * 0.3048),\
                        'Jack Rabbit Knob'          :(37.685060, -116.543169, 6058 * 0.3048),\
                        'Goldfield Hill Tower'      :(37.726953, -117.225670, 6092 * 0.3048),\
                        'Goldield Town Tower'       :(37.710925, -117.233411, 5670 * 0.3048),\
                        'Goldfield KGFN-FM'         :(37.708384, -117.235265, 5696 * 0.3048),\
                        'Silver Peak Town Antenna'  :(37.752345, -117.630208, 4296 * 0.3048),\
                        'Silver Peak Lithium Mine'  :(37.766835, -117.591208, 4272 * 0.3048),\
                        'Past SP Substation'        :(37.824025, -117.337428, 5034 * 0.3048),\
                        'Silver Peak Substation'    :(37.754281, -117.632355, 4274 * 0.3048),\
                        'A'                         :(37.759052, -118.097173, 4920 * 0.3048),\
                        'B'                         :(38.238904, -117.363661, 4922 * 0.3048),\
                        'C'                         :(38.094374, -117.186576, 6856 * 0.3048),\
                        'D'                         :(37.754281, -117.632355, 4274 * 0.3048),\
                        'E'                         :(37.529279, -117.905027, 5009 * 0.3048)}


        # 'Tonopah KTPH'              :{'time_delay_0subtract1_h':[-135,-131],'time_delay_0subtract2_h':[-111,-105]},\
        # 'Dyer Cell Tower'           :{'time_delay_0subtract1_h':[-135,-131],'time_delay_0subtract2_h':[-111,-105]},\
        #Below are the cuts that were used in the data slicer class to isolate the above clusters.
        #AFS GATR AND MILLER SWAPPED MID DAY ON 4/29/2021
        #Same day Wester Dyer Substation events swapped to be the palmetto ones.
        #old: 'West Dyer Substation'      :{'time_delay_0subtract1_h':[-143,-140],'time_delay_0subtract2_h':[-60.1,-57.4]},\
        #new: 'West Dyer Substation'      :{'time_delay_0subtract1_h':[-138,-131.7],'time_delay_0subtract2_h':[-7,-1]},\
        data_slicer_cut_dict = {    'Northern Cell Tower'       :{'time_delay_0subtract1_h':[-127,-123],'time_delay_0subtract2_h':[-127,-123.5]},\
                                    'Solar Plant'               :{'time_delay_0subtract1_h':[-127,-123],'time_delay_0subtract2_h':[-127,-123.5]},\
                                    'Quarry Substation'         :{'time_delay_0subtract1_h':[-127,-123],'time_delay_0subtract2_h':[-127,-123.5]},\
                                    'Tonopah KTPH'              :{'time_delay_0subtract1_h':[-140.5,-137],'time_delay_0subtract2_h':[-90,-83.5],'time_delay_0subtract3_h':[-167,-161],'time_delay_1subtract2_h':[46,55]},\
                                    'Booker Antenna'            :{'time_delay_0subtract1_h':[-140.5,-137],'time_delay_0subtract2_h':[-90,-83.5],'time_delay_0subtract3_h':[-167,-161],'time_delay_1subtract2_h':[46,55]},\
                                    'Nye County Sherriff'       :{'time_delay_0subtract1_h':[-135,-131],'time_delay_0subtract2_h':[-111,-105]},\
                                    'Tonopah AFS GATR Site'     :{'time_delay_0subtract1_h':[-135,-131],'time_delay_0subtract2_h':[-111,-105]},\
                                    'KNKN223'                   :{'time_delay_0subtract1_h':[-127,-123],'time_delay_0subtract2_h':[-127,-123.5]},\
                                    'Dyer House Antenna A'      :{'time_delay_0subtract1_h':[-127,-123],'time_delay_0subtract2_h':[-127,-123.5]},\
                                    'Miller Substation'         :{'time_delay_0subtract1_h':[-127,-123],'time_delay_0subtract2_h':[-127,-123.5]},\
                                    'Tonopah Vortac'            :{'time_delay_0subtract1_h':[-135,-131],'time_delay_0subtract2_h':[-111,-105]},\
                                    'Tonopah Airport Antenna'   :{'time_delay_0subtract1_h':[-135,-131],'time_delay_0subtract2_h':[-111,-105]},\
                                    'Dyer Cell Tower'           :{'time_delay_0subtract1_h':[-140.5,-137],'time_delay_0subtract2_h':[-90,-83.5],'time_delay_0subtract3_h':[-167,-161],'time_delay_1subtract2_h':[46,55]},\
                                    'West Dyer Substation'      :{'time_delay_0subtract1_h':[-138,-131.7],'time_delay_0subtract2_h':[-7,-1]},\
                                    'East Dyer Substation'      :{'time_delay_0subtract1_h':[-138,-131.7],'time_delay_0subtract2_h':[-7,-1]},\
                                    'Beatty Mountain Cell Tower':{'time_delay_0subtract1_h':[-124.5,-121],'time_delay_0subtract2_h':[22.5,28.5]},\
                                    'Beatty Airport Vortac'     :{'time_delay_0subtract1_h':[-124.5,-121],'time_delay_0subtract2_h':[22.5,28.5]},\
                                    'Beatty Substation'         :{'time_delay_0subtract1_h':[-124.5,-121],'time_delay_0subtract2_h':[22.5,28.5]},\
                                    'Oasis'                     :{'time_delay_0subtract1_h':[-124.5,-121],'time_delay_0subtract2_h':[22.5,28.5]},\
                                    'Tokop'                     :{'time_delay_0subtract1_h':[-124.5,-121],'time_delay_0subtract2_h':[22.5,28.5]},\
                                    'Beatty Airport Antenna'    :{'time_delay_0subtract1_h':[-124.5,-121],'time_delay_0subtract2_h':[22.5,28.5]},\
                                    'Palmetto Cell Tower'       :{'time_delay_0subtract1_h':[-138,-131.7],'time_delay_0subtract2_h':[-7,-1]},\
                                    'South Dyer Town'           :{'time_delay_0subtract1_h':[-138,-131.7],'time_delay_0subtract2_h':[-7,-1]},\
                                    'Black Mountain'            :{'time_delay_0subtract1_h':[-138,-131.7],'time_delay_0subtract2_h':[-7,-1]},\
                                    'Cedar Peak'                :{'time_delay_0subtract1_h':[-143,-140],'time_delay_0subtract2_h':[-60.1,-57.4]},\
                                    'Test Site A'               :{'time_delay_0subtract1_h':[-143,-140],'time_delay_0subtract2_h':[-60.1,-57.4]},\
                                    'Concrete Substation'       :{'time_delay_0subtract1_h':[-143,-140],'time_delay_0subtract2_h':[-60.1,-57.4]},\
                                    'Dome Thing'                :{'time_delay_0subtract1_h':[-143,-140],'time_delay_0subtract2_h':[-60.1,-57.4]},\
                                    'Jack Rabbit Knob'          :{'time_delay_0subtract1_h':[-143,-140],'time_delay_0subtract2_h':[-60.1,-57.4]},\
                                    'Goldfield Hill Tower'      :{'time_delay_0subtract1_h':[-143,-140],'time_delay_0subtract2_h':[-60.1,-57.4]},\
                                    'Goldield Town Tower'       :{'time_delay_0subtract1_h':[-143,-140],'time_delay_0subtract2_h':[-60.1,-57.4]},\
                                    'Goldfield KGFN-FM'         :{'time_delay_0subtract1_h':[-143,-140],'time_delay_0subtract2_h':[-60.1,-57.4]},\
                                    'Silver Peak Town Antenna'  :{'time_delay_0subtract1_h':[-140.5,-137],'time_delay_0subtract2_h':[-90,-83.5],'time_delay_0subtract3_h':[-167,-161],'time_delay_1subtract2_h':[46,55]},\
                                    'Silver Peak Lithium Mine'  :{'time_delay_0subtract1_h':[-140.5,-137],'time_delay_0subtract2_h':[-90,-83.5],'time_delay_0subtract3_h':[-167,-161],'time_delay_1subtract2_h':[46,55]},\
                                    'Past SP Substation'        :{'time_delay_0subtract1_h':[-140.5,-137],'time_delay_0subtract2_h':[-90,-83.5],'time_delay_0subtract3_h':[-167,-161],'time_delay_1subtract2_h':[46,55]},\
                                    'Silver Peak Substation'    :{'time_delay_0subtract1_h':[-140.5,-137],'time_delay_0subtract2_h':[-90,-83.5],'time_delay_0subtract3_h':[-167,-161],'time_delay_1subtract2_h':[46,55]},\
                                    'A'                         :{'time_delay_0subtract1_h':[-127,-123],'time_delay_0subtract2_h':[-127,-123.5]},\
                                    'B'                         :{'time_delay_0subtract1_h':[-135,-131],'time_delay_0subtract2_h':[-111,-105]},\
                                    'C'                         :{'time_delay_0subtract1_h':[-140.5,-137],'time_delay_0subtract2_h':[-90,-83.5],'time_delay_0subtract3_h':[-167,-161],'time_delay_1subtract2_h':[46,55]},\
                                    'D'                         :{'time_delay_0subtract1_h':[-143,-140],'time_delay_0subtract2_h':[-60.1,-57.4]},\
                                    'E'                         :{'time_delay_0subtract1_h':[-124.5,-121],'time_delay_0subtract2_h':[22.5,28.5]}}
    #Note the above ROI assumes you have already cut out events that are below a certain correlation with a template.
    # impulsivity_dset_key = 'LPf_100.0-LPo_8-HPf_None-HPo_None-Phase_1-Hilb_0-corlen_65536-align_0-shortensignals-0-shortenthresh-0.70-shortendelay-10.00-shortenlength-90.00-sinesubtract_1'
    # time_delays_dset_key = 'LPf_100.0-LPo_8-HPf_None-HPo_None-Phase_1-Hilb_0-corlen_65536-align_0-shortensignals-0-shortenthresh-0.70-shortendelay-10.00-shortenlength-90.00-sinesubtract_1'
    # map_direction_dset_key = 'LPf_70.0-LPo_4-HPf_None-HPo_None-Phase_1-Hilb_1-upsample_32768-maxmethod_0'#'LPf_100.0-LPo_8-HPf_None-HPo_None-Phase_1-Hilb_1-upsample_32768-maxmethod_0-sinesubtract_1'
    # ds = dataSlicerSingleRun(reader, impulsivity_dset_key, time_delays_dset_key, map_direction_dset_key,\
    #                 curve_choice=0, trigger_types=trigger_types,included_antennas=[0,1,2,3,4,5,6,7],include_test_roi=False,\
    #                 cr_template_n_bins_h=200,cr_template_n_bins_v=200,\
    #                 impulsivity_n_bins_h=200,impulsivity_n_bins_v=200,\
    #                 time_delays_n_bins_h=150,time_delays_n_bins_v=150,min_time_delays_val=-200,max_time_delays_val=200,\
    #                 std_n_bins_h=200,std_n_bins_v=200,max_std_val=9,\
    #                 p2p_n_bins_h=128,p2p_n_bins_v=128,max_p2p_val=128,\
    #                 snr_n_bins_h=200,snr_n_bins_v=200,max_snr_val=35)
    # ds.addROI('Simple Template V > 0.7',{'cr_template_search_v':[0.7,1.0]})# Adding 2 ROI in different rows and appending as below allows for "OR" instead of "AND"
    # ds.addROI('Simple Template H > 0.7',{'cr_template_search_h':[0.7,1.0]})
    # #Done for OR condition
    # _eventids = numpy.sort(numpy.unique(numpy.append(ds.getCutsFromROI('Simple Template H > 0.7',load=False,save=False),ds.getCutsFromROI('Simple Template V > 0.7',load=False,save=False))))
    # roi_eventids = numpy.intersect1d(ds.getCutsFromROI(roi_key),_eventids)
    source_ENU = {}

    origin = loadAntennaZeroLocation(deploy_index = deploy_index)
    
    for key, location in source_dict.items():
        source_ENU[key] = numpy.array(pm.geodetic2enu(location[0],location[1],location[2],origin[0],origin[1],origin[2]))

    return source_ENU, data_slicer_cut_dict

# def loadUniqueSourceDir():
#     source_ENU, data_slicer_cut_dict = loadValleySourcesENU()

#     [val for key, val in data_slicer_cut_dict.items()]
#     s = list( set([str(val) for key, val in data_slicer_cut_dict.items()]) )


def loadAntennaLocationsENU(deploy_index=default_deploy):
    '''
    Loads the antenna locations and phase locations as best they are known.
    These are given in ENU relative to Antenna 0.
    '''
    if deploy_index == 0:
        antennas_physical   = {0:(0.0,0.0,0.0),1:(-6.039,-1.618,2.275),2:(-1.272,-10.362,1.282),3:(3.411,-11.897,-0.432)} #ORIGINAL
        '''
        #These were determined using only run 793
        antennas_phase_hpol = {0:(  -0.02557475,   0.03116954,   0.09699316),1:(-6.07239516,  -1.57654064,   2.40102979),2:(-1.03349923, -10.66185761,   0.41323144),3:( 3.0254727 , -11.41386618,   1.08350273)}#ADJUSTED HPOL
        antennas_phase_vpol = {0:(-0.3113139 ,   0.37988811,   1.22224369),1:(-5.87779214,  -1.8179266 ,   1.68175401),2:(-1.57186065,  -9.98385335,   2.45102724),3:( 3.79236323, -12.37305718,  -1.80125484)}#ADJUSTED VPOL
        '''
        #These were determined in first attempt with day 5 and day 6 data with no bounds on phase positons.
        antennas_phase_hpol = {0:( -1.05036701,  -2.83990607,   5.7301439) , 1:(-5.04455409,   1.80238432,  -3.37157069), 2:(-0.70469931,  -9.35762227,  -1.46880603),  3:( 0.62819922, -18.85449124,  14.09627911)}#ADJUSTED HPOL
        antennas_phase_vpol = {0:( -1.97517555,  -4.78830899,  10.53874329), 1:( -5.26414199,   0.06191184,  -1.6073464), 2:( -1.17891238,  -8.69156208,   0.24012179), 3:(  4.23558404, -11.0023696 ,  -4.13418962)}#ADJUSTED VPOL
    elif deploy_index > 0 and deploy_index <= 9:

        origin = loadAntennaZeroLocation(deploy_index = deploy_index)
        antennas_physical_latlon = {0:origin,1:(37.5892, -118.2380, 3890.77),2:(37.588909, -118.237719, 3881.02),3:(37.5889210, -118.2379850, 3887.42)} #ORIGINAL
        antennas_physical = {}
        for key, location in antennas_physical_latlon.items():
            antennas_physical[key] = pm.geodetic2enu(location[0],location[1],location[2],origin[0],origin[1],origin[2])

        if deploy_index == 1:
            #Errors not currently used.  
            antennas_phase_vpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-30.307267, -12.610417, 11.411196], 2 : [-10.464510, -46.217141, -0.229276], 3 : [-31.172820, -42.069610, 14.812669]}
            antennas_phase_vpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.042770, 0.047592, 0.232313], 2 : [0.069353, 0.034351, 0.297275], 3 : [0.065285, 0.047254, 0.249236]}
            antennas_phase_hpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-29.908104, -12.713682, 11.649818], 2 : [-9.956527, -46.119743, 1.003367], 3 : [-31.175775, -41.743273, 15.241286]}
            antennas_phase_hpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.057717, 0.065283, 0.261789], 2 : [0.080427, 0.046084, 0.282382], 3 : [0.084447, 0.065313, 0.276901]}

        elif deploy_index == 2:
            '''
            #These are the ones I got by flipping channel 2
            antennas_phase_hpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-28.231754, -13.562168, 9.068510], 2 : [-9.735529, -45.985775, -0.088781], 3 : [-31.298949, -42.571000, 13.874803]}                                                          
            antennas_phase_hpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.066406, 0.054628, 0.148034], 2 : [0.033279, 0.044264, 0.117928], 3 : [0.034486, 0.038190, 0.096574]} 
            antennas_phase_vpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-30.466405, -12.754674, 11.112169], 2 : [-10.727788, -46.128595, -1.850623], 3 : [-31.569865, -42.169063, 13.027888]}                                                        
            antennas_phase_vpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.024673, 0.039216, 0.162412], 2 : [0.041817, 0.028456, 0.215791], 3 : [0.038274, 0.035657, 0.180371]} 
            '''
            '''
            #These are the ones that I had prior to 11/21/2019
            antennas_phase_vpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-30.401760, -12.621386, 10.810656], 2 : [-10.372617, -46.301546, -0.381405], 3 : [-31.261194, -42.193276, 14.412270]}
            antennas_phase_vpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.042055, 0.048239, 0.254382], 2 : [0.069051, 0.034678, 0.330481], 3 : [0.065562, 0.049100, 0.276208]}

            antennas_phase_hpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-29.979756, -12.405349, 9.822749], 2 : [-9.619360, -46.467924, 2.456841], 3 : [-31.138537, -41.778211, 14.606688]}
            antennas_phase_hpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.051475, 0.064251, 0.278799], 2 : [0.078516, 0.049043, 0.293481], 3 : [0.085002, 0.073460, 0.303864]}

            '''

            #These are from the first 6 planes found. 
            # antennas_phase_hpol = {0 : [259.993245, 787.655542, 437.666287], 1 : [259.993245, 787.655542, 437.666287], 2 : [283.612514, 755.111988, 431.073474], 3 : [261.116575, 757.466770, 437.434022]}
            # antennas_phase_hpol_hesse = {0 : [0.045983, 0.129863, 0.037608], 1 : [0.045983, 0.129863, 0.037608], 2 : [0.046190, 0.130497, 0.037696], 3 : [0.045993, 0.129540, 0.037607]}

            # antennas_phase_hpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-32.940076, -15.159404, 13.220501], 2 : [-9.459576, -48.470314, 9.195625], 3 : [-31.800885, -44.470317, 16.231648]}
            # antennas_phase_hpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.010150, 0.021543, 0.007624], 2 : [0.010652, 0.025185, 0.008330], 3 : [0.009642, 0.020038, 0.006959]}

            #These include the next 6, specifically calibrated to be W sensitive. #currently the best for planes found in west
            antennas_phase_hpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-32.940076, -15.159404, 13.220501], 2 : [-9.459576, -48.470314, 9.195625], 3 : [-31.800885, -44.470317, 16.231648]}
            antennas_phase_hpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.010150, 0.021543, 0.007624], 2 : [0.010652, 0.025185, 0.008330], 3 : [0.009642, 0.020038, 0.006959]}
            antennas_phase_vpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-31.224503, -13.170500, 10.000003], 2 : [-9.765921, -46.417296, 3.205128], 3 : [-31.080523, -42.279361, 12.014143]}
            antennas_phase_vpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.037041, 0.074031, 4.992054], 2 : [0.023776, 0.044105, 0.048783], 3 : [0.027407, 0.050578, 0.057576]}
        elif deploy_index == 3:
            #Here I am just rerunning the time delays from the pulser, and also letting the cable delays vary.  I am only doing a simple chi^2 (Just the adjustedChi^2)
            antennas_phase_hpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-30.568717, -12.446193, 10.212559], 2 : [-9.692826, -46.525891, 2.602984], 3 : [-31.642232, -41.937230, 15.393675]}
            antennas_phase_hpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.067854, 0.057468, 0.200232], 2 : [0.023387, 0.025701, 0.123221], 3 : [0.022399, 0.009549, 0.082992]}

            antennas_phase_vpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-31.334960, -12.928318, 15.911683], 2 : [-10.717905, -46.442935, 0.488731], 3 : [-31.672917, -42.311738, 15.209071]}
            antennas_phase_vpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.022266, 0.010907, 0.128100], 2 : [0.024116, 0.014593, 0.176512], 3 : [0.026911, 0.013143, 0.139782]}
        elif deploy_index == 4:
            #hpol calibration based solely off of matching Solar Plant calibration
            antennas_phase_hpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-34.482512, -16.819514, 13.000502], 2 : [-6.612918, -45.580198, 11.070150], 3 : [-30.208161, -42.804228, 13.270912]}
            antennas_phase_hpol_hesse = {0 : [0.100000, 0.100000, 0.100000], 1 : [3.715818, 3.611556, 4.597339], 2 : [5.816696, 5.086424, 5.437195], 3 : [4.455286, 4.555449, 3.064820]}

            antennas_phase_vpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-34.224499, -16.170499, 12.999983], 2 : [-9.338844, -45.953347, 0.917863], 3 : [-31.007327, -42.196964, 12.929773]}
            antennas_phase_vpol_hesse = {0 : [0.100000, 0.100000, 0.100000], 1 : [0.129504, 0.136716, 4.293571], 2 : [2.441008, 4.373686, 3.341286], 3 : [2.412784, 2.502000, 3.880752]}
        elif deploy_index == 5:
            #Hpol uses the following sources
            #use_sources = ['Quarry Substation','Palmetto Cell Tower','Goldfield KGFN-FM','Silver Peak Substation']
            antennas_phase_hpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-37.482512, -13.819514, 16.000502], 2 : [-7.382560, -44.541828, 14.070150], 3 : [-33.208161, -39.804228, 16.270912]}
            antennas_phase_hpol_hesse = {0 : [0.100000, 0.100000, 0.100000], 1 : [0.003555, 0.170239, 0.097863], 2 : [0.108990, 0.235702, 0.799819], 3 : [0.004331, 0.041649, 0.105451]}
            #Vpol uses the following sources
            #
        elif deploy_index == 6:
            #Southern hpol calibration using ['East Dyer Substation','Goldfield KGFN-FM','Silver Peak Substation']
            antennas_phase_hpol = {0 : [5.000000, -5.000000, 0.000000], 1 : [-34.908104, -10.002345, 16.649818], 2 : [-10.030078, -45.396969, 6.003367], 3 : [-34.535026, -36.743273, 20.241286]}
            antennas_phase_hpol_hesse = {0 : [0.011569, 0.048381, 0.050000], 1 : [0.011566, 0.394467, 0.268665], 2 : [0.112954, 0.401714, 0.596043], 3 : [0.110909, 0.048557, 0.549806]}
            #Southern vpol ['East Dyer Substation','Goldfield KGFN-FM']
            antennas_phase_vpol = {0 : [4.999999, -4.999999, 0.000000], 1 : [-35.307267, -9.499658, 16.411193], 2 : [-9.729938, -42.427576, 4.534545], 3 : [-34.426753, -37.069610, 19.812659]}
            antennas_phase_vpol_hesse = {0 : [0.017758, 0.035716, 0.050000], 1 : [0.017726, 0.549810, 0.388825], 2 : [1.513986, 2.623749, 9.713300], 3 : [0.134422, 0.035845, 0.402331]}

        elif deploy_index == 7:
            #Northern hpol calibration using ['Tonopah KTPH','Solar Plant','Silver Peak Substation']
            antennas_phase_hpol = {0 : [5.000000, -5.000000, 0.000000], 1 : [-33.689692, -15.002345, 21.649818], 2 : [-11.494760, -46.163473, 1.003367], 3 : [-33.922477, -41.471350, 15.241288]}
            antennas_phase_hpol_hesse = {0 : [0.050000, 0.050000, 0.050000], 1 : [0.144083, 0.098881, 7.940934], 2 : [0.338200, 0.531446, 2.016936], 3 : [0.339069, 0.524670, 9.907052]}
            #Northern vpol ['Tonopah KTPH','Solar Plant']
            antennas_phase_vpol = {0 : [4.999999, -4.999999, 0.000000], 1 : [-34.603054, -14.499658, 21.411172], 2 : [-13.467258, -43.818630, 8.089366], 3 : [-35.052678, -40.378028, 22.496440]}
            antennas_phase_vpol_hesse = {0 : [0.050000, 0.050000, 0.050000], 1 : [0.186809, 0.170799, 6.939977], 2 : [0.761651, 2.035546, 7.680443], 3 : [0.754464, 1.907757, 5.935745]}
        elif deploy_index == 8:
            #This uses the sources used for both the southern and northern calibrations above
            # hpol : ['East Dyer Substation','Goldfield KGFN-FM','Tonopah KTPH','Solar Plant','Silver Peak Substation']
            # vpol : ['East Dyer Substation','Goldfield KGFN-FM','Tonopah KTPH','Solar Plant']
            antennas_phase_hpol = {0 : [5.000000, -5.000000, 0.000000], 1 : [-35.499550, -12.062215, 21.649776], 2 : [-10.363603, -46.707683, 11.003365], 3 : [-34.919269, -38.689617, 25.241286]}
            antennas_phase_hpol_hesse = {0 : [0.050000, 0.050000, 0.050000], 1 : [0.128056, 0.264925, 8.677112], 2 : [0.128084, 0.264799, 1.257417], 3 : [0.128088, 0.264868, 0.600729]}

            antennas_phase_vpol = {0 : [4.999999, -4.999999, 0.000000], 1 : [-36.058825, -12.207762, 21.411190], 2 : [-10.579375, -46.727175, 9.534532], 3 : [-35.094910, -39.333878, 24.812656]}
            antennas_phase_vpol_hesse = {0 : [0.050000, 0.050000, 0.050000], 1 : [0.137129, 0.265938, 1.316943], 2 : [0.137083, 0.265485, 1.881641], 3 : [0.137130, 0.265949, 0.504853]}
        elif deploy_index == 9:
            #This uses the airplane data ignoring sources in the East.  
            #Western Hpol calibration
            antennas_phase_hpol = {0 : [5.000000, -5.000000, 0.000000], 1 : [-29.499550, -18.062215, 15.649776], 2 : [-5.412771, -50.968447, 11.312891], 3 : [-28.919269, -44.689617, 19.241286]}
            antennas_phase_hpol_hesse = {0 : [0.100000, 0.100000, 0.100000], 1 : [0.000994, 0.001836, 0.000453], 2 : [0.052628, 0.117427, 0.041269], 3 : [0.000234, 0.000440, 0.000199]}
            #Western Vpol calibration
            antennas_phase_vpol = {0 : [4.999999, -4.999999, 0.000000], 1 : [-30.058825, -18.207762, 15.411190], 2 : [-7.416143, -51.399893, 9.940570], 3 : [-29.094910, -45.333878, 18.812656]}
            antennas_phase_vpol_hesse = {0 : [0.100000, 0.100000, 0.100000], 1 : [0.002770, 0.007155, 0.002050], 2 : [0.093939, 0.138281, 0.121274], 3 : [0.000847, 0.001238, 0.001117]}
    elif deploy_index > 9 and deploy_index <= 11:
        #For these deploy indices I am attempting to be more sure of which elevation metric is being used, and ensuring it is properly handled.
        #The origin of coordinates are coming from a picture taken near the base of antenna 0 on a OnePlus 6T, which **I THINK** uses MSL elevation (then adjusted below to be WGS84)
        origin = loadAntennaZeroLocation(deploy_index = deploy_index)
        #The offset between MSL and WGS84 onsite according to pulsing data averages to MSL = WGS84 + 26.356m, so I am subtracting the offset such that datum is WGS84
        # A0Location = (37.0 + 35.0/60.0 + 21.6528/3600, -(118. + 14.0/60.0 + 15.4715/3600.0), 3850.333 - 26.356) #6ft below antennas, ~3ft to the side (north east ish)
        # A1Location = (37.5892, -118.2380, 3862.776 - 26.356) #No good photos for elevation.  Could be off on this one, this is from a picture taken at approximately the same height?  GPS come from pictures and google maps.  Likely too high.
        # A2Location = (37.0 + 35.0/60.0 + 19.9643/3600, -(118. + 14.0/60.0 + 15.9971/3600.0), 3857.583 - 26.356) #6ft below antennas, ~3ft to the side (north east ish)
        # A3Location = (37.0 + 35.0/60.0 + 20.1155/3600, -(118. + 14.0/60.0 + 16.7496/3600.0), 3859.079 - 26.356) #Slightly downhill south, closer to antenna

        #plotting these makes me think that antenna 2 is not low enough?  Hopefully that fixes in a calibration?  
        print('Antenna Physical location elevations from photos with OnePlus 6t using a false assumption that it is MSL (so doing elevation - 26.356 to get what was suspected to be WGS84 but was not)')
        antennas_physical_latlon = {0:origin,1:(37.5892, -118.2380, 3862.776 - 26.356),2:(37.0 + 35.0/60.0 + 19.9643/3600, -(118. + 14.0/60.0 + 15.9971/3600.0), 3857.583 - 26.356),3:(37.0 + 35.0/60.0 + 20.1155/3600, -(118. + 14.0/60.0 + 16.7496/3600.0), 3859.079 - 26.356)} #MSL mostly derived from pictures taken with a OnePlus 6t phone, then converted to WGS84 by subtracting measured offset from pulsing site gps
        antennas_physical = {}
        for key, location in antennas_physical_latlon.items():
            antennas_physical[key] = pm.geodetic2enu(location[0],location[1],location[2],origin[0],origin[1],origin[2])

        if deploy_index == 10:
            #Errors not currently used.
            antennas_phase_vpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-30.307267, -12.610417, 11.411196], 2 : [-10.464510, -46.217141, -0.229276], 3 : [-31.172820, -42.069610, 14.812669]}
            antennas_phase_vpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.042770, 0.047592, 0.232313], 2 : [0.069353, 0.034351, 0.297275], 3 : [0.065285, 0.047254, 0.249236]}
            antennas_phase_hpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-29.908104, -12.713682, 11.649818], 2 : [-9.956527, -46.119743, 1.003367], 3 : [-31.175775, -41.743273, 15.241286]}
            antennas_phase_hpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.057717, 0.065283, 0.261789], 2 : [0.080427, 0.046084, 0.282382], 3 : [0.084447, 0.065313, 0.276901]}
        elif deploy_index == 11:
            #Using only pulsers based on deploy_index 10.  Has large error in z.
            antennas_phase_hpol = {0 : [0.000000, 0.000000, -4.999851], 1 : [-33.368096, -13.390900, 16.719218], 2 : [-7.939456, -48.869670, 12.249774], 3 : [-31.401009, -43.024315, 13.745746]}
            antennas_phase_hpol_hesse = {0 : [1.000000, 1.000000, 7.550356], 1 : [0.899323, 0.590841, 5.101403], 2 : [0.194723, 0.190567, 1.998298], 3 : [0.166002, 0.195414, 6.334229]}
            antennas_phase_vpol = {0 : [0.000000, 0.000000, 4.999999], 1 : [-32.828532, -13.166628, 9.409578], 2 : [-7.902534, -48.485135, 2.249786], 3 : [-28.853200, -43.872502, 13.687206]}
            antennas_phase_vpol_hesse = {0 : [1.000000, 1.000000, 7.807538], 1 : [0.854570, 0.469628, 8.731584], 2 : [0.248426, 0.184186, 7.639721], 3 : [0.779508, 0.313825, 5.027621]}

    elif deploy_index == 12:
        #For these deploy indices I am attempting to be more sure of which elevation metric is being used, and ensuring it is properly handled.
        #Plotting the reported coordinates of every photo I took on the hillside, including those beside the pulsing site 1, I believe the oneplus 6T reports in WGS84.
        origin = loadAntennaZeroLocation(deploy_index = deploy_index)
        # A0Location = (37.0 + 35.0/60.0 + 21.6528/3600, -(118. + 14.0/60.0 + 15.4715/3600.0), 3850.333) #6ft below antennas, ~3ft to the side (north east ish)
        # A1Location = (37.5892, -118.2380, 3862.776) #No good photos for elevation.  Could be off on this one, this is from a picture taken at approximately the same height?  GPS come from pictures and google maps.  Likely too high.
        # A2Location = (37.0 + 35.0/60.0 + 19.9643/3600, -(118. + 14.0/60.0 + 15.9971/3600.0), 3857.583) #6ft below antennas, ~3ft to the side (north east ish)
        # A3Location = (37.0 + 35.0/60.0 + 20.1155/3600, -(118. + 14.0/60.0 + 16.7496/3600.0), 3859.079) #Slightly downhill south, closer to antenna

        #plotting these makes me think that antenna 2 is not low enough?  Hopefully that fixes in a calibration?  
        print('Antenna Physical location elevations from photos with OnePlus 6t interpreted as WGS84')
        antennas_physical_latlon = {0:origin,1:(37.5892, -118.2380, 3862.776 ),2:(37.0 + 35.0/60.0 + 19.9643/3600, -(118. + 14.0/60.0 + 15.9971/3600.0), 3857.583 ),3:(37.0 + 35.0/60.0 + 20.1155/3600, -(118. + 14.0/60.0 + 16.7496/3600.0), 3859.079 )} 

        antennas_physical = {}
        for key, location in antennas_physical_latlon.items():
            antennas_physical[key] = pm.geodetic2enu(location[0],location[1],location[2],origin[0],origin[1],origin[2])
        #Errors not currently used.
        print('Using best guess physical as both phase locations as well!')
        antennas_phase_vpol = {0 : [antennas_physical[0][0],antennas_physical[0][1],antennas_physical[0][2]], 1 : [antennas_physical[1][0],antennas_physical[1][1],antennas_physical[1][2]], 2 : [antennas_physical[2][0],antennas_physical[2][1],antennas_physical[2][2]], 3 : [antennas_physical[3][0],antennas_physical[3][1],antennas_physical[3][2]]}
        antennas_phase_vpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.000000, 0.000000, 0.000000], 2 : [0.000000, 0.000000, 0.000000], 3 : [0.000000, 0.000000, 0.000000]}
        antennas_phase_hpol = {0 : [antennas_physical[0][0],antennas_physical[0][1],antennas_physical[0][2]], 1 : [antennas_physical[1][0],antennas_physical[1][1],antennas_physical[1][2]], 2 : [antennas_physical[2][0],antennas_physical[2][1],antennas_physical[2][2]], 3 : [antennas_physical[3][0],antennas_physical[3][1],antennas_physical[3][2]]}
        antennas_phase_hpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.000000, 0.000000, 0.000000], 2 : [0.000000, 0.000000, 0.000000], 3 : [0.000000, 0.000000, 0.000000]}
    
    elif deploy_index >= 13 and deploy_index <= 22:
        #These positions from from photo_gps.py, which was used to make a plane model of the hillside based on GPS coordinates of
        #cell phone pictures.  The GPS coordinates are then input in this plane to calculate the altitudes.  
        # ENU calculated below relative to deploy_index == 1
        # Antenna 0
        # (E, N, U)       : (0.000000,0.000000,-22.687778)
        # (lat, lon, alt) : (37.589310,-118.237621,3852.842222)
        # Antenna 1
        # (E, N, U)       : (-33.493731,-12.216161,-2.989690)
        # (lat, lon, alt) : (37.589200,-118.238000,3872.540409)
        # Antenna 2
        # (E, N, U)       : (-8.660669,-44.533633,-26.183296)
        # (lat, lon, alt) : (37.588909,-118.237719,3849.346866)
        # Antenna 3
        # (E, N, U)       : (-32.168224,-43.200941,-10.301701)
        # (lat, lon, alt) : (37.588921,-118.237985,3865.228526)
        origin = loadAntennaZeroLocation(deploy_index = deploy_index)
        print('Antenna Physical location elevations from plane fit to gps coordinates from photos with OnePlus 6t interpreted as WGS84')
        antennas_physical_latlon = {0:origin,1:(37.589200,-118.238000,3872.540409),2:(37.588909,-118.237719,3849.346866),3:(37.588921,-118.237985,3865.228526)} 

        antennas_physical = {}
        for key, location in antennas_physical_latlon.items():
            antennas_physical[key] = pm.geodetic2enu(location[0],location[1],location[2],origin[0],origin[1],origin[2])
        #Errors not currently used.
        if deploy_index == 13:
            print('Using best guess physical as both phase locations as well!')
            antennas_phase_vpol = {0 : [antennas_physical[0][0],antennas_physical[0][1],antennas_physical[0][2]], 1 : [antennas_physical[1][0],antennas_physical[1][1],antennas_physical[1][2]], 2 : [antennas_physical[2][0],antennas_physical[2][1],antennas_physical[2][2]], 3 : [antennas_physical[3][0],antennas_physical[3][1],antennas_physical[3][2]]}
            antennas_phase_vpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.000000, 0.000000, 0.000000], 2 : [0.000000, 0.000000, 0.000000], 3 : [0.000000, 0.000000, 0.000000]}
            antennas_phase_hpol = {0 : [antennas_physical[0][0],antennas_physical[0][1],antennas_physical[0][2]], 1 : [antennas_physical[1][0],antennas_physical[1][1],antennas_physical[1][2]], 2 : [antennas_physical[2][0],antennas_physical[2][1],antennas_physical[2][2]], 3 : [antennas_physical[3][0],antennas_physical[3][1],antennas_physical[3][2]]}
            antennas_phase_hpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.000000, 0.000000, 0.000000], 2 : [0.000000, 0.000000, 0.000000], 3 : [0.000000, 0.000000, 0.000000]}
        elif deploy_index == 14:
            antennas_phase_hpol = {0 : [-0.171160, 1.999962, -3.377134], 1 : [-34.009522, -10.993301, 10.040922], 2 : [-7.848979, -46.517627, 4.278406], 3 : [-32.649573, -41.250262, 16.077983]}
            antennas_phase_hpol_hesse = {0 : [0.652427, 3.986116, 4.445558], 1 : [0.699547, 0.223363, 15.134269], 2 : [0.660478, 0.795400, 3.666424], 3 : [0.707570, 0.270289, 3.338366]}
            
            antennas_phase_vpol = {0 : [-1.424875, 1.992824, 7.248382], 1 : [-33.783376, -11.218451, 11.753426], 2 : [-7.280174, -46.531850, 2.117580], 3 : [-30.760044, -42.275804, 15.503537]}
            antennas_phase_vpol_hesse = {0 : [0.795334, 3.995309, 12.736719], 1 : [0.874418, 0.546834, 11.724445], 2 : [0.814953, 2.000217, 4.394386], 3 : [0.855157, 0.555719, 4.022556]}

        elif deploy_index == 15:
            antennas_phase_hpol_hesse = {0 : [1.107598, 1.155382, 8.290938], 1 : [1.208719, 1.214783, 5.448297], 2 : [1.184062, 1.182823, 9.523712], 3 : [1.251305, 1.219051, 7.934458]}
            antennas_phase_vpol_hesse = {0 : [0.286134, 0.170131, 1.475580], 1 : [0.630060, 0.204455, 9.826477], 2 : [0.283998, 0.178813, 1.356786], 3 : [0.282316, 0.180412, 1.246523]}

            antennas_phase_hpol = {0 : [-0.121226, 1.755070, -4.164016], 1 : [-33.783739, -12.067049, 14.709302], 2 : [-6.931436, -47.135687, 0.600605], 3 : [-30.835281, -42.606386, 14.853267]}
            antennas_phase_vpol = {0 : [-0.442439, 1.784501, -3.595621], 1 : [-34.121366, -11.965828, 14.797254], 2 : [-7.324517, -47.078042, 0.728544], 3 : [-30.611585, -42.820426, 14.415308]}
        elif deploy_index == 16:
            #This set of coordinates DOES NOT COME FROM CHI^2. 
            #This is meant as input.  Essentially starting with the relative antenna positions achieved using airplane 
            #data in the past, but ensuring that antenna 0/the array is at the newly defined elevation.  The relative
            #positions come from calibration 2.

            #These include the next 6, specifically calibrated to be W sensitive. #currently the best for planes found in west
            antennas_phase_hpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-32.940076, -15.159404, 13.220501], 2 : [-9.459576, -48.470314, 9.195625], 3 : [-31.800885, -44.470317, 16.231648]}
            antennas_phase_hpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.010150, 0.021543, 0.007624], 2 : [0.010652, 0.025185, 0.008330], 3 : [0.009642, 0.020038, 0.006959]}
            antennas_phase_vpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-31.224503, -13.170500, 10.000003], 2 : [-9.765921, -46.417296, 3.205128], 3 : [-31.080523, -42.279361, 12.014143]}
            antennas_phase_vpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.037041, 0.074031, 4.992054], 2 : [0.023776, 0.044105, 0.048783], 3 : [0.027407, 0.050578, 0.057576]}
        elif deploy_index == 17:
            #This is using valley sources same as 8, but starting from 13. Results in time delays semi reasonable. 
            #Saved and intended for use as a starting condition for low movement of just pulser data. 
            antennas_phase_hpol = {0 : [-4.865278, 3.214076, 4.630806], 1 : [-32.974217, -15.411447, 22.795159], 2 : [-10.943711, -45.497623, -4.818512], 3 : [-32.061146, -42.722525, 9.177065]}
            antennas_phase_hpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.000000, 0.000000, 0.000000], 2 : [0.000000, 0.000000, 0.000000], 3 : [0.000000, 0.000000, 0.000000]}
            antennas_phase_vpol = {0 : [-4.530553, 3.253017, 4.554258], 1 : [-31.055576, -16.501015, 24.679216], 2 : [-10.686676, -45.258288, -5.432522], 3 : [-31.480157, -42.663642, 9.087964]}
            antennas_phase_vpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.000000, 0.000000, 0.000000], 2 : [0.000000, 0.000000, 0.000000], 3 : [0.000000, 0.000000, 0.000000]}
        elif deploy_index == 18:
            #This set of coordinates DOES NOT COME FROM CHI^2. 
            #This is meant as input.  Essentially starting with the relative antenna positions achieved using valley sources 
            #(literally deploy_index 8), but with the origin set to match 13. 
            #data in the past, but ensuring that antenna 0/the array is at the newly defined elevation.  The relative
            #positions come from calibration 2.

            #These include the next 6, specifically calibrated to be W sensitive. #currently the best for planes found in west
            antennas_phase_hpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-32.940076, -15.159404, 13.220501], 2 : [-9.459576, -48.470314, 9.195625], 3 : [-31.800885, -44.470317, 16.231648]}
            antennas_phase_hpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.010150, 0.021543, 0.007624], 2 : [0.010652, 0.025185, 0.008330], 3 : [0.009642, 0.020038, 0.006959]}
            antennas_phase_vpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-31.224503, -13.170500, 10.000003], 2 : [-9.765921, -46.417296, 3.205128], 3 : [-31.080523, -42.279361, 12.014143]}
            antennas_phase_vpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.037041, 0.074031, 4.992054], 2 : [0.023776, 0.044105, 0.048783], 3 : [0.027407, 0.050578, 0.057576]}
        elif deploy_index == 19:
            #This one works well for the 3 pulsers (which it is based on) and has good results for all antennas but antenna 0 in the valley.
            #Rerunning with this as starting ocndition but with antenna 0 allowed to move. 
            antennas_phase_hpol = {0 : [2.703403, -0.727873, 2.927082], 1 : [-28.493635, -14.166269, 14.698087], 2 : [-5.072297, -49.533393, 1.504482], 3 : [-27.537450, -44.914837, 17.271776]}
            antennas_phase_hpol_hesse = {0 : [0.760297, 0.277011, 5.718408], 1 : [1.583672, 0.196639, 0.419612], 2 : [0.171910, 6.326707, 0.502885], 3 : [0.658066, 0.254736, 9.730493]}
            antennas_phase_vpol = {0 : [2.531864, -0.815938, 4.787836], 1 : [-28.560448, -14.142631, 14.698089], 2 : [-5.005754, -49.488358, 1.504481], 3 : [-27.190815, -45.237602, 17.383858]}
            antennas_phase_vpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.000000, 0.000000, 0.000000], 2 : [0.000000, 0.000000, 0.000000], 3 : [0.000000, 0.000000, 0.000000]}
        elif deploy_index == 20:
            #Similar in effect to 19 but with slightly different antenna locations and cable delays.  
            #This one works well for the 3 pulsers (which it is based on) and has good results for all antennas but antenna 0 in the valley.
            #Rerunning with this as starting ocndition but with antenna 0 allowed to move. 
            '''
            #Starting from deploy_index 13
            #Parameters trying to achieve the 3 antenna match starting from deploy_index = 13.
            include_pulsers = True 
            include_baseline_measurements = False
            baseline_measurement_uncertainty_m = 3 #Assuming a 3m spread in our data.  This is very approximate.
            time_delay_measurement_uncertainty_ns = 25 #ns, The time window used to as error in chi^2 for time delay.  If you are assuming that the time delays are 100% accurate then this is usually sub ns.  But if you think it is slipping cycles you could give this a larger value. 
            include_sanity = True #Slow
            plot_predicted_time_shifts = False
            random_offset_amount = 0.25 #m (every antenna will be stepped randomly by this amount.  Set to 0 if you don't want this. ), Note that this is applied to 
            included_antennas_lumped = [0,1,2,3] #If an antenna is not in this list then it will not be included in the chi^2 (regardless of if it is fixed or not)  Lumped here imlies that antenna 0 in this list means BOTH channels 0 and 1 (H and V of crossed dipole antenna 0).
            included_antennas_channels = numpy.concatenate([[2*i,2*i+1] for i in included_antennas_lumped])
            include_baselines = [0,1,2,3,4,5] #Basically sets the starting condition of which baselines to include, then the lumped channels and antennas will cut out further from that.  The above options of excluding antennas will override this to exclude baselines, but if both antennas are included but the baseline is not then it will not be included.  Overwritten when antennas removed.
            plot_overlap = True #Will plot the overlap map for time delays from each source.
            overlap_window_ns = 50 #ns The time window used to define sufficient overlap. 
            overlap_goal = overlap_window_ns*len(included_antennas_channels)*len(use_sources) #This shouldn't be varied, vary the error if anything.  This is the portion of chi^2 coming from overlapping valley source time delays.  The measured map max will be subtracted from this in a chi^2 calculation.  
            overlap_error = overlap_goal/50 #The error portion of chi^2 coming from overlapping valley source time delays will be devided by this number.
            limit_array_plane_azimuth_range = False #Should be seen as a temporary test.  Doesn't use any errors and isn't in standard chi^2 format.
            allowed_array_plane_azimuth_range = 20 #plus or minus this from East is not impacted by weighting. 

            #Limits 
            initial_step_x = 0.5#75 #m
            initial_step_y = 0.5#75 #m
            initial_step_z = 0.5#5 #m
            initial_step_cable_delay = 1.0 #ns
            cable_delay_guess_range = 10 #ns
            antenna_position_guess_range_x = 5#2#4 #Limit to how far from input phase locations to limit the parameter space to
            antenna_position_guess_range_y = 5#2#7 #Limit to how far from input phase locations to limit the parameter space to
            antenna_position_guess_range_z = 5#3 #Limit to how far from input phase locations to limit the parameter space to

            #Manually shifting input of antenna 0 around so that I can find a fit that has all of its baselines visible for valley sources. 
            manual_offset_ant0_x = 0
            manual_offset_ant0_y = 0
            manual_offset_ant0_z = 0


            fix_ant0_x = False
            fix_ant0_y = False
            fix_ant0_z = False
            fix_ant1_x = False
            fix_ant1_y = False
            fix_ant1_z = False
            fix_ant2_x = False
            fix_ant2_y = False
            fix_ant2_z = False
            fix_ant3_x = False
            fix_ant3_y = False
            fix_ant3_z = False
            fix_cable_delay0 = False
            fix_cable_delay1 = False
            fix_cable_delay2 = False
            fix_cable_delay3 = False
            '''
            antennas_phase_hpol = {0 : [-0.982288, 1.447974, 4.762703], 1 : [-34.051753, -12.072183, 14.698504], 2 : [-7.246353, -47.198002, 1.340104], 3 : [-31.114755, -42.627657, 14.924516]}
            antennas_phase_hpol_hesse = {0 : [0.351842, 0.260876, 7.831570], 1 : [0.504778, 0.276552, 7.620909], 2 : [0.354478, 0.265431, 8.304336], 3 : [0.354914, 0.273275, 1.883443]}
            antennas_phase_vpol = {0 : [-0.784322, 1.765724, 1.553684], 1 : [-34.153473, -11.806226, 15.018032], 2 : [-7.391859, -46.958796, 1.473361], 3 : [-30.656309, -42.670223, 14.731633]}
            antennas_phase_vpol_hesse = {0 : [0.682632, 0.613462, 3.806129], 1 : [0.718409, 0.646417, 8.186476], 2 : [0.696899, 0.646127, 8.174901], 3 : [0.714915, 0.643952, 3.290147]}
        elif deploy_index == 21:
            #Using relative positions from deploy 1 with z of deploy 13
            antennas_phase_vpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-30.307267, -12.610417, 11.411196], 2 : [-10.464510, -46.217141, -0.229276], 3 : [-31.172820, -42.069610, 14.812669]}
            antennas_phase_vpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.042770, 0.047592, 0.232313], 2 : [0.069353, 0.034351, 0.297275], 3 : [0.065285, 0.047254, 0.249236]}
            antennas_phase_hpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-29.908104, -12.713682, 11.649818], 2 : [-9.956527, -46.119743, 1.003367], 3 : [-31.175775, -41.743273, 15.241286]}
            antennas_phase_hpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.057717, 0.065283, 0.261789], 2 : [0.080427, 0.046084, 0.282382], 3 : [0.084447, 0.065313, 0.276901]}
        elif deploy_index == 22:
            '''
            This one comes from starting with 13, then manually shifting antennas around.  Limiting cable delay variation
            and locking down the position of antenna 0, and using only valley sources.

            pulser_weight = 0.0 #Each pulsing site worth this % as much as a valley source.
            unknown_source_dir_valley = False #If true then the chi^2 will not assume known arrival directions, but will instead just attempt to get overlap ANYWHERE for all selected populations.
            if mode == 'hpol':
                use_sources = ['Tonopah Airport Antenna','Tonopah AFS GATR Site','Dome Thing','Silver Peak Town Antenna']#['East Dyer Substation','Goldfield KGFN-FM','Tonopah KTPH','Solar Plant','Silver Peak Substation']#['Tonopah KTPH','Solar Plant','Silver Peak Substation']#'East Dyer Substation',
                included_pulsers = ['run1507','run1509','run1511']#['run1507','run1509','run1511']#['run1509']#['run1507','run1509','run1511']#['run1507','run1509','run1511']#['run1507','run1509','run1511'] #Only included if include_pulsers == True
            elif mode == 'vpol':
                use_sources = ['Tonopah Vortac','Tonopah AFS GATR Site']#'East Dyer Substation',
                included_pulsers = ['run1507','run1509','run1511']#['run1507','run1509','run1511']#['run1507','run1509','run1511'] #Only included if include_pulsers == True



            #Parameters trying to achieve the 3 antenna match starting from deploy_index = 13.
            include_pulsers = True 
            include_baseline_measurements = True
            baseline_measurement_uncertainty_m = 3 #Assuming a 3m spread in our data.  This is very approximate.
            time_delay_measurement_uncertainty_ns = 1 #ns, The time window used to as error in chi^2 for time delay.  If you are assuming that the time delays are 100% accurate then this is usually sub ns.  But if you think it is slipping cycles you could give this a larger value. 
            include_sanity = False #Slow
            plot_predicted_time_shifts = False
            random_offset_amount = 0.1#0.25 #m (every antenna will be stepped randomly by this amount.  Set to 0 if you don't want this. ), Note that this is applied to 
            included_antennas_lumped = [0,1,2,3] #If an antenna is not in this list then it will not be included in the chi^2 (regardless of if it is fixed or not)  Lumped here imlies that antenna 0 in this list means BOTH channels 0 and 1 (H and V of crossed dipole antenna 0).
            included_antennas_channels = numpy.concatenate([[2*i,2*i+1] for i in included_antennas_lumped])
            include_baselines = [0,1,2,3,4,5] #Basically sets the starting condition of which baselines to include, then the lumped channels and antennas will cut out further from that.  The above options of excluding antennas will override this to exclude baselines, but if both antennas are included but the baseline is not then it will not be included.  Overwritten when antennas removed.
            plot_overlap = False #Will plot the overlap map for time delays from each source.
            overlap_window_ns = 50 #ns The time window used to define sufficient overlap. 
            overlap_goal = overlap_window_ns*len(included_antennas_channels)*len(use_sources) #This shouldn't be varied, vary the error if anything.  This is the portion of chi^2 coming from overlapping valley source time delays.  The measured map max will be subtracted from this in a chi^2 calculation.  
            overlap_error = overlap_goal/50 #The error portion of chi^2 coming from overlapping valley source time delays will be devided by this number.
            limit_array_plane_azimuth_range = False #Should be seen as a temporary test.  Doesn't use any errors and isn't in standard chi^2 format.
            allowed_array_plane_azimuth_range = 20 #plus or minus this from East is not impacted by weighting. 

            #Limits 
            initial_step_x = 0.75 #m
            initial_step_y = 0.75 #m
            initial_step_z = 0.5 #m
            initial_step_cable_delay = 0.25 #ns
            cable_delay_guess_range = 3 #ns
            antenna_position_guess_range_x = 5#4#2#4 #Limit to how far from input phase locations to limit the parameter space to
            antenna_position_guess_range_y = 5#4#2#7 #Limit to how far from input phase locations to limit the parameter space to
            antenna_position_guess_range_z = 5#2#3 #Limit to how far from input phase locations to limit the parameter space to

            #Manually shifting input of antenna 0 around so that I can find a fit that has all of its baselines visible for valley sources. 
            manual_offset_ant0_x = 0#14
            manual_offset_ant0_y = 0#-2.7
            manual_offset_ant0_z = 0#-17

            manual_offset_ant1_x = -1#0    + manual_offset_ant0_x
            manual_offset_ant1_y = 5#-2   + manual_offset_ant0_y
            manual_offset_ant1_z = 0#0    + manual_offset_ant0_z

            manual_offset_ant2_x = 0#0    + manual_offset_ant0_x
            manual_offset_ant2_y = -5#-4   + manual_offset_ant0_y
            manual_offset_ant2_z = 12#0    + manual_offset_ant0_z

            manual_offset_ant3_x = -3#0    + manual_offset_ant0_x
            manual_offset_ant3_y = 0#0    + manual_offset_ant0_y
            manual_offset_ant3_z = 3#-6   + manual_offset_ant0_z


            fix_ant0_x = True
            fix_ant0_y = True
            fix_ant0_z = True
            fix_ant1_x = False
            fix_ant1_y = False
            fix_ant1_z = False
            fix_ant2_x = False
            fix_ant2_y = False
            fix_ant2_z = False
            fix_ant3_x = False
            fix_ant3_y = False
            fix_ant3_z = False
            fix_cable_delay0 = True
            fix_cable_delay1 = False
            fix_cable_delay2 = False
            fix_cable_delay3 = False
            '''
            antennas_phase_hpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-39.493623, -4.905741, 14.698088], 2 : [-12.239970, -51.023459, 3.504483], 3 : [-37.662065, -38.394831, 10.386077]}
            antennas_phase_hpol_hesse = {0 : [0.750000, 0.750000, 0.500000], 1 : [1.981312, 0.439145, 7.869927], 2 : [0.222825, 0.508381, 7.186704], 3 : [0.225246, 0.502959, 6.634587]}
            antennas_phase_vpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-39.493635, -5.121617, 14.698087], 2 : [-12.425378, -50.901975, 7.789672], 3 : [-37.428109, -39.320700, 11.755655]}
            antennas_phase_vpol_hesse = {0 : [0.750000, 0.750000, 0.500000], 1 : [7.476337, 0.667707, 6.331664], 2 : [0.303953, 0.562640, 7.032839], 3 : [0.319401, 0.566975, 5.809684]}
    elif deploy_index >= 23:
        # This utilizes the google earth elevation profile data for relative positions, but utilizes the absolute elevation value given by the photo_gps.py script for antenna 0.
        #antennas_physical_latlon = {0:origin,1:(37.5892, -118.2380, 3890.77),2:(37.588909, -118.237719, 3881.02),3:(37.5889210, -118.2379850, 3887.42)} #ORIGINAL VALUES FROM GOOGLE MAPS AND ESTIMATES
        origin = loadAntennaZeroLocation(deploy_index = deploy_index)
        print('Antenna Physical location elevations from plane fit to gps coordinates from photos with OnePlus 6t interpreted as WGS84')

        original_z = 3875.53
        phone_z = 3852.842222


        antennas_physical_latlon =  {0:origin,1:(37.5892, -118.2380, 3890.77 - original_z + phone_z),2:(37.588909, -118.237719, 3881.02 - original_z + phone_z),3:(37.5889210, -118.2379850, 3887.42 - original_z + phone_z)} 
        antennas_physical = {}

        for key, location in antennas_physical_latlon.items():
            antennas_physical[key] = pm.geodetic2enu(location[0],location[1],location[2],origin[0],origin[1],origin[2])
        #Errors not currently used.
        if deploy_index == 23:
            print('Using best guess physical as both phase locations as well!')
            antennas_phase_vpol = {0 : [antennas_physical[0][0],antennas_physical[0][1],antennas_physical[0][2]], 1 : [antennas_physical[1][0],antennas_physical[1][1],antennas_physical[1][2]], 2 : [antennas_physical[2][0],antennas_physical[2][1],antennas_physical[2][2]], 3 : [antennas_physical[3][0],antennas_physical[3][1],antennas_physical[3][2]]}
            antennas_phase_vpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.000000, 0.000000, 0.000000], 2 : [0.000000, 0.000000, 0.000000], 3 : [0.000000, 0.000000, 0.000000]}
            antennas_phase_hpol = {0 : [antennas_physical[0][0],antennas_physical[0][1],antennas_physical[0][2]], 1 : [antennas_physical[1][0],antennas_physical[1][1],antennas_physical[1][2]], 2 : [antennas_physical[2][0],antennas_physical[2][1],antennas_physical[2][2]], 3 : [antennas_physical[3][0],antennas_physical[3][1],antennas_physical[3][2]]}
            antennas_phase_hpol_hesse = {0 : [0.000000, 0.000000, 0.000000], 1 : [0.000000, 0.000000, 0.000000], 2 : [0.000000, 0.000000, 0.000000], 3 : [0.000000, 0.000000, 0.000000]}
        elif deploy_index == 24:
            #Made based of of khsv signal + 'Miller Substation','Tonopah AFS GATR Site' with unkown source directions.  Only works for antennas 0,1,3
            #antennas_phase_hpol = {0 : [0.000000, 0.000000, -4.990390], 1 : [-32.664553, -13.694597, 16.364447], 2 : [-8.660638, -44.533474, 5.489838], 3 : [-31.208945, -45.179683, 15.312945]}
            antennas_phase_hpol = {0 : [0.000000, 0.000000, -4.990390], 1 : [-32.664553, -13.694597, 20.239900], 2 : [-8.660638, -44.533474, 5.489838], 3 : [-31.208945, -45.179683, 15.312945]} #edited antenna 1 z to start where vpol was found to be. 
            antennas_phase_vpol = {0 : [0.000000, 0.000000, -5.000000], 1 : [-32.735165, -13.434077, 20.239900], 2 : [-8.660638, -44.533474, 5.489838], 3 : [-30.927869, -44.407966, 15.259098]}

            antennas_phase_hpol_hesse = {0 : [2.000000, 2.000000, 0.000000], 1 : [0.000000, 0.000000, 0.000000], 2 : [2.000000, 2.000000, 0.750000], 3 : [0.000000, 0.000000, 0.000000]}
            antennas_phase_vpol_hesse = {0 : [2.000000, 2.000000, 0.376409], 1 : [0.040986, 0.049558, 0.314455], 2 : [2.000000, 2.000000, 0.750000], 3 : [0.096819, 0.165549, 2.221534]}

            '''
            antennas_phase_vpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-33.188229, -13.605917, 15.280357], 2 : [-8.660638, -44.533474, 5.489838], 3 : [-31.142426, -44.937935, 17.380436]}
            antennas_phase_hpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-32.980772, -13.604003, 21.074896], 2 : [-8.660638, -44.533474, 5.489838], 3 : [-31.619148, -44.744242, 11.074111]}
            antennas_phase_vpol_hesse = {0 : [2.000000, 2.000000, 0.750000], 1 : [0.000000, 0.000000, 0.000000], 2 : [2.000000, 2.000000, 0.750000], 3 : [0.000000, 0.000000, 0.000000]}
            antennas_phase_hpol_hesse = {0 : [2.000000, 2.000000, 0.750000], 1 : [0.000300, 0.000360, 0.001686], 2 : [2.000000, 2.000000, 0.750000], 3 : [0.040703, 0.210699, 0.156562]}

            cable_delays_vpol = numpy.array([13.115628,15.781942,11.090487,10.848566])
            cable_delays_vpol_hesse = numpy.array([0.500000,0.000000,0.500000,0.000000])


            cable_delays_hpol = numpy.array([7.901212,11.040073,0.000000,6.786517])
            cable_delays_hpol_hesse = numpy.array([0.500000,0.000796,0.500000,0.249012])

            '''
        elif deploy_index == 25:
            #Starting from 24, but with more sources.  Still limited to 3 antennas. 
            '''
            ------------------------------------------------------------------
            | FCN = 0.0003234               |     Ncalls=931 (931 total)     |
            | EDM = 8.84e-05 (Goal: 0.0002) |            up = 1.0            |
            ------------------------------------------------------------------
            |  Valid Min.   | Valid Param.  | Above EDM | Reached call limit |
            ------------------------------------------------------------------
            |     True      |     True      |   False   |       False        |
            ------------------------------------------------------------------
            | Hesse failed  |   Has cov.    | Accurate  | Pos. def. | Forced |
            ------------------------------------------------------------------
            |     False     |     True      |   False   |   False   |  True  |
            ------------------------------------------------------------------
            --------------------------------------------------------------------------------------------------
            |   | Name         |   Value   | Hesse Err | Minos Err- | Minos Err+ | Limit-  | Limit+  | Fixed |
            --------------------------------------------------------------------------------------------------
            | 0 | ant0_x       |     0     |     2     |            |            |   -10   |   10    |  yes  |
            | 1 | ant0_y       |     0     |     2     |            |            |   -10   |   10    |  yes  |
            | 2 | ant0_z       |    0.0    |    0.8    |            |            |   -5    |    5    |  yes  |
            | 3 | ant1_x       |   -35.6   |    2.6    |    -3.7    |    13.1    |-43.4936 |-23.4936 |       |
            | 4 | ant1_y       |    -18    |     4     |     -4     |     16     |-22.2161 |-2.21612 |       |
            | 5 | ant1_z       |    20     |     6     |    -10     |     5      | 10.2399 | 20.2399 |       |
            | 6 | ant2_x       |   -8.7    |    2.0    |            |            |-18.6606 | 1.33936 |  yes  |
            | 7 | ant2_y       |   -44.5   |    2.0    |            |            |-54.5335 |-34.5335 |  yes  |
            | 8 | ant2_z       |    5.5    |    0.8    |            |            |0.489838 | 10.4898 |  yes  |
            | 9 | ant3_x       |   -30.0   |    2.6    |    -7.8    |    10.9    |-42.1681 |-22.1681 |       |
            | 10| ant3_y       |    -43    |     4     |    -10     |     10     |-53.2008 |-33.2008 |       |
            | 11| ant3_z       |    13     |     5     |     -7     |     4      | 6.88977 | 16.8898 |       |
            | 12| cable_delay0 |    7.9    |    0.1    |            |            | 4.90121 | 10.9012 |  yes  |
            | 13| cable_delay1 |   11.2    |    3.0    |    -3.7    |    3.7     | 9.00991 | 15.0099 |       |
            | 14| cable_delay2 |    0.0    |    0.1    |            |            |   -3    |    3    |  yes  |
            | 15| cable_delay3 |    8.4    |    4.5    |    -3.9    |    2.1     | 4.52048 | 10.5205 |       |
            --------------------------------------------------------------------------------------------------


            Copy-Paste Prints:
            ------------

            antennas_phase_hpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-35.627008, -18.143051, 20.169783], 2 : [-8.660638, -44.533474, 5.489838], 3 : [-30.001992, -43.078926, 12.520058]}
            antennas_phase_hpol_hesse = {0 : [2.000000, 2.000000, 0.750000], 1 : [13.102980, 14.054989, 5.158160], 2 : [2.000000, 2.000000, 0.750000], 3 : [10.944684, 15.051348, 6.694572]}

            cable_delays_hpol = numpy.array([7.901212,11.157171,0.000000,8.444916])
            cable_delays_hpol_hesse = numpy.array([0.100000,3.663444,0.100000,3.264144])
            Code completed.
            '''
            antennas_phase_hpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-35.627008, -18.143051, 20.169783], 2 : [-8.660638, -44.533474, 5.489838], 3 : [-30.001992, -43.078926, 12.520058]}
            antennas_phase_hpol_hesse = {0 : [2.000000, 2.000000, 0.750000], 1 : [13.102980, 14.054989, 5.158160], 2 : [2.000000, 2.000000, 0.750000], 3 : [10.944684, 15.051348, 6.694572]}

            #Vpol not calculated, based on hpol.
            antennas_phase_vpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-35.627008, -18.143051, 20.169783], 2 : [-8.660638, -44.533474, 5.489838], 3 : [-30.001992, -43.078926, 12.520058]}
            antennas_phase_vpol_hesse = {0 : [2.000000, 2.000000, 0.750000], 1 : [13.102980, 14.054989, 5.158160], 2 : [2.000000, 2.000000, 0.750000], 3 : [10.944684, 15.051348, 6.694572]}

        elif deploy_index == 26:
            #Starting from 25, with more sources, and using cor map peaks instead of strips.  Ultimately the same calibration but more refined.

            # ------------------------------------------------------------------
            # | FCN = 0                       |      Ncalls=40 (40 total)      |
            # | EDM = 0 (Goal: 0.0002)        |            up = 1.0            |
            # ------------------------------------------------------------------
            # |  Valid Min.   | Valid Param.  | Above EDM | Reached call limit |
            # ------------------------------------------------------------------
            # |     False     |     True      |   False   |       False        |
            # ------------------------------------------------------------------
            # | Hesse failed  |   Has cov.    | Accurate  | Pos. def. | Forced |
            # ------------------------------------------------------------------
            # |     True      |     True      |   False   |   False   | False  |
            # ------------------------------------------------------------------
            # --------------------------------------------------------------------------------------------------
            # |   | Name         |   Value   | Hesse Err | Minos Err- | Minos Err+ | Limit-  | Limit+  | Fixed |
            # --------------------------------------------------------------------------------------------------
            # | 0 | ant0_x       |    0.0    |    0.5    |            |            |   -2    |    2    |  yes  |
            # | 1 | ant0_y       |    0.0    |    0.5    |            |            |   -2    |    2    |  yes  |
            # | 2 | ant0_z       |    0.0    |    0.5    |            |            |   -2    |    2    |  yes  |
            # | 3 | ant1_x       | -3.5535e1 | 0.0000e1  |            |            | -37.627 | -33.627 |       |
            # | 4 | ant1_y       | -1.8062e1 | 0.0000e1  |            |            |-20.1431 |-16.1431 |       |
            # | 5 | ant1_z       | 2.0166e1  | 0.0000e1  |            |            | 18.1698 | 22.1698 |       |
            # | 6 | ant2_x       |   -8.7    |    0.5    |            |            |-10.6606 |-6.66064 |  yes  |
            # | 7 | ant2_y       |   -44.5   |    0.5    |            |            |-46.5335 |-42.5335 |  yes  |
            # | 8 | ant2_z       |    5.5    |    0.5    |            |            | 3.48984 | 7.48984 |  yes  |
            # | 9 | ant3_x       | -2.991e1  |  0.000e1  |            |            | -32.002 | -28.002 |       |
            # | 10| ant3_y       | -4.3007e1 | 0.0000e1  |            |            |-45.0789 |-41.0789 |       |
            # | 11| ant3_z       | 1.2424e1  | 0.0000e1  |            |            | 10.5201 | 14.5201 |       |
            # | 12| cable_delay0 |    7.9    |    0.1    |            |            | 4.90121 | 10.9012 |  yes  |
            # | 13| cable_delay1 | 1.1157e1  | 0.0000e1  |            |            | 8.15717 | 14.1572 |       |
            # | 14| cable_delay2 |    0.0    |    0.1    |            |            |   -3    |    3    |  yes  |
            # | 15| cable_delay3 |  8.4449   |  0.0000   |            |            | 5.44492 | 11.4449 |       |
            # --------------------------------------------------------------------------------------------------


            # Copy-Paste Prints:
            # ------------

            antennas_phase_hpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-35.535249, -18.061861, 20.165817], 2 : [-8.660638, -44.533474, 5.489838], 3 : [-29.909783, -43.007372, 12.424257]}
            antennas_phase_hpol_hesse = {0 : [0.500000, 0.500000, 0.500000], 1 : [0.000000, 0.000000, 0.000000], 2 : [0.500000, 0.500000, 0.500000], 3 : [0.000000, 0.000000, 0.000000]}

            antennas_phase_vpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-35.535249, -18.061861, 20.165817], 2 : [-8.660638, -44.533474, 5.489838], 3 : [-29.909783, -43.007372, 12.424257]}
            antennas_phase_vpol_hesse = {0 : [0.500000, 0.500000, 0.500000], 1 : [0.000000, 0.000000, 0.000000], 2 : [0.500000, 0.500000, 0.500000], 3 : [0.000000, 0.000000, 0.000000]}
        elif deploy_index == 27:
            # From 26 using known sources A,B,C,D, and TV.  Using only antennas 0,1,3, hpol only.
            # ------------------------------------------------------------------
            # | FCN = 3.125                   |     Ncalls=607 (607 total)     |
            # | EDM = 9.57e-08 (Goal: 0.0002) |            up = 1.0            |
            # ------------------------------------------------------------------
            # |  Valid Min.   | Valid Param.  | Above EDM | Reached call limit |
            # ------------------------------------------------------------------
            # |     True      |     True      |   False   |       False        |
            # ------------------------------------------------------------------
            # | Hesse failed  |   Has cov.    | Accurate  | Pos. def. | Forced |
            # ------------------------------------------------------------------
            # |     False     |     True      |   True    |   True    | False  |
            # ------------------------------------------------------------------
            # --------------------------------------------------------------------------------------------------
            # |   | Name         |   Value   | Hesse Err | Minos Err- | Minos Err+ | Limit-  | Limit+  | Fixed |
            # --------------------------------------------------------------------------------------------------
            # | 0 | ant0_x       |    0.0    |    0.5    |            |            |   -2    |    2    |  yes  |
            # | 1 | ant0_y       |    0.0    |    0.5    |            |            |   -2    |    2    |  yes  |
            # | 2 | ant0_z       |    0.0    |    0.5    |            |            |   -2    |    2    |  yes  |
            # | 3 | ant1_x       |  -37.28   |   0.16    |   -0.16    |    0.33    |-37.5352 |-33.5352 |       |
            # | 4 | ant1_y       |  -18.72   |   0.21    |   -0.22    |    0.22    |-20.0619 |-16.0619 |       |
            # | 5 | ant1_z       |18.165817004|3.692450139|-0.000000004|2.472806550 | 18.1658 | 22.1658 |       |
            # | 6 | ant2_x       |   -8.7    |    0.5    |            |            |-10.6606 |-6.66064 |  yes  |
            # | 7 | ant2_y       |   -44.5   |    0.5    |            |            |-46.5335 |-42.5335 |  yes  |
            # | 8 | ant2_z       |    5.5    |    0.5    |            |            | 3.48984 | 7.48984 |  yes  |
            # | 9 | ant3_x       |   -30.0   |    0.8    |    -0.9    |    0.7     |-31.9098 |-27.9098 |       |
            # | 10| ant3_y       |  -43.53   |   0.27    |   -0.27    |    0.27    |-45.0074 |-41.0074 |       |
            # | 11| ant3_z       |   10.4    |    3.2    |    -3.2    |    2.4     | 10.4243 | 14.4243 |       |
            # | 12| cable_delay0 |    7.9    |    0.1    |            |            | 4.90121 | 10.9012 |  yes  |
            # | 13| cable_delay1 |    8.2    |    1.0    |    -1.0    |    0.9     | 8.15717 | 14.1572 |       |
            # | 14| cable_delay2 |    0.0    |    0.1    |            |            |   -3    |    3    |  yes  |
            # | 15| cable_delay3 |    9.6    |    2.1    |    -2.5    |    1.8     | 5.44492 | 11.4449 |       |
            # --------------------------------------------------------------------------------------------------


            # Copy-Paste Prints:
            # ------------

            antennas_phase_hpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-37.281439, -18.720550, 18.165817], 2 : [-8.660638, -44.533474, 5.489838], 3 : [-30.032919, -43.530065, 10.424257]}
            antennas_phase_hpol_hesse = {0 : [0.500000, 0.500000, 0.500000], 1 : [0.161029, 0.214942, 3.674703], 2 : [0.500000, 0.500000, 0.500000], 3 : [0.825754, 0.271855, 3.198833]}

            antennas_phase_vpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-37.281439, -18.720550, 18.165817], 2 : [-8.660638, -44.533474, 5.489838], 3 : [-30.032919, -43.530065, 10.424257]}
            antennas_phase_vpol_hesse = {0 : [0.500000, 0.500000, 0.500000], 1 : [0.161029, 0.214942, 3.674703], 2 : [0.500000, 0.500000, 0.500000], 3 : [0.825754, 0.271855, 3.198833]}

    return antennas_physical, antennas_phase_hpol, antennas_phase_vpol

def loadCableDelays(deploy_index=default_deploy,return_raw=False):
    '''
    This are calculated using group_delay.py via the group delay.  They correspond to the length of the LMR400
    cable that extends from the observatory to the antennas and accounts for the majority of systematic delay
    between signals.  This should be accounted for in interferometric uses.
    '''

    if deploy_index == 0:
        cable_delays =  {'hpol': numpy.array([0.0, 0.0, 0.0, 0.0]), \
                         'vpol': numpy.array([0.0, 0.0, 0.0, 0.0])}
    elif deploy_index == 1:
        cable_delays =  {'hpol': numpy.array([423.37836156, 428.43979143, 415.47714969, 423.58803498]), \
                         'vpol': numpy.array([428.59277751, 430.16685915, 423.56765695, 423.50469285])}
    elif deploy_index == 2:
        cable_delays =  {'hpol': numpy.array([423.37836156, 428.43979143, 415.47714969, 423.58803498]), \
                         'vpol': numpy.array([428.59277751, 430.16685915, 423.56765695, 423.50469285])}

    elif deploy_index == 3:
        #Here I am just rerunning the time delays from the pulser, and also letting the cable delays vary.  I am only doing a simple chi^2 (Just the adjustedChi^2)
        cable_delays =  {'hpol' : numpy.array([ 9.716096686691788 , 6.557263164293925 , 1.338560237462631 , 7.988215967106549 ]) + 415.47714969, \
                         'vpol' : numpy.array([ 15.427099049222033 , 12.16895487865136 , 9.310628362153283 , 8.630112284474672 ]) + 423.56765695}





        # pulser_locations_ENU['hpol'] = {'run1507':[259.417378, -353.989882, -88.125921], 'run1509':[1129.874543, -528.948053, -160.527267], 'run1511':[189.018118, 338.618832, -44.960478]}
        # pulser_locations_ENU['hpol_hesse_error'] = {'run1507':[0.010000, 0.010000, 0.010000], 'run1509':[0.010000, 0.010000, 0.010000], 'run1511':[0.010000, 0.010000, 0.010000]}
    elif deploy_index == 11:
        cable_delays =  {'hpol' : numpy.array([7.901212,12.248939,10.000000,18.110885]) + 415.47714969, \
                         'vpol' : numpy.array([13.115628,8.986282,12.530756,12.041758]) + 423.56765695}

        #cable_delays_vpol_hesse = numpy.array([0.500000,3.390690,0.407566,2.505386])
        #cable_delays_hpol_hesse = numpy.array([0.500000,5.916741,0.885048,1.197699])

    elif deploy_index == 14:
        cable_delays =  {   'hpol':     numpy.array([3.451618,7.826725,8.083331,7.546091]), \
                            'vpol':     numpy.array([10.914086,7.477607,16.681922,7.471445])}
    elif deploy_index == 15:
        # cable_delays_hpol = numpy.array([17.809761,3.103724,9.518142,7.911402])
        # cable_delays_hpol_hesse = numpy.array([17.980015,17.603312,15.514188,4.179351])
        # cable_delays_vpol = numpy.array([21.671835,4.689877,17.031305,7.945473])
        # cable_delays_vpol_hesse = numpy.array([0.746272,19.473516,0.748978,0.742503])

        cable_delays =  {   'hpol':     numpy.array([17.809761,3.103724,9.518142,7.911402]), \
                            'vpol':     numpy.array([21.671835,4.689877,17.031305,7.945473])}
    elif deploy_index == 17:
        cable_delays =  {   'hpol':     numpy.array([2.901715,11.148590,3.695444,13.082649]), \
                            'vpol':     numpy.array([8.324117,19.208286,12.596147,12.946409])}

    elif deploy_index == 19:
        cable_delays =  {   'hpol':     numpy.array([12.890893,7.962642,5.000000,6.202864]), \
                            'vpol':     numpy.array([15.835665,9.689739,13.090459,5.637693])}
    elif deploy_index == 20:
        cable_delays =  {   'hpol':     numpy.array([12.094088,3.168013,9.118150,7.905168]), \
                            'vpol':     numpy.array([18.743829,4.867362,16.899300,8.054707])}

    elif deploy_index == 22:
        cable_delays =  {   'hpol':     numpy.array([7.901212,15.961225,2.999975,11.110831]), \
                            'vpol':     numpy.array([13.115628,17.688231,11.090487,11.027541])}
        #cable_delays_hpol_hesse = numpy.array([0.250000,3.177605,4.465699,4.766975])
        #cable_delays_vpol_hesse = numpy.array([0.250000,5.576029,4.727528,5.035706])
    elif deploy_index == 23:
        #Made based of of khsv signal + 'Miller Substation','Tonopah AFS GATR Site' with unkown source directions.  Only works for antennas 0,1,3
        cable_delays =  {   'hpol':     numpy.array([7.901212,12.009911,0.000000,7.520476]), \
                            'vpol':     numpy.array([13.115628,16.688239,11.090487,10.646654])}
        # antennas_phase_vpol = {0 : [0.000000, 0.000000, -5.000000], 1 : [-32.735165, -13.434077, 20.239900], 2 : [-8.660638, -44.533474, 5.489838], 3 : [-30.927869, -44.407966, 15.259098]}
        # antennas_phase_vpol_hesse = {0 : [2.000000, 2.000000, 0.376409], 1 : [0.040986, 0.049558, 0.314455], 2 : [2.000000, 2.000000, 0.750000], 3 : [0.096819, 0.165549, 2.221534]}

        # cable_delays_hpol = numpy.array([7.901212,12.009911,0.000000,7.520476])
        # cable_delays_hpol_hesse = numpy.array([0.500000,0.000000,0.000000,0.000000])
    elif deploy_index == 24:
        cable_delays =  {   'hpol':     numpy.array([7.901212,11.040073,0.000000,6.786517]), \
                            'vpol':     numpy.array([13.115628,15.781942,11.090487,10.848566])}
        # cable_delays_vpol_hesse = numpy.array([0.500000,0.000000,0.500000,0.000000])
        # cable_delays_hpol_hesse = numpy.array([0.500000,0.000796,0.500000,0.249012])

    elif deploy_index == 25:
        #Starting from 24, but with more sources.  Still limited to 3 antennas. 
        '''
        ------------------------------------------------------------------
        | FCN = 0.0003234               |     Ncalls=931 (931 total)     |
        | EDM = 8.84e-05 (Goal: 0.0002) |            up = 1.0            |
        ------------------------------------------------------------------
        |  Valid Min.   | Valid Param.  | Above EDM | Reached call limit |
        ------------------------------------------------------------------
        |     True      |     True      |   False   |       False        |
        ------------------------------------------------------------------
        | Hesse failed  |   Has cov.    | Accurate  | Pos. def. | Forced |
        ------------------------------------------------------------------
        |     False     |     True      |   False   |   False   |  True  |
        ------------------------------------------------------------------
        --------------------------------------------------------------------------------------------------
        |   | Name         |   Value   | Hesse Err | Minos Err- | Minos Err+ | Limit-  | Limit+  | Fixed |
        --------------------------------------------------------------------------------------------------
        | 0 | ant0_x       |     0     |     2     |            |            |   -10   |   10    |  yes  |
        | 1 | ant0_y       |     0     |     2     |            |            |   -10   |   10    |  yes  |
        | 2 | ant0_z       |    0.0    |    0.8    |            |            |   -5    |    5    |  yes  |
        | 3 | ant1_x       |   -35.6   |    2.6    |    -3.7    |    13.1    |-43.4936 |-23.4936 |       |
        | 4 | ant1_y       |    -18    |     4     |     -4     |     16     |-22.2161 |-2.21612 |       |
        | 5 | ant1_z       |    20     |     6     |    -10     |     5      | 10.2399 | 20.2399 |       |
        | 6 | ant2_x       |   -8.7    |    2.0    |            |            |-18.6606 | 1.33936 |  yes  |
        | 7 | ant2_y       |   -44.5   |    2.0    |            |            |-54.5335 |-34.5335 |  yes  |
        | 8 | ant2_z       |    5.5    |    0.8    |            |            |0.489838 | 10.4898 |  yes  |
        | 9 | ant3_x       |   -30.0   |    2.6    |    -7.8    |    10.9    |-42.1681 |-22.1681 |       |
        | 10| ant3_y       |    -43    |     4     |    -10     |     10     |-53.2008 |-33.2008 |       |
        | 11| ant3_z       |    13     |     5     |     -7     |     4      | 6.88977 | 16.8898 |       |
        | 12| cable_delay0 |    7.9    |    0.1    |            |            | 4.90121 | 10.9012 |  yes  |
        | 13| cable_delay1 |   11.2    |    3.0    |    -3.7    |    3.7     | 9.00991 | 15.0099 |       |
        | 14| cable_delay2 |    0.0    |    0.1    |            |            |   -3    |    3    |  yes  |
        | 15| cable_delay3 |    8.4    |    4.5    |    -3.9    |    2.1     | 4.52048 | 10.5205 |       |
        --------------------------------------------------------------------------------------------------


        Copy-Paste Prints:
        ------------

        antennas_phase_hpol = {0 : [0.000000, 0.000000, 0.000000], 1 : [-35.627008, -18.143051, 20.169783], 2 : [-8.660638, -44.533474, 5.489838], 3 : [-30.001992, -43.078926, 12.520058]}
        antennas_phase_hpol_hesse = {0 : [2.000000, 2.000000, 0.750000], 1 : [13.102980, 14.054989, 5.158160], 2 : [2.000000, 2.000000, 0.750000], 3 : [10.944684, 15.051348, 6.694572]}

        cable_delays_hpol = numpy.array([7.901212,11.157171,0.000000,8.444916])
        cable_delays_hpol_hesse = numpy.array([0.100000,3.663444,0.100000,3.264144])
        Code completed.
        '''

        #Vpol taken from 24

        cable_delays =  {   'hpol':      numpy.array([7.901212,11.157171,0.000000,8.444916]), \
                            'vpol':     numpy.array([13.115628,15.781942,11.090487,10.848566])}
    elif deploy_index == 26:
        cable_delays =  {   'hpol':     numpy.array([7.901212,11.157171,0.000000,8.444916]), \
                            'vpol':     numpy.array([13.115628,15.781942,11.090487,10.848566])}
    elif deploy_index == 27:
        cable_delays =  {   'hpol':     numpy.array([7.901212,8.157171,0.000000,9.591437]), \
                            'vpol':     numpy.array([13.115628,15.781942,11.090487,10.848566])}
        
        # cable_delays_hpol = 
        # cable_delays_hpol_hesse = numpy.array([0.100000,0.951527,0.100000,2.137623])

    else:
        print('Using unmodified cable delays.')
        cable_delays =  {'hpol': numpy.array([423.37836156, 428.43979143, 415.47714969, 423.58803498]), \
                         'vpol': numpy.array([428.59277751, 430.16685915, 423.56765695, 423.50469285])}

    if return_raw == False:
        min_delay = min((min(cable_delays['hpol']),min(cable_delays['vpol'])))
        cable_delays['hpol'] -= min_delay
        cable_delays['vpol'] -= min_delay

    return cable_delays


def loadPulserPolarizations():
    '''
    Loads the polarizations used in each pulsing run.  Options are hpol, vpol, or both

    This won't make sense for data taken in the October 2019 pulsing run.   Will need higher
    resolution, i.e. time of day spans rather than run labels. 
    '''
    pulser_pol = {}

    #Trip 1
    #Day 1
    #Site 1 37.4671° N, 117.7525° W
    pulser_pol['run734'] = 'vpol'
    pulser_pol['run735'] = 'vpol'
    pulser_pol['run736'] = 'both'
    pulser_pol['run737'] = 'hpol'
    #Site 2 37° 34' 30.8" N, 117° 54' 31.7" W
    pulser_pol['run739'] = 'both'
    pulser_pol['run740'] = 'hpol'

    #Day 2 37° 34' 30.8" N 117° 54' 31.7" W
    pulser_pol['run746'] = 'both'
    pulser_pol['run747'] = 'vpol'

    #Day 3 37° 35’ 54.82” N 117° 59’ 37.97” W
    pulser_pol['run756'] = 'hpol'
    pulser_pol['run757'] = 'hpol'

    #Day 4
    #Site 1 37° 43' 36.40" N 118° 2' 3.40" W
    pulser_pol['run762'] = 'vpol'
    pulser_pol['run763'] = 'vpol'
    pulser_pol['run764'] = 'vpol'
    #Site2 37° 25' 32.85" N 117° 37' 57.55" W
    pulser_pol['run766'] = 'vpol'
    pulser_pol['run767'] = 'vpol'
    pulser_pol['run768'] = 'vpol'
    pulser_pol['run769'] = 'vpol'
    pulser_pol['run770'] = 'hpol'

    #Day 5 37° 35' 9.27" N 118° 14' 0.73" W
    pulser_pol['run781'] = 'hpol'
    pulser_pol['run782'] = 'hpol'
    pulser_pol['run783'] = 'hpol'
    pulser_pol['run784'] = 'hpol'
    pulser_pol['run785'] = 'hpol'
    pulser_pol['run786'] = 'hpol'
    pulser_pol['run787'] = 'hpol'
    pulser_pol['run788'] = 'hpol'
    pulser_pol['run789'] = 'hpol'
    pulser_pol['run790'] = 'vpol'

    #Day 6 37° 35.166' N 118° 13.990' W 
    pulser_pol['run792'] = 'vpol'
    pulser_pol['run793'] = 'vpol'

    #Trip 2
    #Site 1a 37.5859361° N 118.233841 W 
    pulser_pol['run1506'] = 'hpol'
    pulser_pol['run1507'] = 'hpol'

    #Site 2 37.58568583° N 118.225942 W 
    pulser_pol['run1508'] = 'both'
    pulser_pol['run1509'] = 'both'

    #Site 3 37.592001861° N 118.2354480278 W 
    pulser_pol['run1511'] = 'both'
    
    
    return pulser_pol   

def loadPulserLocations(deploy_index=default_deploy):
    '''
    Loads the latitude,longtidue,elevation locations of the antennas.
    See loadPulserLocationsENU for these locations converted to
    be relative to antenna 0.

    These are repeated if that pulser is used for multiply runs. 

    Note that deploy index here mostly just chooses in newer runs which GPS elevation to use.
    '''
    pulser_locations = {}

    #Day 1
    #Site 1 37.4671° N, 117.7525° W
    pulser_locations['run734'] = (37.4671,-117.7525,1763.0)
    pulser_locations['run735'] = (37.4671,-117.7525,1763.0)
    pulser_locations['run736'] = (37.4671,-117.7525,1763.0)
    pulser_locations['run737'] = (37.4671,-117.7525,1763.0)
    #Site 2 37° 34' 30.8" N, 117° 54' 31.7" W
    pulser_locations['run739'] = (37.575225,-117.908807,1646.0)
    pulser_locations['run740'] = (37.575225,-117.908807,1646.0)

    #Day 2 37° 34' 30.8" N 117° 54' 31.7" W
    pulser_locations['run746'] = (37.575225,-117.908807,1646.0)
    pulser_locations['run747'] = (37.575225,-117.908807,1646.0)

    #Day 3 37° 35’ 54.82” N 117° 59’ 37.97” W
    pulser_locations['run756'] = (37.598554,-117.993874,1501.0)
    pulser_locations['run757'] = (37.598554,-117.993874,1501.0)

    #Day 4
    #Site 1 37° 43' 36.40" N 118° 2' 3.40" W
    pulser_locations['run762'] = (37.726735,-118.034261,1542.0)
    pulser_locations['run763'] = (37.726735,-118.034261,1542.0)
    pulser_locations['run764'] = (37.726735,-118.034261,1542.0)
    #Site2 37° 25' 32.85" N 117° 37' 57.55" W
    pulser_locations['run766'] = (37.425788,-117.632653,2021.0)
    pulser_locations['run767'] = (37.425788,-117.632653,2021.0)
    pulser_locations['run768'] = (37.425788,-117.632653,2021.0)
    pulser_locations['run769'] = (37.425788,-117.632653,2021.0)
    pulser_locations['run770'] = (37.425788,-117.632653,2021.0)

    #Day 5 37° 35' 9.27" N 118° 14' 0.73" W
    pulser_locations['run781'] = (37.585912,-118.233535,3789)
    pulser_locations['run782'] = (37.585912,-118.233535,3789)
    pulser_locations['run783'] = (37.585912,-118.233535,3789)
    pulser_locations['run784'] = (37.585912,-118.233535,3789)
    pulser_locations['run785'] = (37.585912,-118.233535,3789)
    pulser_locations['run786'] = (37.585912,-118.233535,3789)
    pulser_locations['run787'] = (37.585912,-118.233535,3789)
    pulser_locations['run788'] = (37.585912,-118.233535,3789)
    pulser_locations['run789'] = (37.585912,-118.233535,3789)
    pulser_locations['run790'] = (37.585912,-118.233535,3789)

    #Day 6 37° 35.166' N 118° 13.990' W 
    pulser_locations['run792'] = (37.5861,-118.2332,3779.52)
    pulser_locations['run793'] = (37.5861,-118.2332,3779.52)

    if deploy_index <= 9:
        print('Pulser location elevations from Google Earth (approximate WGS84)')
        #Trip 2
        #Site 1  37.5859361 N 118.233918056 W  (37.5859361, -118.233918056)
        #Alt: 3762.9m (GPS)  3789.32 m (MSL) Google Earth: Alt: 3796.284
        pulser_locations['run1504'] = (37.5859361, -118.233918056,3796.284)

        #Site 1a 37.58595472° N 118.233841 W 
        #Alt: 3763.1m (GPS)  3789.53 m (MSL) Google Earth: 3794.76
        pulser_locations['run1506'] = (37.58595472, -118.233841,3794.76)
        pulser_locations['run1507'] = (37.58595472, -118.233841,3794.76)

        #Site 2 37.58568583° N 118.225942 W 
        #Alt: 3690.70m (GPS)  3717.04m (MSL) Google Earth: 3729.228
        pulser_locations['run1508'] = (37.58568583, -118.225942,3729.228)
        pulser_locations['run1509'] = (37.58568583, -118.225942,3729.228)

        #Site 3 37.592001861° N 118.2354480278 W 
        #Alt: 3806.25m (GPS)  3832.55m (MSL) Google Earth: 3827.6784
        pulser_locations['run1511'] = (37.592001861, -118.2354480278,3827.6784)
    elif deploy_index > 9:
        print('Pulser location elevations from GPS (measured WGS84)')
        #Trip 2
        #Site 1  37.5859361 N 118.233918056 W  (37.5859361, -118.233918056)
        #Alt: 3762.9m (GPS)  3789.32 m (MSL) Google Earth: Alt: 3796.284
        pulser_locations['run1504'] = (37.5859361, -118.233918056,3762.9)

        #Site 1a 37.58595472° N 118.233841 W 
        #Alt: 3763.1m (GPS)  3789.53 m (MSL) Google Earth: 3794.76
        pulser_locations['run1506'] = (37.58595472, -118.233841,3763.1)
        pulser_locations['run1507'] = (37.58595472, -118.233841,3763.1)

        #Site 2 37.58568583° N 118.225942 W 
        #Alt: 3690.70m (GPS)  3717.04m (MSL) Google Earth: 3729.228
        pulser_locations['run1508'] = (37.58568583, -118.225942,3690.7)
        pulser_locations['run1509'] = (37.58568583, -118.225942,3690.7)

        #Site 3 37.592001861° N 118.2354480278 W 
        #Alt: 3806.25m (GPS)  3832.55m (MSL) Google Earth: 3827.6784
        pulser_locations['run1511'] = (37.592001861, -118.2354480278,3806.25)


    return pulser_locations    

def loadPulserLocationsENU(deploy_index=default_deploy):
    '''
    Loads the locations of the antennas converted to
    be relative to antenna 0.

    These are repeated if that pulser is used for multiple runs. 

    This is depricated and does not all for the antennas to have different 
    phase centers. loadPulserPhaseLocationsENU is better.
    '''
    pulser_locations_ENU = {}
    pulser_locations = loadPulserLocations(deploy_index=deploy_index)

    origin = loadAntennaZeroLocation(deploy_index=deploy_index)
    print(origin)
    for key, location in pulser_locations.items():
        pulser_locations_ENU[key] = pm.geodetic2enu(location[0],location[1],location[2],origin[0],origin[1],origin[2])
    return pulser_locations_ENU

def loadPulserPhaseLocationsENU(deploy_index=default_deploy):
    '''
    Loads the locations of the antennas converted to
    be relative to antenna 0.

    These are repeated if that pulser is used for multiple runs.  

    The output will be a dictionary with keys 'physical','hpol', and 'vpol'
    corresponding to the best known physical locations, and current best fit
    for phase centers.
    '''
    pulser_locations_ENU = {}
    pulser_locations = loadPulserLocations(deploy_index=deploy_index)

    pulser_locations_ENU['physical'] = {}

    origin = loadAntennaZeroLocation(deploy_index=deploy_index)
    for key, location in pulser_locations.items():
        pulser_locations_ENU['physical'][key] = pm.geodetic2enu(location[0],location[1],location[2],origin[0],origin[1],origin[2])

    if deploy_index <= 9:
        #pulser_locations_ENU['vpol'] = {'run1507':[275.708465, -372.224572, -82.673435], 'run1509':[1027.431897, -492.547030, -155.078725], 'run1511':[178.030733, 331.491744, -39.509867]}
        #pulser_locations_ENU['vpol_hesse_error'] = {'run1507':[1.106217, 1.246325, 2.503419], 'run1509':[5.552711, 2.469107, 5.305297], 'run1511':[1.324100, 2.146287, 2.310413]}
        
        '''
        #These are the ones I got by flipping channel 2
        pulser_locations_ENU['hpol'] = {'run1507':[253.799742, -355.808099, -117.460144], 'run1509':[1137.872525, -534.620695, -189.860634], 'run1511':[117.111896, 303.926298, -74.299903]}                                                         
        pulser_locations_ENU['hpol_hesse_error'] = {'run1507':[0.501879, 0.520719, 1.090585], 'run1509':[2.701943, 1.187494, 3.423798], 'run1511':[2.560162, 6.026819, 3.490432]}
        pulser_locations_ENU['vpol'] = {'run1507':[263.002766, -355.657916, -80.473571], 'run1509':[1067.737570, -511.201739, -152.867512], 'run1511':[179.261666, 338.184460, -37.316588]}
        pulser_locations_ENU['vpol_hesse_error'] = {'run1507':[0.848562, 0.978776, 1.976002], 'run1509':[2.842634, 1.265834, 3.353987], 'run1511':[1.327852, 2.182353, 2.249852]}
        '''

        #These are the ones I got prior to 11/21/2019
        pulser_locations_ENU['hpol'] = {'run1507':[259.417378, -353.989882, -84.468321], 'run1509':[1129.874543, -528.948053, -156.869667], 'run1511':[189.018118, 338.618832, -41.302878]}
        pulser_locations_ENU['hpol_hesse_error'] = {'run1507':[1.335408, 1.471356, 3.081678], 'run1509':[9.068532, 3.966986, 8.780782], 'run1511':[2.157532, 3.556144, 4.533434]}
        pulser_locations_ENU['vpol'] = {'run1507':[271.225702, -362.785806, -75.741218], 'run1509':[1063.720642, -504.948969, -148.130744], 'run1511':[181.798419, 331.680671, -32.583995]}
        pulser_locations_ENU['vpol_hesse_error'] = {'run1507':[1.080508, 1.216558, 2.517439], 'run1509':[5.776634, 2.552221, 5.590785], 'run1511':[1.319455, 2.150750, 2.325213]}

        #pulser_locations_ENU['hpol'] = {'run1507':[265.441241, -366.161638, -91.314401], 'run1509':[1065.399706, -508.295499, -163.706607], 'run1511':[178.535899, 344.684624, -48.158593]}
        #pulser_locations_ENU['hpol_hesse_error'] = {'run1507':[1.384200, 1.534385, 3.015226], 'run1509':[8.512122, 3.788872, 7.223959], 'run1511':[2.282271, 3.801014, 4.190135]}
    elif deploy_index > 9:
        #These are using the physical coordinates and are not calibrated phase center positions.
        print('Using physical location GPS measurements for pulser phase centers.')
        pulser_locations_ENU['hpol'] = {'run1507':pulser_locations_ENU['physical']['run1507'], 'run1509':pulser_locations_ENU['physical']['run1509'], 'run1511':pulser_locations_ENU['physical']['run1511']}
        pulser_locations_ENU['hpol_hesse_error'] = {'run1507':[2, 2, 2], 'run1509':[2, 2, 2], 'run1511':[2, 2, 2]}
        pulser_locations_ENU['vpol'] = {'run1507':pulser_locations_ENU['physical']['run1507'], 'run1509':pulser_locations_ENU['physical']['run1509'], 'run1511':pulser_locations_ENU['physical']['run1511']}
        pulser_locations_ENU['vpol_hesse_error'] = {'run1507':[2, 2, 2], 'run1509':[2, 2, 2], 'run1511':[2, 2, 2]}

    return pulser_locations_ENU



def plotStationAndPulsers(deploy_index=default_deploy,plot_phase=False):
    '''
    Currently only intended to plot the most recent station with the three pulsers that we used for it.
    '''
    antennas_physical, antennas_phase_hpol, antennas_phase_vpol = loadAntennaLocationsENU(deploy_index=deploy_index)

    colors = ['b','g','r','c']
    pulser_colors = ['m','y','k']

    fig = plt.figure()
    fig.canvas.set_window_title('Antenna + Pulser Locations')
    ax = fig.add_subplot(111, projection='3d')

    for i, a in antennas_physical.items():
        ax.scatter(a[0], a[1], a[2], marker='o',color=colors[i],label='Physical %i'%i,alpha=0.8)

    if plot_phase == True:
        for i, a in antennas_phase_hpol.items():
            ax.plot([antennas_physical[i][0],antennas_phase_hpol[i][0]],[antennas_physical[i][1],antennas_phase_hpol[i][1]],[antennas_physical[i][2],antennas_phase_hpol[i][2]],color=colors[i],linestyle='--',alpha=0.5)
            ax.scatter(a[0], a[1], a[2], marker='*',color=colors[i],label='%s Phase Center %i'%('Hpol', i),alpha=0.8)
        for i, a in antennas_phase_vpol.items():
            ax.plot([antennas_physical[i][0],antennas_phase_vpol[i][0]],[antennas_physical[i][1],antennas_phase_vpol[i][1]],[antennas_physical[i][2],antennas_phase_vpol[i][2]],color=colors[i],linestyle='--',alpha=0.5)
            ax.scatter(a[0], a[1], a[2], marker='^',color=colors[i],label='%s Phase Center %i'%('Vpol', i),alpha=0.8)




    pulser_locations = loadPulserPhaseLocationsENU()
    for site, key in enumerate(['run1507','run1509','run1511']):
        site += 1
        ax.scatter(pulser_locations['physical'][key][0], pulser_locations['physical'][key][1], pulser_locations['physical'][key][2], color=pulser_colors[site-1], marker='o',label='Physical Pulser Site %i'%site,alpha=0.8)

    if plot_phase == True:
        ax.plot([pulser_locations['hpol']['run1507'][0],pulser_locations['physical']['run1507'][0]],[pulser_locations['hpol']['run1507'][1],pulser_locations['physical']['run1507'][1]],[pulser_locations['hpol']['run1507'][2],pulser_locations['physical']['run1507'][2]],color=pulser_colors[0],linestyle='--',alpha=0.5)
        ax.scatter( pulser_locations['hpol']['run1507'][0] , pulser_locations['hpol']['run1507'][1] , pulser_locations['hpol']['run1507'][2] , color=pulser_colors[0] , marker='*',alpha=0.8)

        ax.plot([pulser_locations['hpol']['run1509'][0],pulser_locations['physical']['run1509'][0]],[pulser_locations['hpol']['run1509'][1],pulser_locations['physical']['run1509'][1]],[pulser_locations['hpol']['run1509'][2],pulser_locations['physical']['run1509'][2]],color=pulser_colors[1],linestyle='--',alpha=0.5)
        ax.scatter( pulser_locations['hpol']['run1509'][0] , pulser_locations['hpol']['run1509'][1] , pulser_locations['hpol']['run1509'][2] , color=pulser_colors[1] , marker='*',alpha=0.8)

        ax.plot([pulser_locations['hpol']['run1511'][0],pulser_locations['physical']['run1511'][0]],[pulser_locations['hpol']['run1511'][1],pulser_locations['physical']['run1511'][1]],[pulser_locations['hpol']['run1511'][2],pulser_locations['physical']['run1511'][2]],color=pulser_colors[2],linestyle='--',alpha=0.5)
        ax.scatter( pulser_locations['hpol']['run1511'][0] , pulser_locations['hpol']['run1511'][1] , pulser_locations['hpol']['run1511'][2] , color=pulser_colors[2] , marker='*',alpha=0.8)

        ax.plot([pulser_locations['vpol']['run1507'][0],pulser_locations['physical']['run1507'][0]],[pulser_locations['vpol']['run1507'][1],pulser_locations['physical']['run1507'][1]],[pulser_locations['vpol']['run1507'][2],pulser_locations['physical']['run1507'][2]],color=pulser_colors[0],linestyle='--',alpha=0.5)
        ax.scatter( pulser_locations['vpol']['run1507'][0] , pulser_locations['vpol']['run1507'][1] , pulser_locations['vpol']['run1507'][2] , color=pulser_colors[0] , marker='^',alpha=0.8)

        ax.plot([pulser_locations['vpol']['run1509'][0],pulser_locations['physical']['run1509'][0]],[pulser_locations['vpol']['run1509'][1],pulser_locations['physical']['run1509'][1]],[pulser_locations['vpol']['run1509'][2],pulser_locations['physical']['run1509'][2]],color=pulser_colors[1],linestyle='--',alpha=0.5)
        ax.scatter( pulser_locations['vpol']['run1509'][0] , pulser_locations['vpol']['run1509'][1] , pulser_locations['vpol']['run1509'][2] , color=pulser_colors[1] , marker='^',alpha=0.8)

        ax.plot([pulser_locations['vpol']['run1511'][0],pulser_locations['physical']['run1511'][0]],[pulser_locations['vpol']['run1511'][1],pulser_locations['physical']['run1511'][1]],[pulser_locations['vpol']['run1511'][2],pulser_locations['physical']['run1511'][2]],color=pulser_colors[2],linestyle='--',alpha=0.5)
        ax.scatter( pulser_locations['vpol']['run1511'][0] , pulser_locations['vpol']['run1511'][1] , pulser_locations['vpol']['run1511'][2] , color=pulser_colors[2] , marker='^',alpha=0.8)


    ax.set_xlabel('E (m)')
    ax.set_ylabel('N (m)')
    ax.set_zlabel('Relative Elevation (m)')
    plt.legend()


    fig = plt.figure()
    fig.canvas.set_window_title('Antenna Locations')
    ax = fig.add_subplot(111, projection='3d')

    for i, a in antennas_physical.items():
        ax.scatter(a[0], a[1], a[2], marker='o',color=colors[i],label='Physical %i'%i,alpha=0.8)

    if plot_phase == True:
        for i, a in antennas_phase_hpol.items():
            ax.plot([antennas_physical[i][0],antennas_phase_hpol[i][0]],[antennas_physical[i][1],antennas_phase_hpol[i][1]],[antennas_physical[i][2],antennas_phase_hpol[i][2]],color=colors[i],linestyle='--',alpha=0.5)
            ax.scatter(a[0], a[1], a[2], marker='*',color=colors[i],label='%s Phase Center %i'%('Hpol', i),alpha=0.8)
        for i, a in antennas_phase_vpol.items():
            ax.plot([antennas_physical[i][0],antennas_phase_vpol[i][0]],[antennas_physical[i][1],antennas_phase_vpol[i][1]],[antennas_physical[i][2],antennas_phase_vpol[i][2]],color=colors[i],linestyle='--',alpha=0.5)
            ax.scatter(a[0], a[1], a[2], marker='^',color=colors[i],label='%s Phase Center %i'%('Vpol', i),alpha=0.8)

    ax.set_xlabel('E (m)')
    ax.set_ylabel('N (m)')
    ax.set_zlabel('Relative Elevation (m)')
    plt.legend()



def loadClockRates():
    '''
    Loads a dictionary containing the known clock rates as calculated using the clock_correct.py scipt.
    These are given in Hz.
    '''
    clock_rates = {
    'run782'    :31249808.91966798,
    'run783'    :31249808.948130235,
    'run784'    :31249809.35802664,
    'run785'    :31249809.82779526,
    'run788'    :31249807.839061476,
    'run789'    :31249809.895620257,
    'run792'    :31249812.04283368,
    'run793'    :31249809.22371152,
    'run1506'   :31249822.962542757,
    'run1507'   :31249815.193117745,
    'run1508'   :31249811.59632718,
    'run1509'   :31249810.666976035,
    'run1511'   :31249840.967325963}
    clock_rates['default'] = numpy.mean([v for key,v in clock_rates.items()])
    return clock_rates


def loadIgnorableEventids():
    '''
    This function loads dictionaries containing eventids that one may want to ignore.

    For instance eventids that are known pulser event ids but ones you want to ignore
    when making a template. 
    '''

    ignore_eventids = {}
    ignore_eventids['run793'] = numpy.array([ 96607,  96657,  96820,  96875,  98125,  98588,  99208, 100531,\
                           101328, 101470, 101616, 101640, 101667, 102159, 102326, 102625,\
                           103235, 103646, 103842, 103895, 103977, 104118, 104545, 105226,\
                           105695, 105999, 106227, 106476, 106622, 106754, 106786, 106813,\
                           106845, 107022, 107814, 108162, 110074, 110534, 110858, 111098,\
                           111197, 111311, 111542, 111902, 111941, 112675, 112713, 112864,\
                           112887, 113062, 113194, 113392, 113476, 113957, 114069, 114084,\
                           114295, 114719, 114738, 114755, 114942, 115055, 115413, 115442,\
                           115465, 115491, 115612, 116065])
    #For some reason there is a shift in arrival times that makes these different than later events?
    ignore_eventids['run1509'] = numpy.array([  2473, 2475, 2477, 2479, 2481, 2483, 2485, 2487, 2489, 2491, 2493,\
                                               2495, 2497, 2499, 2501, 2503, 2505, 2507, 2509, 2511, 2513, 2515,\
                                               2517, 2519, 2521, 2523, 2525, 2527, 2529, 2531, 2533, 2535, 2537,\
                                               2539, 2541, 2543, 2545, 2547, 2549, 2551, 2553, 2555, 2557, 2559,\
                                               2561, 2563, 2565, 2567, 2569, 2571, 2573, 2575, 2577, 2579, 2581,\
                                               2583, 2585, 2587, 2589, 2591, 2593, 2595, 2597, 2599, 2601, 2603,\
                                               2605, 2607, 2609, 2611, 2613, 2615, 2617, 2619, 2621, 2623, 2625,\
                                               2627, 2629, 2631, 2633, 2635, 2637, 2639, 2641, 2643, 2645, 2647,\
                                               2649, 2651, 2653, 2655, 2657, 2659, 2661, 2663, 2665, 2667, 2669,\
                                               2671, 2673, 2675, 2677, 2679, 2681, 2683, 2685, 2687, 2689, 2691,\
                                               2693, 2695, 2697, 2699, 2701, 2703, 2705, 2707, 2709, 2711, 2713,\
                                               2715, 2717, 2719, 2721, 2723, 2725, 2727, 2729, 2731, 2733, 2735,\
                                               2737, 2739, 2741, 2743, 2745, 2747, 2749, 2751, 2753, 2755, 2757,\
                                               2759, 2761, 2763, 2765, 2767, 2769, 2771, 2773, 2775, 2777, 2779,\
                                               2781, 2783, 2785, 2787, 2789, 2791, 2793, 2795, 2797, 2799, 2801,\
                                               2803, 2805, 2807, 2809, 2811, 2813, 2815, 2817, 2819, 2821, 2823,\
                                               2825, 2827, 2829, 2831, 2833, 2835, 2837, 2839, 2841, 2843, 2845,\
                                               2847, 2849, 2851, 2853, 2855, 2857, 2859])
    ignore_eventids['run1511'] = numpy.array([1052, 1162, 1198, 1224, 1230, 1232, 1242, 1244, 1262, 1264, 1286,\
                                        1310, 1328, 1330, 1346, 1350, 1370, 1372, 1382, 1416, 1420, 1426,\
                                        1428, 1434, 1442, 1458, 1462, 1464, 1470, 1482, 1492, 1494, 1502,\
                                        1504, 1506, 1528, 1536, 1538, 1574, 1592, 1614, 1636, 1644, 1654,\
                                        1668, 1670, 1672, 1680, 1684, 1686, 1694, 1698, 1710, 1726, 1734,\
                                        1736, 1738, 1742, 1774, 1776, 1782, 1786, 1794, 1798, 1804, 1826,\
                                        1832, 1838, 1848, 1860, 1862, 1868, 1876, 1880, 1882, 1888, 1890,\
                                        1892, 1894, 1908, 1912, 1950, 1960, 1962, 1964, 1974, 1992, 2004,\
                                        2012, 2014, 2018, 2030, 2034, 2048, 2050, 2054, 2058, 2066, 2068,\
                                        2070, 2076, 2078, 2096, 2100, 2108, 2120, 2124, 2126, 2134, 2146,\
                                        2152, 2162, 2176, 2182, 2184, 2186, 2196, 2200, 2202, 2216, 2220,\
                                        2230, 2236, 2242, 2248, 2258, 2266, 2270, 2280, 2302, 2304, 2316,\
                                        2330, 2348, 2352, 2356, 2360, 2362, 2368, 2372, 2376, 2388, 2390,\
                                        2392, 2394, 2396, 2398, 2400, 2406, 2408, 2416, 2426, 2428, 2442,\
                                        2452, 2458, 2466, 2470, 2472, 2476, 2484, 2486, 2498, 2504, 2516,\
                                        2530, 2532, 2534, 2542, 2546, 2570, 2592, 2594, 2596, 2598, 2600,\
                                        2602, 2608, 2620, 2622, 2624, 2636, 2638, 2650, 2660, 2664, 2670,\
                                        2686, 2692, 2698, 2700, 2702, 2706, 2716, 2718, 2740, 2750, 2754])
    ignore_eventids['run1507'] = numpy.loadtxt(os.environ['BEACON_ANALYSIS_DIR'] + 'tools/eventids/run1507_pulser_ignoreids.csv',delimiter=',').astype(int)
    ignore_eventids['run1509'] = numpy.sort(numpy.append(ignore_eventids['run1509'],numpy.loadtxt(os.environ['BEACON_ANALYSIS_DIR'] + 'tools/eventids/run1509_pulser_ignoreids.csv',delimiter=',').astype(int)))
    ignore_eventids['run1511'] = numpy.sort(numpy.append(ignore_eventids['run1511'],numpy.loadtxt(os.environ['BEACON_ANALYSIS_DIR'] + 'tools/eventids/run1511_pulser_ignoreids.csv',delimiter=',').astype(int)))
    return ignore_eventids

def loadPulserEventids(remove_ignored=True):
    '''
    Loads a dictionary containing the known eventids for pulsers.

    If subsets of runs are known to be different, this dictionary may contain
    an additional layer of keys seperating the events.  The code that uses this should
    known how to handle this. 
    '''
    known_pulser_ids = {}
    known_pulser_ids['run781'] = numpy.array([])
    known_pulser_ids['run782'] = numpy.loadtxt(os.environ['BEACON_ANALYSIS_DIR'] + 'tools/eventids/run782_pulser_eventids.csv',delimiter=',').astype(int)
    known_pulser_ids['run783'] = numpy.loadtxt(os.environ['BEACON_ANALYSIS_DIR'] + 'tools/eventids/run783_pulser_eventids.csv',delimiter=',').astype(int)
    known_pulser_ids['run784'] = numpy.loadtxt(os.environ['BEACON_ANALYSIS_DIR'] + 'tools/eventids/run784_pulser_eventids.csv',delimiter=',').astype(int)
    known_pulser_ids['run785'] = numpy.loadtxt(os.environ['BEACON_ANALYSIS_DIR'] + 'tools/eventids/run785_pulser_eventids.csv',delimiter=',').astype(int)
    known_pulser_ids['run786'] = numpy.array([])
    known_pulser_ids['run787'] = numpy.array([])
    known_pulser_ids['run788'] = numpy.loadtxt(os.environ['BEACON_ANALYSIS_DIR'] + 'tools/eventids/run788_pulser_eventids.csv',delimiter=',').astype(int)
    known_pulser_ids['run789'] = numpy.loadtxt(os.environ['BEACON_ANALYSIS_DIR'] + 'tools/eventids/run789_pulser_eventids.csv',delimiter=',').astype(int)

    known_pulser_ids['run792'] = \
        numpy.array([115156, 115228, 115256, 115276, 115283, 115315, 115330, 115371,\
        115447, 115612, 115872, 116230, 116262, 116462, 116473, 116479,\
        116486, 116511, 116524, 116603, 116619, 116624, 116633, 116760,\
        116790, 116816, 117026, 117050, 117175, 117195, 117237, 117247,\
        117258, 117315, 117378, 117540, 117837, 117858, 117874, 117933,\
        117949, 118116, 118139, 118167, 118208, 118219, 118227, 118241,\
        118256, 118267, 118295, 118364, 118423, 118461, 118497, 118518,\
        118644, 118662, 118676, 118685, 118719, 118752, 118856, 118872,\
        118889, 118908, 118930, 118946, 118994, 119038, 119053, 119064,\
        119070, 119094, 119150, 119161, 119177, 119208, 119223, 119304,\
        119315, 119339, 119346, 119371, 119390, 119401, 119408, 119414,\
        119431, 119434, 119458, 119472, 119478, 119508, 119517, 119555,\
        119578, 119598, 119629, 119636, 119648, 119660, 119671, 119844,\
        120009, 120107, 120115, 120202, 120225, 120241, 120249, 120263,\
        120276, 120281, 120292, 120374, 120587, 120607, 120613, 120628,\
        120632, 120905, 120910, 120916, 120925, 120941, 121019, 121081,\
        121170, 121318, 121382, 121460, 121489, 121510, 121725, 121736,\
        121741, 121751, 121765, 121769, 121803, 121876, 121981, 122001,\
        122014, 122021, 122053, 122073, 122093, 122166, 122293, 122311,\
        122403, 122455, 122508, 122551, 122560, 122579, 122723, 122761,\
        122797])
    known_pulser_ids['run793'] = \
        numpy.array([    96607,  96632,  96657,  96684,  96762,  96820,  96875,  96962,\
        97532,  97550,  97583,  97623,  97636,  97661,  97681,  97698,\
        97720,  97739,  97761,  97782,  97803,  97824,  97846,  97876,\
        97932,  97954,  97979,  98006,  98030,  98050,  98075,  98125,\
        98148,  98163,  98190,  98207,  98277,  98431,  98450,  98472,\
        98507,  98545,  98561,  98577,  98587,  98588,  98631,  98657,\
        98674,  98687,  98707,  98731,  98799,  98815,  99040,  99086,\
        99110,  99158,  99208,  99227,  99245,  99264,  99288,  99309,\
        99340,  99353,  99375,  99398,  99423,  99440,  99454,  99477,\
        99493,  99513,  99530,  99548,  99911,  99942,  99951,  99985,\
        100002, 100019, 100035, 100055, 100073, 100096, 100114, 100153,\
        100189, 100294, 100424, 100442, 100531, 100591, 100748, 100767,\
        100899, 100979, 101000, 101011, 101025, 101129, 101146, 101161,\
        101177, 101191, 101212, 101227, 101261, 101281, 101297, 101311,\
        101328, 101363, 101378, 101457, 101470, 101485, 101500, 101527,\
        101540, 101556, 101578, 101616, 101640, 101667, 101736, 101760,\
        101819, 102100, 102116, 102136, 102159, 102178, 102194, 102215,\
        102239, 102255, 102274, 102309, 102326, 102364, 102382, 102398,\
        102417, 102443, 102464, 102484, 102516, 102529, 102551, 102562,\
        102574, 102587, 102606, 102625, 102648, 102667, 102693, 102713,\
        102733, 102758, 102775, 102796, 102811, 102830, 102847, 102870,\
        102883, 102904, 102924, 102944, 102965, 102982, 102997, 103017,\
        103035, 103054, 103075, 103097, 103116, 103135, 103156, 103176,\
        103195, 103214, 103235, 103249, 103264, 103283, 103301, 103323,\
        103340, 103390, 103407, 103419, 103438, 103456, 103468, 103479,\
        103497, 103512, 103528, 103540, 103555, 103578, 103593, 103617,\
        103627, 103646, 103665, 103679, 103697, 103715, 103731, 103747,\
        103761, 103774, 103800, 103818, 103842, 103880, 103895, 103921,\
        103965, 103977, 103995, 104008, 104025, 104055, 104073, 104118,\
        104142, 104152, 104174, 104191, 104204, 104220, 104255, 104279,\
        104340, 104398, 104430, 104487, 104515, 104545, 104572, 104606,\
        104632, 104656, 104721, 104745, 104779, 104812, 104836, 105082,\
        105119, 105147, 105191, 105226, 105304, 105329, 105352, 105407,\
        105429, 105454, 105477, 105510, 105530, 105560, 105586, 105620,\
        105641, 105667, 105695, 105723, 105749, 105779, 105804, 105832,\
        105881, 105897, 105967, 105999, 106017, 106043, 106063, 106093,\
        106152, 106227, 106397, 106421, 106461, 106476, 106516, 106538,\
        106559, 106581, 106622, 106680, 106730, 106754, 106765, 106786,\
        106813, 106845, 106869, 106891, 106916, 106942, 106966, 107022,\
        107052, 107070, 107088, 107114, 107126, 107153, 107203, 107221,\
        107249, 107275, 107302, 107325, 107341, 107356, 107382, 107407,\
        107433, 107461, 107489, 107499, 107522, 107546, 107571, 107596,\
        107620, 107646, 107672, 107692, 107718, 107744, 107764, 107790,\
        107814, 107835, 107856, 107881, 107911, 107940, 108115, 108131,\
        108162, 108184, 108209, 108233, 108275, 108294, 108319, 108373,\
        108827, 108878, 108926, 108969, 108984, 109012, 109054, 109087,\
        109106, 109121, 109139, 109161, 109185, 109212, 109261, 110029,\
        110074, 110100, 110126, 110142, 110163, 110181, 110203, 110221,\
        110235, 110258, 110274, 110429, 110442, 110471, 110534, 110580,\
        110599, 110624, 110643, 110661, 110684, 110713, 110741, 110777,\
        110795, 110858, 110884, 110900, 110917, 110970, 110993, 111005,\
        111035, 111056, 111083, 111098, 111126, 111145, 111183, 111197,\
        111238, 111274, 111293, 111311, 111331, 111368, 111389, 111415,\
        111440, 111456, 111481, 111504, 111522, 111542, 111584, 111600,\
        111640, 111702, 111714, 111729, 111750, 111796, 111823, 111841,\
        111855, 111873, 111885, 111902, 111919, 111941, 111956, 111980,\
        111991, 112010, 112025, 112035, 112051, 112068, 112080, 112092,\
        112115, 112140, 112160, 112177, 112196, 112213, 112258, 112294,\
        112315, 112610, 112626, 112656, 112675, 112701, 112713, 112730,\
        112749, 112765, 112812, 112844, 112864, 112887, 112907, 112934,\
        112952, 112972, 113038, 113062, 113156, 113178, 113194, 113235,\
        113259, 113275, 113295, 113312, 113333, 113357, 113375, 113392,\
        113414, 113476, 113496, 113519, 113889, 113930, 113957, 114004,\
        114048, 114069, 114084, 114127, 114147, 114173, 114196, 114226,\
        114266, 114295, 114313, 114331, 114356, 114374, 114399, 114428,\
        114457, 114500, 114525, 114569, 114589, 114633, 114655, 114677,\
        114703, 114719, 114738, 114755, 114777, 114789, 114801, 114852,\
        114879, 114900, 114942, 114960, 114996, 115019, 115055, 115095,\
        115115, 115130, 115197, 115217, 115236, 115275, 115283, 115303,\
        115321, 115337, 115377, 115413, 115442, 115465, 115491, 115535,\
        115554, 115570, 115584, 115612, 115630, 115644, 115662, 115675,\
        115689, 115708, 115721, 115735, 115759, 115787, 115806, 115823,\
        115844, 115870, 115888, 115912, 115935, 115963, 115976, 115996,\
        116019, 116044, 116065, 116082, 116101, 116115, 116155, 116173,\
        116184])

    known_pulser_ids['run1507'] = {}
    known_pulser_ids['run1507']['hpol'] = numpy.loadtxt(os.environ['BEACON_ANALYSIS_DIR'] + 'tools/eventids/run1507_pulser_eventids_site_1a_bicone_hpol_16dB.csv',delimiter=',').astype(int)
    known_pulser_ids['run1507']['vpol'] = numpy.loadtxt(os.environ['BEACON_ANALYSIS_DIR'] + 'tools/eventids/run1507_pulser_eventids_site_1a_bicone_vpol_16dB.csv',delimiter=',').astype(int)

    known_pulser_ids['run1509'] = {}
    known_pulser_ids['run1509']['hpol'] = numpy.loadtxt(os.environ['BEACON_ANALYSIS_DIR'] + 'tools/eventids/run1509_pulser_eventids_site_2_bicone_hpol_22dB.csv',delimiter=',').astype(int)
    known_pulser_ids['run1509']['vpol'] = numpy.loadtxt(os.environ['BEACON_ANALYSIS_DIR'] + 'tools/eventids/run1509_pulser_eventids_site_2_bicone_vpol_17dB.csv',delimiter=',').astype(int)

    known_pulser_ids['run1511'] = {}
    known_pulser_ids['run1511']['hpol'] = numpy.loadtxt(os.environ['BEACON_ANALYSIS_DIR'] + 'tools/eventids/run1511_pulser_eventids_site_3_bicone_hpol_20dB.csv',delimiter=',').astype(int)
    known_pulser_ids['run1511']['vpol'] = numpy.loadtxt(os.environ['BEACON_ANALYSIS_DIR'] + 'tools/eventids/run1511_pulser_eventids_site_3_bicone_vpol_20dB.csv',delimiter=',').astype(int)

    if remove_ignored == True:
        ignore_events = loadIgnorableEventids()
        for key in numpy.array(list(known_pulser_ids.keys()))[numpy.isin(numpy.array(list(known_pulser_ids.keys())),numpy.array(list(ignore_events.keys())))]:
            if type(known_pulser_ids[key]) is dict:
                for kkey,val in known_pulser_ids[key].items():
                    known_pulser_ids[key][kkey] = known_pulser_ids[key][kkey][~numpy.isin(known_pulser_ids[key][kkey],ignore_events[key])]
            else:
                known_pulser_ids[key] = known_pulser_ids[key][~numpy.isin(known_pulser_ids[key],ignore_events[key])]
    #import pdb; pdb.set_trace()
    return known_pulser_ids


def loadBeamDelays(finame_hpol_delays=None, finame_vpol_delays=None, reset_rel_to_ant0=False):
    '''
    This will load the beams and beam delays that are currently selected as the best selction.
    These were determined using the define_beams.py script.  The delays are given in integer
    values of how many samples to delay each antenna's signal by for that beam.  The values
    are all positive such that the antenna that has 0 delay is the antenna that you expect
    the signal to arrive at last (all others are delayed until it's arrival).
    '''
    if finame_hpol_delays == None:
        hpol_delays_file = os.environ['BEACON_ANALYSIS_DIR'] + 'tools/beam_definitions/hpol_beam_delays.csv'
    else:
        hpol_delays_file = finame_hpol_delays
    if finame_hpol_delays == None:
        vpol_delays_file = os.environ['BEACON_ANALYSIS_DIR'] + 'tools/beam_definitions/vpol_beam_delays.csv'
    else:
        vpol_delays_file = finame_vpol_delays
        
    header = 1
    hpol_vals = numpy.loadtxt(hpol_delays_file,delimiter=',')
    vpol_vals = numpy.loadtxt(hpol_delays_file,delimiter=',')
    
    #print( numpy.shape(hpol_vals), numpy.shape(hpol_vals) )
    nbeams = numpy.shape(hpol_vals)[0]
    ncols = numpy.shape(hpol_vals)[1]
    
    if reset_rel_to_ant0 == True:
        for i in range(nbeams):
            # antenna 0
            hpol_ant0_delay = hpol_vals[i][3]
            hpol_vals[i][3] = 0
            # antenna 1
            hpol_vals[i][4] = hpol_vals[i][4]-hpol_ant0_delay
            # antenna 2
            hpol_vals[i][5] = hpol_vals[i][5]-hpol_ant0_delay
            # antenna 3
            hpol_vals[i][6] = hpol_vals[i][6]-hpol_ant0_delay
            
    return hpol_vals, vpol_vals

'''
MAKE AN EXPECTED PULSER TIME DELAY FUNCTION
'''

if __name__ == '__main__':
    try:
        from pprint import pprint
        
        print('Loaded run info dictionaries.')
        #plt.ion()
        #loadBeamDelays()
        antennas_physical, antennas_phase_hpol, antennas_phase_vpol = loadAntennaLocationsENU(deploy_index=default_deploy)



        print('antenna_physical = ')
        pprint(antennas_physical)

        print('antenna_phase_hpol = ')
        pprint(antennas_phase_hpol)

        print('antenna_phase_vpol = ')
        pprint(antennas_phase_vpol)
        #known_planes, calibrated_trigtime, output_tracks = getKnownPlaneTracks()

        print('\n\n\n\n')
        plotStationAndPulsers(deploy_index=10,plot_phase=False)

        if False:
            for deploy_index in [1,2,3]:
                pulser_locations_ENU = loadPulserLocationsENU(deploy_index=deploy_index)
                print('deploy_index = %i'%deploy_index)

                #Pulser Location 1
                p1_enu = pulser_locations_ENU['run1507']        
                p1_phi = numpy.arctan2(p1_enu[1],p1_enu[0])
                if p1_phi < 0:
                    print('Pulser location 1 phi is: %0.2f degrees South of East'%abs(numpy.rad2deg(p1_phi)))
                else:
                    print('Pulser location 1 phi is: %0.2f degrees North of East'%abs(numpy.rad2deg(p1_phi)))

                #Pulser Location 2
                p2_enu = pulser_locations_ENU['run1509']        
                p2_phi = numpy.arctan2(p2_enu[1],p2_enu[0])
                if p2_phi < 0:
                    print('Pulser location 2 phi is: %0.2f degrees South of East'%abs(numpy.rad2deg(p2_phi)))
                else:
                    print('Pulser location 2 phi is: %0.2f degrees North of East'%abs(numpy.rad2deg(p2_phi)))

                #Pulser Location 3
                p3_enu = pulser_locations_ENU['run1511']        
                p3_phi = numpy.arctan2(p3_enu[1],p3_enu[0])
                if p3_phi < 0:
                    print('Pulser location 3 phi is: %0.2f degrees South of East'%abs(numpy.rad2deg(p3_phi)))
                else:
                    print('Pulser location 3 phi is: %0.2f degrees North of East'%abs(numpy.rad2deg(p3_phi)))

        if False:
            fig = plt.figure()
            fig.canvas.set_window_title('Antenna Positions In Various Calibrations')
            ax = fig.add_subplot(111, projection='3d')

            ant0 = []
            ant1 = []
            ant2 = []
            ant3 = []


            for deploy_index in [6,7,9]:
                antennas_physical, antennas_phase_hpol, antennas_phase_vpol = loadAntennaLocationsENU(deploy_index=deploy_index)
                ant0.append(antennas_phase_hpol[0])
                ant1.append(antennas_phase_hpol[1])
                ant2.append(antennas_phase_hpol[2])
                ant3.append(antennas_phase_hpol[3])

            ax.scatter(numpy.array(ant0)[:,0], numpy.array(ant0)[:,1], numpy.array(ant0)[:,2],c='r',alpha=0.5,label='Initial Ant0')
            ax.scatter(numpy.array(ant1)[:,0], numpy.array(ant1)[:,1], numpy.array(ant1)[:,2],c='g',alpha=0.5,label='Initial Ant1')
            ax.scatter(numpy.array(ant2)[:,0], numpy.array(ant2)[:,1], numpy.array(ant2)[:,2],c='b',alpha=0.5,label='Initial Ant2')
            ax.scatter(numpy.array(ant3)[:,0], numpy.array(ant3)[:,1], numpy.array(ant3)[:,2],c='m',alpha=0.5,label='Initial Ant3')

            ax.set_xlabel('East (m)',linespacing=10)
            ax.set_ylabel('North (m)',linespacing=10)
            ax.set_zlabel('Up (m)',linespacing=10)


            fig = plt.figure()
            fig.canvas.set_window_title('Antenna Positions In Various Calibrations')
            ax = fig.add_subplot(111, projection='3d')

            labels = {6:'Southern',7:'Northern',8:'Eastern',9:'Western'}

            for deploy_index in [8,7,9,6]:
                antennas_physical, antennas_phase_hpol, antennas_phase_vpol = loadAntennaLocationsENU(deploy_index=deploy_index)
                x = [antennas_phase_hpol[0][0],antennas_phase_hpol[1][0],antennas_phase_hpol[2][0],antennas_phase_hpol[3][0]]
                y = [antennas_phase_hpol[0][1],antennas_phase_hpol[1][1],antennas_phase_hpol[2][1],antennas_phase_hpol[3][1]]
                z = [antennas_phase_hpol[0][2],antennas_phase_hpol[1][2],antennas_phase_hpol[2][2],antennas_phase_hpol[3][2]]
                ax.scatter(x, y, z,alpha=0.5,label=labels[deploy_index])

            plt.legend()
            ax.set_xlabel('East (m)',linespacing=10)
            ax.set_ylabel('North (m)',linespacing=10)
            ax.set_zlabel('Up (m)',linespacing=10)


    except Exception as e:
        print('Error in main loop.')
        print(e)
        exc_type, exc_obj, exc_tb = sys.exc_info()
        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
        print(exc_type, fname, exc_tb.tb_lineno)

